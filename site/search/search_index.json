{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site is a collection of notes and extra materials associated with CCE 270 at Brigham Young University. CCE 270 is now taught in Python and the course content can be found here: BYU CCE 270 - Computational Methods Prior to switching to Python, this course was taught in Microsoft Excel using Visual Basic for Applications (VBA). The Excel VBA Primer is a collection of notes and extra materials associated with CCE 270 when the primary programming language was Excel VBA. The VBA Primer is essentially an online textbook where each chapter is designed to supplement one of the class lectures. It can also be used as an independent resource for learning how to program in Excel using Visual Basic for Application (VBA). I maintain the VBA Primer for people who are interested in learning how to program in Excel using VBA. This primer is divided into three main sections: Section Description Excel Fundamentals Basic features of Microsoft Excel that are useful in engineering applications. VBA Fundamentals Basic features of Visual Basic for Applications (VBA) programming. Advanced VBA Advanced topics in VBA programming. There is also a Youtube Channel associated with this primer. It includes videos for a set of exercises associated with the VBA Primer content. The video playlists are organized in the same fashion as the VBA Primer table of contents. Please use the table of contents on the left to navigate through topics in each section. Brigham Young University - Dept. of Civil and Construction Engineering","title":"Home"},{"location":"01_excel/01_formulas/formulas/","text":"Cells and Formulas The most basic feature of Excel is the ability to enter data and then write formulas based on the data. As the data are edited, the formulas are automatically updated. In this chapter we review some of the procedure for entering and using formulas. Cell Addresses An Excel workbook contains a collection of sheets. Each sheet contains a collection of cells organized into rows and columns. The rows are indexed with numbers (1,2,3...) and the columns are indexed with letters (A,B,C...). Each cell can be uniquely identified by a cells address defined by the column-row combination. Address Description A5 Row 1, Column 1 D3 Row 3, Column 4 AJ234 Row 234, Column 36 Note that after column Z (26), the column numbers are indexed as AA,AB,AC... To reference a group of cells with single address we combine the upper left corner of the region with the lower right corner separated by a semicolon. For example, to reference the following range: we would use the address B3:F10 . Cell Inputs There are four primary types of information that can be entered in cells: Text (\"Hello world\", etc.) Numbers (4, 2382.23, 1e-14, etc.) Dates (Jun-5, 2014, 12/29/2015, etc.) Formulas (\"=A4+C5\", \"=Sum(D4:D14)\", etc.) For the first three types (text, numbers, dates), Excel determines the type of data based on the content as you enter it, and formats it appropriately. You can also customize the formatting if you wish. Entering a formula is described in the next section. Sometimes it is useful to enter a sequence of data in a cell. Excel provides a simple trick for doing this. For example, suppose you want to create a list of numbers 1, 2, 3, ... to fill in a column in a table. Rather than typing the entire list, you can enter the first three numbers and then select the three numbers. Once you do so, a green rectangle will appear at the lower right corner of the selection as follows: You can then click on the rectangle handle and drag it all the way down to the bottom of the list, or you can simply double-click on the handle. In either case, the list will automatically be extended as follows: This process works for other types of data also. For example, you can enter \"Mon\", \"Tues\", \"Wed\" or \"Jan\", \"Feb\", \"Mar\" and when you extend the list, the sequences will be automatically extended. Entering a Formula An Excel formula typically references cells in your worksheet and performs some type of calculation. To enter a formula, you start by typing an equal sign (\"=\") and then you reference cells using their addresses (\"A4\", \"C27\", \"D4:E15\", etc.). The values of the cells references are then used in the formula and a value is returned and displayed in the cell. As you change the values of the input cells, all of the dependent formulas are automatically updated. Formulas can reference other cells that contain formulas. When composing a formula, you can also reference a cell by clicking on the cell rather than typing out the cell address. This is particularly useful for multicell ranges (\"D4:G23\" for example). Editing a Formula Once you have entered a formula and you want to edit it, there are two options: You can select the cell containing the formula and then click in the Formula Bar at the top of the worksheet as follows: or you can double click on the cell containing the formula and edit it directly in the cell: Functions One of the most powerful features of Excel is built-in functions. A function typically takes one or more arguments as input and returns a value. Functions are extremenly useful in formulas. For example, you can use trig functions: sin(a) cos(a) tan(a) etc. where a = an angle in radians. There are also many functions that operate on a range as input: Sum(r) Average(r) Min(r) Max(r) etc. where r = a range of cells. For example, this formula computes the sum of a list of values: A complete set of the available functions can be found in the Excel Help. Copying Formulas After entering a formula, it is often necessary to copy that formula to other cells. For example, the following spreadsheet is designed to compute the volume and weight of a set of cylinders defined by a radius and a height. The volume can be computed from the radius and height using the following formula: After entering the formula in cell D7, we wish to copy the formula to cells D8:D22. This can be accomplished by selecting cell D7 after the formula has been entered and copying (Ctrl-C) and pasting (Ctrl-V) the formula to D8:D22 using the clipboard. Another method is to select the cell as follows: and then drag the green square in the lower right corner of the cell down to the end of the list, or simply double-click on the green square. After doing so, the formula is automatically copied to the end of the list: Relative vs. Absolute References When copying formulas, we need to be careful how were reference other cells in our formulas. For example, to calculate the weight of our cylinders, we take the volume of the cylinder and multiply by the unit wt of the cylinder material as follows: After copying the formula to the bottom of the table in column E, we notice that the weights are not properly computed: The reason for this error can be seen by revealing the formulas. This is accomplished by pressing Ctrl-~ on the keyboard (the \"~\" symbol is called the \"tilde\" and is on the upper left corner of your keyboard). Note that when you copy a formula, the cell references are updated with each subsequent cell the formula is copied to. Note that =B4*D7 is changed to =B5*D8 in the next cell down. This happens because whenever you reference a cell in a formula, that reference is interpreted to be relative to the cell containing the formula. In other words, when we type \"D7\" in a formula in cell E7, what we are really referencing is \"stay on the same row, but go one column to the left\". Therefore, when the formula is copied, it correctly references the proper volume value one cell to the left. However, our error occurs because of a relative reference to the unit wt. value. A reference to B4 from cell E7 literally means \"three rows up and three columns to the left\". But in this case, we don't want a relative reference. When we copy the formula, we want to ALWAYS reference cell B4. We can accomplish this by changing the B4 reference to make it absolute as follows: Note the \"$\" symbols. You make an absolute reference by directly typing the values or by typing B4 and then pressing the F4 key (Command-T on a Mac). Now after copying the formula down, we get correct answers: And the formulas look like this: Sometimes it is useful to use a mixed reference. Here is a summary of the ways in which you can reference another cell. Type Description D4 Row and column are both relative $D4 Row is relative and column is absolute D$4 Row is absolute and column is relative \\(D\\) 4 Row and column are both absolute For the example shown above, we could have gotten away with a mixed reference (\"B$4\") because we copied the formulas within a single column, but it works fine with a complete absolute reference (\"$B$4\"). To do a mixed reference, you can either directly type the \"$\" symbols or you can repeatedly press the F4 key to get the combination you are seeking. Sample Workbook The workbook used in the examples shown above can be downloaded here: cylinders.xlsx Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Run through some basic ways to input formulas into cells. Easy the_basics.xlsm the_basics_key.xlsm Calculate the buoyant force on different sized objects using formulas and cell references. Medium buoyancy.xlsm buoyancy_key.xlsm Use a formula to count the number of names found inside a table range. Medium name_counter.xlsx name_counter_key.xlsx Use trigonometric functions inside of formulas to find the missing angles and/or sides of a few triangles. Medium trigonometry.xlsm trigonometry_key.xlsm Use formulas to conduct statistics on an employee database. Hard employee_database.xlsm employee_database_key.xlsm","title":"Formulas"},{"location":"01_excel/01_formulas/formulas/#cells-and-formulas","text":"The most basic feature of Excel is the ability to enter data and then write formulas based on the data. As the data are edited, the formulas are automatically updated. In this chapter we review some of the procedure for entering and using formulas.","title":"Cells and Formulas"},{"location":"01_excel/01_formulas/formulas/#cell-addresses","text":"An Excel workbook contains a collection of sheets. Each sheet contains a collection of cells organized into rows and columns. The rows are indexed with numbers (1,2,3...) and the columns are indexed with letters (A,B,C...). Each cell can be uniquely identified by a cells address defined by the column-row combination. Address Description A5 Row 1, Column 1 D3 Row 3, Column 4 AJ234 Row 234, Column 36 Note that after column Z (26), the column numbers are indexed as AA,AB,AC... To reference a group of cells with single address we combine the upper left corner of the region with the lower right corner separated by a semicolon. For example, to reference the following range: we would use the address B3:F10 .","title":"Cell Addresses"},{"location":"01_excel/01_formulas/formulas/#cell-inputs","text":"There are four primary types of information that can be entered in cells: Text (\"Hello world\", etc.) Numbers (4, 2382.23, 1e-14, etc.) Dates (Jun-5, 2014, 12/29/2015, etc.) Formulas (\"=A4+C5\", \"=Sum(D4:D14)\", etc.) For the first three types (text, numbers, dates), Excel determines the type of data based on the content as you enter it, and formats it appropriately. You can also customize the formatting if you wish. Entering a formula is described in the next section. Sometimes it is useful to enter a sequence of data in a cell. Excel provides a simple trick for doing this. For example, suppose you want to create a list of numbers 1, 2, 3, ... to fill in a column in a table. Rather than typing the entire list, you can enter the first three numbers and then select the three numbers. Once you do so, a green rectangle will appear at the lower right corner of the selection as follows: You can then click on the rectangle handle and drag it all the way down to the bottom of the list, or you can simply double-click on the handle. In either case, the list will automatically be extended as follows: This process works for other types of data also. For example, you can enter \"Mon\", \"Tues\", \"Wed\" or \"Jan\", \"Feb\", \"Mar\" and when you extend the list, the sequences will be automatically extended.","title":"Cell Inputs"},{"location":"01_excel/01_formulas/formulas/#entering-a-formula","text":"An Excel formula typically references cells in your worksheet and performs some type of calculation. To enter a formula, you start by typing an equal sign (\"=\") and then you reference cells using their addresses (\"A4\", \"C27\", \"D4:E15\", etc.). The values of the cells references are then used in the formula and a value is returned and displayed in the cell. As you change the values of the input cells, all of the dependent formulas are automatically updated. Formulas can reference other cells that contain formulas. When composing a formula, you can also reference a cell by clicking on the cell rather than typing out the cell address. This is particularly useful for multicell ranges (\"D4:G23\" for example).","title":"Entering a Formula"},{"location":"01_excel/01_formulas/formulas/#editing-a-formula","text":"Once you have entered a formula and you want to edit it, there are two options: You can select the cell containing the formula and then click in the Formula Bar at the top of the worksheet as follows: or you can double click on the cell containing the formula and edit it directly in the cell:","title":"Editing a Formula"},{"location":"01_excel/01_formulas/formulas/#functions","text":"One of the most powerful features of Excel is built-in functions. A function typically takes one or more arguments as input and returns a value. Functions are extremenly useful in formulas. For example, you can use trig functions: sin(a) cos(a) tan(a) etc. where a = an angle in radians. There are also many functions that operate on a range as input: Sum(r) Average(r) Min(r) Max(r) etc. where r = a range of cells. For example, this formula computes the sum of a list of values: A complete set of the available functions can be found in the Excel Help.","title":"Functions"},{"location":"01_excel/01_formulas/formulas/#copying-formulas","text":"After entering a formula, it is often necessary to copy that formula to other cells. For example, the following spreadsheet is designed to compute the volume and weight of a set of cylinders defined by a radius and a height. The volume can be computed from the radius and height using the following formula: After entering the formula in cell D7, we wish to copy the formula to cells D8:D22. This can be accomplished by selecting cell D7 after the formula has been entered and copying (Ctrl-C) and pasting (Ctrl-V) the formula to D8:D22 using the clipboard. Another method is to select the cell as follows: and then drag the green square in the lower right corner of the cell down to the end of the list, or simply double-click on the green square. After doing so, the formula is automatically copied to the end of the list:","title":"Copying Formulas"},{"location":"01_excel/01_formulas/formulas/#relative-vs-absolute-references","text":"When copying formulas, we need to be careful how were reference other cells in our formulas. For example, to calculate the weight of our cylinders, we take the volume of the cylinder and multiply by the unit wt of the cylinder material as follows: After copying the formula to the bottom of the table in column E, we notice that the weights are not properly computed: The reason for this error can be seen by revealing the formulas. This is accomplished by pressing Ctrl-~ on the keyboard (the \"~\" symbol is called the \"tilde\" and is on the upper left corner of your keyboard). Note that when you copy a formula, the cell references are updated with each subsequent cell the formula is copied to. Note that =B4*D7 is changed to =B5*D8 in the next cell down. This happens because whenever you reference a cell in a formula, that reference is interpreted to be relative to the cell containing the formula. In other words, when we type \"D7\" in a formula in cell E7, what we are really referencing is \"stay on the same row, but go one column to the left\". Therefore, when the formula is copied, it correctly references the proper volume value one cell to the left. However, our error occurs because of a relative reference to the unit wt. value. A reference to B4 from cell E7 literally means \"three rows up and three columns to the left\". But in this case, we don't want a relative reference. When we copy the formula, we want to ALWAYS reference cell B4. We can accomplish this by changing the B4 reference to make it absolute as follows: Note the \"$\" symbols. You make an absolute reference by directly typing the values or by typing B4 and then pressing the F4 key (Command-T on a Mac). Now after copying the formula down, we get correct answers: And the formulas look like this: Sometimes it is useful to use a mixed reference. Here is a summary of the ways in which you can reference another cell. Type Description D4 Row and column are both relative $D4 Row is relative and column is absolute D$4 Row is absolute and column is relative \\(D\\) 4 Row and column are both absolute For the example shown above, we could have gotten away with a mixed reference (\"B$4\") because we copied the formulas within a single column, but it works fine with a complete absolute reference (\"$B$4\"). To do a mixed reference, you can either directly type the \"$\" symbols or you can repeatedly press the F4 key to get the combination you are seeking.","title":"Relative vs. Absolute References"},{"location":"01_excel/01_formulas/formulas/#sample-workbook","text":"The workbook used in the examples shown above can be downloaded here: cylinders.xlsx","title":"Sample Workbook"},{"location":"01_excel/01_formulas/formulas/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Run through some basic ways to input formulas into cells. Easy the_basics.xlsm the_basics_key.xlsm Calculate the buoyant force on different sized objects using formulas and cell references. Medium buoyancy.xlsm buoyancy_key.xlsm Use a formula to count the number of names found inside a table range. Medium name_counter.xlsx name_counter_key.xlsx Use trigonometric functions inside of formulas to find the missing angles and/or sides of a few triangles. Medium trigonometry.xlsm trigonometry_key.xlsm Use formulas to conduct statistics on an employee database. Hard employee_database.xlsm employee_database_key.xlsm","title":"Exercises"},{"location":"01_excel/02_vlookup/vlookup/","text":"Indexing a List with VLOOKUP When writing formulas, we often encounter cases where one or more of the inputs to the function will depend on the value of another input. More specifically, we need to use one of the inputs to lookup the other input from a table. This can be easily accomplished using the VLOOKUP function. For example, the following workbook computes the volume and weight of a set of cylinders. The weight is computing from the volume and the unit weight. However, the unit weight depends on the material being used. Unit weights for a set of common materials are shown in a table at the top: The objective of this exercise is to determine the appropriate unit weight for each cylinder and calculate the correct weight by multiplying the selected unit weight by the computed volume. We will do this by automatically selecting the correct unit weight from the list using the VLOOKUP function. Data Validation Before using the VLOOKUP function, we need to enter a set of materials in the Material column. We need to be careful as we do this because due to the way the VLOOKUP function works, we need to ensure that the items in the Materials column are spelled exactly the same way they are spelled in the unit weight table at the top. We can do this with a tool called Data Validation. This process is described in the Data Validation chapter. VLOOKUP Function Once the material values are entered in column E, we are ready to use the VLOOKUP function. The syntax for the VLOOKUP function is as follows: =VLOOKUP(lookup_value,table_array,col_index_num,range_lookup) where: Argument Description lookup_value The value to be found in the first column of the array table_array The table of information in which data is looked up. Use a reference to a range or a range name col_index_num The column number in table_array from which the matching value must be returned range_lookup A logical value (TRUE or FALSE) that specifies whether you want VLOOKUP to find an exact match or an approximate match. So for our case, we will use VLOOKUP to select a unit weight value from the table using the user-specified material. The unit weight returned by the function is then multiplied by the volume to compute the cylinder weight as follows: The first argument (E13) to the VLOOKUP function refers to the Material value on the same row and is a relative reference. The second argument ( \\(B\\) 5: \\(C\\) 10) is an absolute reference to the table use for the lookup. The lookup value (\"Concrete\" in this case) is used to search through the first column in the table to find the row matching the lookup value. In this case, the match is found on the third row of the table (cell B7). The third argument (\"2\") tells the VLOOKUP function from which column of the table the return value should be selected. Since the value is 2, we go to the second column of the lookup table on the selected row and find our value (\"150\"). This is the value that is returned by the function and multiplied by the volume (\"1.6\") to compute the weight. After copying this formula to the rest of the column, the weight values are all correctly computed as follows: If the values in the lookup table are edited, all of the weights would be automatically updated. Range Lookups In the example shown in the previous section, we are doing an exact match on the lookup value in the first column. In some cases we are not looking for an exact match, but we need to find a match from a set of numerical ranges. For example, suppose that we wanted to categorize the cylinder weights using the following guidelines: Weight (wt) Category wt \u2264 1000 Ultra Light 1000 \u2264 wt \u2264 2000 Light 2000 \u2264 wt \u2264 10,000 Medium 10,000 \u2264 wt \u2264 100,000 Heavy 100,000 \u2264 wt Extra Heavy We will then add a new table and an extra column as follows: Note that the weight values in the first column of the weight-category table at the top right has been sorted in ascending order. This is critical in order for the lookup to work. Next, we enter a formula using the VLOOKUP function as follows: Notice that the last argument (range_lookup) has a value of TRUE. This means that we take the lookup_value (\"235.6\" in this case) and we look through the first column of the table until we find a row where the value on the row is less than or equal to the lookup_value and the value on the next row is greater than the lookup_value. In this case, the match occurs on the first row and so the resulting value from column 2 is \"Ultra Light\". After copying the formula to the rest of the Category column, the resulting values are as follows: It is important to note that the range_lookup argument to the VLOOKUP function is optional. If it is omitted, it is assumed to be TRUE by default. A common error with the VLOOKUP function is to omit this argument when the VLOOKUP function is intended to be used as an exact match. This can lead to unintended errors, depending on how the values in the first column are ordered. Therefore, it is strongly recommended to always enter a TRUE or FALSE value for the range_lookup argument every time the VLOOKUP function is used. Two-Dimensional Lookup Occasionally it is useful to do a two-dimensional lookup where a value is found from a table containing both rows and columns. For example, consider the following sheet containing a table of temperatures in degree F illustrating a relationship between average monthly temp and elevation in ft for a particular location. Starting at row 24, another table is listed and the objective is to fill in the Temp column with a formula that looks up the temp corresponding to the elevation from column C and the month associated with the date provided in column B. This requires a double lookup. We use VLOOKUP to find the row we need based on a range lookup of elevation using the VLOOKUP function. Then, for the third argument to VLOOKUP, we need to determine which column to use based on the month desired. To find the right column based on the month, we first need to find the month label (\"Jan\", \"Feb\", etc.) from a date value. This can be accomplished using the TEXT function which takes a date as an argument and returns the month or day value depending on the format specified by the second argument as follows: =TEXT(B24,\"MMM\") For the values shown, the function would return \"Mar\". Then we need to use this text string to automatically find the index of the column corresponding to this month. This can be done with the MATCH function as follows: =MATCH(TEXT(B24,\"MMM\"),$C$5:$N$5,0) The first argument to the MATCH funciton is the lookup value, the second argument is an array (row or column of values) and the third argument indicates the type of match to perform (a value of 0 tells it to find an exact match). The function looks through the array to find the lookup value and returns the index of the item if found. For the arguments shown, the function would return a value of 3. At this point, we are ready to use the VLOOKUP function. We would formulate the function call as follows: Note that we are using a range lookup on elevation so the last argument to VLOOKUP is TRUE. Sample Workbooks The workbooks used in the examples shown above can be downloaded here: cylinders2.xlsx tempvselev.xlsx Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use VLOOKUP to match the number of human years to the appropriate dog years shown in the table. Easy dog_years.xlsx dog_years_key.xlsx From a list of fencing materials, match the price using VLOOKUP and the table given. Thenx multiply by the amount of yards needed to obtain the total cost. Easy construction_fencing.xlsm construction_fencing_key.xlsm Use VLOOKUP to multiply the user input by the appropriate conversion factor desired. Medium conversion_factor.xlsm conversion_factor_key.xlsm From a list of foods and servings, use VLOOKUP to calculate the number of calories and carbs. Hard diet_monitor.xlsx diet_monitor_key.xlsx","title":"VLOOKUP"},{"location":"01_excel/02_vlookup/vlookup/#indexing-a-list-with-vlookup","text":"When writing formulas, we often encounter cases where one or more of the inputs to the function will depend on the value of another input. More specifically, we need to use one of the inputs to lookup the other input from a table. This can be easily accomplished using the VLOOKUP function. For example, the following workbook computes the volume and weight of a set of cylinders. The weight is computing from the volume and the unit weight. However, the unit weight depends on the material being used. Unit weights for a set of common materials are shown in a table at the top: The objective of this exercise is to determine the appropriate unit weight for each cylinder and calculate the correct weight by multiplying the selected unit weight by the computed volume. We will do this by automatically selecting the correct unit weight from the list using the VLOOKUP function.","title":"Indexing a List with VLOOKUP"},{"location":"01_excel/02_vlookup/vlookup/#data-validation","text":"Before using the VLOOKUP function, we need to enter a set of materials in the Material column. We need to be careful as we do this because due to the way the VLOOKUP function works, we need to ensure that the items in the Materials column are spelled exactly the same way they are spelled in the unit weight table at the top. We can do this with a tool called Data Validation. This process is described in the Data Validation chapter.","title":"Data Validation"},{"location":"01_excel/02_vlookup/vlookup/#vlookup-function","text":"Once the material values are entered in column E, we are ready to use the VLOOKUP function. The syntax for the VLOOKUP function is as follows: =VLOOKUP(lookup_value,table_array,col_index_num,range_lookup) where: Argument Description lookup_value The value to be found in the first column of the array table_array The table of information in which data is looked up. Use a reference to a range or a range name col_index_num The column number in table_array from which the matching value must be returned range_lookup A logical value (TRUE or FALSE) that specifies whether you want VLOOKUP to find an exact match or an approximate match. So for our case, we will use VLOOKUP to select a unit weight value from the table using the user-specified material. The unit weight returned by the function is then multiplied by the volume to compute the cylinder weight as follows: The first argument (E13) to the VLOOKUP function refers to the Material value on the same row and is a relative reference. The second argument ( \\(B\\) 5: \\(C\\) 10) is an absolute reference to the table use for the lookup. The lookup value (\"Concrete\" in this case) is used to search through the first column in the table to find the row matching the lookup value. In this case, the match is found on the third row of the table (cell B7). The third argument (\"2\") tells the VLOOKUP function from which column of the table the return value should be selected. Since the value is 2, we go to the second column of the lookup table on the selected row and find our value (\"150\"). This is the value that is returned by the function and multiplied by the volume (\"1.6\") to compute the weight. After copying this formula to the rest of the column, the weight values are all correctly computed as follows: If the values in the lookup table are edited, all of the weights would be automatically updated.","title":"VLOOKUP Function"},{"location":"01_excel/02_vlookup/vlookup/#range-lookups","text":"In the example shown in the previous section, we are doing an exact match on the lookup value in the first column. In some cases we are not looking for an exact match, but we need to find a match from a set of numerical ranges. For example, suppose that we wanted to categorize the cylinder weights using the following guidelines: Weight (wt) Category wt \u2264 1000 Ultra Light 1000 \u2264 wt \u2264 2000 Light 2000 \u2264 wt \u2264 10,000 Medium 10,000 \u2264 wt \u2264 100,000 Heavy 100,000 \u2264 wt Extra Heavy We will then add a new table and an extra column as follows: Note that the weight values in the first column of the weight-category table at the top right has been sorted in ascending order. This is critical in order for the lookup to work. Next, we enter a formula using the VLOOKUP function as follows: Notice that the last argument (range_lookup) has a value of TRUE. This means that we take the lookup_value (\"235.6\" in this case) and we look through the first column of the table until we find a row where the value on the row is less than or equal to the lookup_value and the value on the next row is greater than the lookup_value. In this case, the match occurs on the first row and so the resulting value from column 2 is \"Ultra Light\". After copying the formula to the rest of the Category column, the resulting values are as follows: It is important to note that the range_lookup argument to the VLOOKUP function is optional. If it is omitted, it is assumed to be TRUE by default. A common error with the VLOOKUP function is to omit this argument when the VLOOKUP function is intended to be used as an exact match. This can lead to unintended errors, depending on how the values in the first column are ordered. Therefore, it is strongly recommended to always enter a TRUE or FALSE value for the range_lookup argument every time the VLOOKUP function is used.","title":"Range Lookups"},{"location":"01_excel/02_vlookup/vlookup/#two-dimensional-lookup","text":"Occasionally it is useful to do a two-dimensional lookup where a value is found from a table containing both rows and columns. For example, consider the following sheet containing a table of temperatures in degree F illustrating a relationship between average monthly temp and elevation in ft for a particular location. Starting at row 24, another table is listed and the objective is to fill in the Temp column with a formula that looks up the temp corresponding to the elevation from column C and the month associated with the date provided in column B. This requires a double lookup. We use VLOOKUP to find the row we need based on a range lookup of elevation using the VLOOKUP function. Then, for the third argument to VLOOKUP, we need to determine which column to use based on the month desired. To find the right column based on the month, we first need to find the month label (\"Jan\", \"Feb\", etc.) from a date value. This can be accomplished using the TEXT function which takes a date as an argument and returns the month or day value depending on the format specified by the second argument as follows: =TEXT(B24,\"MMM\") For the values shown, the function would return \"Mar\". Then we need to use this text string to automatically find the index of the column corresponding to this month. This can be done with the MATCH function as follows: =MATCH(TEXT(B24,\"MMM\"),$C$5:$N$5,0) The first argument to the MATCH funciton is the lookup value, the second argument is an array (row or column of values) and the third argument indicates the type of match to perform (a value of 0 tells it to find an exact match). The function looks through the array to find the lookup value and returns the index of the item if found. For the arguments shown, the function would return a value of 3. At this point, we are ready to use the VLOOKUP function. We would formulate the function call as follows: Note that we are using a range lookup on elevation so the last argument to VLOOKUP is TRUE.","title":"Two-Dimensional Lookup"},{"location":"01_excel/02_vlookup/vlookup/#sample-workbooks","text":"The workbooks used in the examples shown above can be downloaded here: cylinders2.xlsx tempvselev.xlsx","title":"Sample Workbooks"},{"location":"01_excel/02_vlookup/vlookup/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use VLOOKUP to match the number of human years to the appropriate dog years shown in the table. Easy dog_years.xlsx dog_years_key.xlsx From a list of fencing materials, match the price using VLOOKUP and the table given. Thenx multiply by the amount of yards needed to obtain the total cost. Easy construction_fencing.xlsm construction_fencing_key.xlsm Use VLOOKUP to multiply the user input by the appropriate conversion factor desired. Medium conversion_factor.xlsm conversion_factor_key.xlsm From a list of foods and servings, use VLOOKUP to calculate the number of calories and carbs. Hard diet_monitor.xlsx diet_monitor_key.xlsx","title":"Exercises"},{"location":"01_excel/03_validation/validation/","text":"Data Validation In order for our formulas to work properly, it is often helpful to set limitations on what can be entered into some of our input cells. This can be easily accomplished in Excel using the data validation tools. To illustrate how this works, we will use the Cylinder Analysis example features in the VLOOKUP chapter. In that example, we have a table of unit weights for a set of selected materials and in the lower table we have a column of Materiasl (column E) where the user will enter a material for each of the cylinders. In order for things to work properly, each of the entries in the Material column needs to match one of the entries in the first column of the unit weight vs. material table at the top of the sheet. We can ensure that this happen by applying data validation to the Material column in the lower table. First we need to select the cells in the Materials column (E12:E28). Then we select the Data Valdation button in the Data tab. This brings up the Data Validation dialog where we enter the following: Note that we have selected the List item in the Allow options. This means that we will allow the user to select an item from a list. Then we enter the address of the list (i.e., the first column in the unit weight table) in the Source field. This can be done by directly typing the formula as shown or simply by putting the cursor in the field and then selecting the range of cells. After clicking OK, whenever the user selects one of the cells in the column to enter a value, a pop-up menu is presented: If one of the items in the list is not selected, an error message is given. We can now populate the entire list with materials. It should be noted that Data Validation can be used for all types of checks on the input. The Allow options are as follows: For example, if the Decimal option is selected, the following options are presented: The Data option can be used to select \"between\", \"greater than\", \"less than\", etc. Thus, we can carefully control what values are allowed into each of our input cells, thereby minimizing the chance of errors. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Validate columns of a table used to keep track of inventory of various construction items. Easy inventory.xlsx inventory_key.xlsx Use data validation to control the user inputs on a spreadsheet used for scoring at a dog show. Medium dog_show.xlsx dog_show_key.xlsx","title":"Validation"},{"location":"01_excel/03_validation/validation/#data-validation","text":"In order for our formulas to work properly, it is often helpful to set limitations on what can be entered into some of our input cells. This can be easily accomplished in Excel using the data validation tools. To illustrate how this works, we will use the Cylinder Analysis example features in the VLOOKUP chapter. In that example, we have a table of unit weights for a set of selected materials and in the lower table we have a column of Materiasl (column E) where the user will enter a material for each of the cylinders. In order for things to work properly, each of the entries in the Material column needs to match one of the entries in the first column of the unit weight vs. material table at the top of the sheet. We can ensure that this happen by applying data validation to the Material column in the lower table. First we need to select the cells in the Materials column (E12:E28). Then we select the Data Valdation button in the Data tab. This brings up the Data Validation dialog where we enter the following: Note that we have selected the List item in the Allow options. This means that we will allow the user to select an item from a list. Then we enter the address of the list (i.e., the first column in the unit weight table) in the Source field. This can be done by directly typing the formula as shown or simply by putting the cursor in the field and then selecting the range of cells. After clicking OK, whenever the user selects one of the cells in the column to enter a value, a pop-up menu is presented: If one of the items in the list is not selected, an error message is given. We can now populate the entire list with materials. It should be noted that Data Validation can be used for all types of checks on the input. The Allow options are as follows: For example, if the Decimal option is selected, the following options are presented: The Data option can be used to select \"between\", \"greater than\", \"less than\", etc. Thus, we can carefully control what values are allowed into each of our input cells, thereby minimizing the chance of errors.","title":"Data Validation"},{"location":"01_excel/03_validation/validation/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Validate columns of a table used to keep track of inventory of various construction items. Easy inventory.xlsx inventory_key.xlsx Use data validation to control the user inputs on a spreadsheet used for scoring at a dog show. Medium dog_show.xlsx dog_show_key.xlsx","title":"Exercises"},{"location":"01_excel/04_names/names/","text":"Naming Cells When writing formulas in Excel, the formulas will often reference several other cells in the worksheet, or even cells on another worksheet. If the formula is complex, it can be difficult keep track of all of the references and determine if the formula is properly written. In such cases, we can make our formulas much simpler and more intuitive by using named cells. To illustrate this, consider the following workbook: The objective of the spreadsheet is to perform a set of calculations associated with a projectile fired from the coordinate origin (0,0) at an angle (\u03b1) at an initial velocity (v). A set of equations is then used to compute the range (r), the max height (h), and the total time in the air. The bottom table is used to compute a set of x,y coordinates defining the projective path. At the top of the sheet in cells C4:C7, a set of inputs are defined. The range, height, and total time are computed in cells C9:C11. Using the standard cell reference notation, the formulas in cells C9:C11 would appear as follows: Cell Formula range =(C6^2 SIN(2 C5))/C7 height =(C6^2 (SIN(C5))^2)/(2 C7) time =(2 C6 SIN(C5))/C7 These formulas can be compared to the equations shown in the above figure. To make our formulas easier to enter, read, and edit, we will now create a set of cells names and rewrite the formulas. Each cell has a default name based on the column-row combination (C6, D15, etc.). However, we can create an additional name (or alias) for a cell by selecting the cell and typing in a new name in the name box in the upper left corner just above the cells and below the menu. For example, to create a new name for the angle, we select cell C5 and then click in the name box and type in a new name (\"alpha\") and then hit Return as follows: We then repeat the same process for cells C5 (v) and C7 (g). Now, we can rewrite the formulas for the range, height, and time using the cell names. After doing so, they look like this: Cell Formula range =(v^2 SIN(2 alpha))/g height =(v^2 (SIN(alpha))^2)/(2 g) time =(2 v SIN(alpha))/g Compare these formulas to the first set shown above and note how they more closely resemble the native set of equations shown in the first diagram. The names make the formulas easier to enter and easier to understand. This is especially true of longer formulas and cases where cells on different sheets are referenced. Relative vs. Absolute It is important to note that using a cell name in a formula represents an absolute reference. It is not possible to refer to a cell via a name as a relative reference unless you are using array formulas. This is also an advantage to named cells because you can simply type the cell name without worrying about the \"$\" symbols associated with an absolute reference. Ranges Names can not only be applied to individual cells, but also to ranges of cells. For example, you can select the range B14:D10 and call it \"xytable\" or something. This is especially useful when writing formulas using the VLOOKUP function where you need to make an absolute reference to a range of cells for the vlookup_table argument. Naming Rules Cell names can be any combination of letters and numbers, but you cannot use a name that would be otherwise interpreted as a native cell address (\"B4\", \"C20\", etc.). You also cannot put spaces or special characters (\"#\", \"%\", etc.) in the names. Single letter names (\"a\", \"b\", etc.) are allowed, except for \"c\" and \"r\" which are not allowed. You can apply multiple names to the same cell or range. Any of the names can be used to reference the cell or range in a formula. Multiple Names You can assign as many names as you like to the same cell or range of cells. Any of the names can then be used to reference the cell or range in your formulas. Think of it as a person answering to multiple nicknames (\"Champ\", \"Slugger\", \"Cowboy\", \"Buckaroo\"). Name Manager In addition to using the name box as described above, you can also name a cell using the Name Manager button located in the Fomulas ribbon: This brings up the following dialog: This dialog can be used to edit and/or delete names, or to create new names. Deleting a Name One needs to be careful when deleting a name associated with a cell or range. You CANNOT select the cell or range and then delete the name from the name box in the upper left corner of the worksheet. This may appear to delete the name but it does not. The only way to delete a name is using the Name Manager. Sample Workbook The workbook used in the examples shown above can be downloaded here: projectile.xlsx Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use cell naming to find the volume and weight of different objects. Easy names.xlsm names_key.xlsm Use names as inputs to a formula to calculate the moment arm on a lever at different lengths. Medium moment_arm.xlsm moment_arm_key.xlsm Use names inside of formulas to determine the solution to the bernoulli equation. Hard bernoulli_problem.xlsm bernoulli_problem_key.xlsm","title":"Names"},{"location":"01_excel/04_names/names/#naming-cells","text":"When writing formulas in Excel, the formulas will often reference several other cells in the worksheet, or even cells on another worksheet. If the formula is complex, it can be difficult keep track of all of the references and determine if the formula is properly written. In such cases, we can make our formulas much simpler and more intuitive by using named cells. To illustrate this, consider the following workbook: The objective of the spreadsheet is to perform a set of calculations associated with a projectile fired from the coordinate origin (0,0) at an angle (\u03b1) at an initial velocity (v). A set of equations is then used to compute the range (r), the max height (h), and the total time in the air. The bottom table is used to compute a set of x,y coordinates defining the projective path. At the top of the sheet in cells C4:C7, a set of inputs are defined. The range, height, and total time are computed in cells C9:C11. Using the standard cell reference notation, the formulas in cells C9:C11 would appear as follows: Cell Formula range =(C6^2 SIN(2 C5))/C7 height =(C6^2 (SIN(C5))^2)/(2 C7) time =(2 C6 SIN(C5))/C7 These formulas can be compared to the equations shown in the above figure. To make our formulas easier to enter, read, and edit, we will now create a set of cells names and rewrite the formulas. Each cell has a default name based on the column-row combination (C6, D15, etc.). However, we can create an additional name (or alias) for a cell by selecting the cell and typing in a new name in the name box in the upper left corner just above the cells and below the menu. For example, to create a new name for the angle, we select cell C5 and then click in the name box and type in a new name (\"alpha\") and then hit Return as follows: We then repeat the same process for cells C5 (v) and C7 (g). Now, we can rewrite the formulas for the range, height, and time using the cell names. After doing so, they look like this: Cell Formula range =(v^2 SIN(2 alpha))/g height =(v^2 (SIN(alpha))^2)/(2 g) time =(2 v SIN(alpha))/g Compare these formulas to the first set shown above and note how they more closely resemble the native set of equations shown in the first diagram. The names make the formulas easier to enter and easier to understand. This is especially true of longer formulas and cases where cells on different sheets are referenced.","title":"Naming Cells"},{"location":"01_excel/04_names/names/#relative-vs-absolute","text":"It is important to note that using a cell name in a formula represents an absolute reference. It is not possible to refer to a cell via a name as a relative reference unless you are using array formulas. This is also an advantage to named cells because you can simply type the cell name without worrying about the \"$\" symbols associated with an absolute reference.","title":"Relative vs. Absolute"},{"location":"01_excel/04_names/names/#ranges","text":"Names can not only be applied to individual cells, but also to ranges of cells. For example, you can select the range B14:D10 and call it \"xytable\" or something. This is especially useful when writing formulas using the VLOOKUP function where you need to make an absolute reference to a range of cells for the vlookup_table argument.","title":"Ranges"},{"location":"01_excel/04_names/names/#naming-rules","text":"Cell names can be any combination of letters and numbers, but you cannot use a name that would be otherwise interpreted as a native cell address (\"B4\", \"C20\", etc.). You also cannot put spaces or special characters (\"#\", \"%\", etc.) in the names. Single letter names (\"a\", \"b\", etc.) are allowed, except for \"c\" and \"r\" which are not allowed. You can apply multiple names to the same cell or range. Any of the names can be used to reference the cell or range in a formula.","title":"Naming Rules"},{"location":"01_excel/04_names/names/#multiple-names","text":"You can assign as many names as you like to the same cell or range of cells. Any of the names can then be used to reference the cell or range in your formulas. Think of it as a person answering to multiple nicknames (\"Champ\", \"Slugger\", \"Cowboy\", \"Buckaroo\").","title":"Multiple Names"},{"location":"01_excel/04_names/names/#name-manager","text":"In addition to using the name box as described above, you can also name a cell using the Name Manager button located in the Fomulas ribbon: This brings up the following dialog: This dialog can be used to edit and/or delete names, or to create new names.","title":"Name Manager"},{"location":"01_excel/04_names/names/#deleting-a-name","text":"One needs to be careful when deleting a name associated with a cell or range. You CANNOT select the cell or range and then delete the name from the name box in the upper left corner of the worksheet. This may appear to delete the name but it does not. The only way to delete a name is using the Name Manager.","title":"Deleting a Name"},{"location":"01_excel/04_names/names/#sample-workbook","text":"The workbook used in the examples shown above can be downloaded here: projectile.xlsx","title":"Sample Workbook"},{"location":"01_excel/04_names/names/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use cell naming to find the volume and weight of different objects. Easy names.xlsm names_key.xlsm Use names as inputs to a formula to calculate the moment arm on a lever at different lengths. Medium moment_arm.xlsm moment_arm_key.xlsm Use names inside of formulas to determine the solution to the bernoulli equation. Hard bernoulli_problem.xlsm bernoulli_problem_key.xlsm","title":"Exercises"},{"location":"01_excel/05_operators/operators/","text":"Operators and Precedence When developing engineering applications with Excel, we often take complex equations and convert them to Excel formulas. In so doing, it is easy to compose the formula in such a way that leads to incorrect results. For example, consider the following spreadsheet: The objective of the spreadsheet is to solve for the roots of a quadratic equation of the form: \\(ax^2 + bx + c = 0\\) using the two equations shown above. Let's focus on the euqation for root 1 which would be entered in cell D5. How should one go about transforming the native equation into a formula that is properly interpreted by Excel? Consider the following potential solution: =-B5+B5^2-4*A5*C5^0.5/2*A5 This results in a solution of: The most obvious error is that we need to put parentheses around the discriminant (b2 - 4ac) part before taking the square root ( we are taking the square root by raising to a power of 0.5). Otherwise we are only taking the square root of c only. After making this correction: =-B5+(B5^2-4*A5*C5)^0.5/2*A5 which gives us an answer of 6.58, which is still wrong. The correct answer is 1.65. In order to get the correct answer, we need to put parentheses around both the numerator and denominator as follows: =(-B5+(B5^2-4*A5*C5)^0.5)/(2*A5) After doing so, we finally get the correct set of answers: So how do we determine when and where to use parentheses? Are they always required? Here is another example. Take the following formula that uses cell names: =x+y*z^p/2*x Which of the following corresponds to the equation defined by this formula? a. \\(x + yz^\\left({\\dfrac{p}{2x}}\\right)\\) b. \\(\\dfrac{x + yz^p}{2x}\\) c. \\(x + \\dfrac{yz^p}{2x}\\) d. \\(x + \\dfrac{yz^p}{2}x\\) The correct answer is (d). But how do we know this? One can always very explicitly define the order of operations by using parentheses. But we can better understand how and when to use parentheses by learning the precedence and associativity rules applied to Excel formulas. The following table indicates the order in which the operators are evaluated when a formular is parsed. Order Operator Description 1 ^ Power (exponent) 2 * / Multiplication and division 3 + - Addition and subtraction Within levels 2 and 3, operations are carried out from left to right. So, let's reexamine our formula from above: =x+y*z^p/2*x The first step would be to evaluate the power operator (^): =x+y*(z^p)/2*x Next, the multiplication (*) and division (/) operators would be evaluated from left to right. =x+(y*(z^p))/2*x =x+((y*(z^p))/2)*x =x+(((y*(z^p))/2)*x) Finally, the addition (+) operator would be evaluated last. =x+(((y*(z^p))/2)*x) Of course, these parentheses are not all required. Once we understand the precedence rules, we can begin to build concise, but correct formulas. For example, this is how you would write a formula for each of the equations shown above: a. =x+y z^(p/(2 x)) b. =(x+y z^p)/(2 x) c. =x+(y z^p)/(2 x) d. =x+y z^p/2 x The worksheet associated with the exercises shown above can be downloaded here: quadequation.xlsm Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use the order of operations to calculate the fluid headloss in a pipe. Easy headloss.xlsm headloss_key.xlsm Calculate the equations using formulas and taking into consideration the appropriate order of operations. Medium operators.xlsm operators_key.xlsm Use the correct order of operations to calculate the friction factor. Hard friction_factor.xlsm friction_factor_key.xlsm Description Difficulty Start Solution Headloss - Use the order of operations to calculate the fluid headloss in a pipe. Easy headloss.xlsm headloss_key.xlsm Operators - Calculate the equations using formulas and taking into consideration the appropriate order of operations. Medium operators.xlsm operators_key.xlsm Friction Factor - Use the correct order of operations to calculate the friction factor. Hard friction_factor.xlsm friction_factor_key.xlsm","title":"Operators"},{"location":"01_excel/05_operators/operators/#operators-and-precedence","text":"When developing engineering applications with Excel, we often take complex equations and convert them to Excel formulas. In so doing, it is easy to compose the formula in such a way that leads to incorrect results. For example, consider the following spreadsheet: The objective of the spreadsheet is to solve for the roots of a quadratic equation of the form: \\(ax^2 + bx + c = 0\\) using the two equations shown above. Let's focus on the euqation for root 1 which would be entered in cell D5. How should one go about transforming the native equation into a formula that is properly interpreted by Excel? Consider the following potential solution: =-B5+B5^2-4*A5*C5^0.5/2*A5 This results in a solution of: The most obvious error is that we need to put parentheses around the discriminant (b2 - 4ac) part before taking the square root ( we are taking the square root by raising to a power of 0.5). Otherwise we are only taking the square root of c only. After making this correction: =-B5+(B5^2-4*A5*C5)^0.5/2*A5 which gives us an answer of 6.58, which is still wrong. The correct answer is 1.65. In order to get the correct answer, we need to put parentheses around both the numerator and denominator as follows: =(-B5+(B5^2-4*A5*C5)^0.5)/(2*A5) After doing so, we finally get the correct set of answers: So how do we determine when and where to use parentheses? Are they always required? Here is another example. Take the following formula that uses cell names: =x+y*z^p/2*x Which of the following corresponds to the equation defined by this formula? a. \\(x + yz^\\left({\\dfrac{p}{2x}}\\right)\\) b. \\(\\dfrac{x + yz^p}{2x}\\) c. \\(x + \\dfrac{yz^p}{2x}\\) d. \\(x + \\dfrac{yz^p}{2}x\\) The correct answer is (d). But how do we know this? One can always very explicitly define the order of operations by using parentheses. But we can better understand how and when to use parentheses by learning the precedence and associativity rules applied to Excel formulas. The following table indicates the order in which the operators are evaluated when a formular is parsed. Order Operator Description 1 ^ Power (exponent) 2 * / Multiplication and division 3 + - Addition and subtraction Within levels 2 and 3, operations are carried out from left to right. So, let's reexamine our formula from above: =x+y*z^p/2*x The first step would be to evaluate the power operator (^): =x+y*(z^p)/2*x Next, the multiplication (*) and division (/) operators would be evaluated from left to right. =x+(y*(z^p))/2*x =x+((y*(z^p))/2)*x =x+(((y*(z^p))/2)*x) Finally, the addition (+) operator would be evaluated last. =x+(((y*(z^p))/2)*x) Of course, these parentheses are not all required. Once we understand the precedence rules, we can begin to build concise, but correct formulas. For example, this is how you would write a formula for each of the equations shown above: a. =x+y z^(p/(2 x)) b. =(x+y z^p)/(2 x) c. =x+(y z^p)/(2 x) d. =x+y z^p/2 x The worksheet associated with the exercises shown above can be downloaded here: quadequation.xlsm","title":"Operators and Precedence"},{"location":"01_excel/05_operators/operators/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use the order of operations to calculate the fluid headloss in a pipe. Easy headloss.xlsm headloss_key.xlsm Calculate the equations using formulas and taking into consideration the appropriate order of operations. Medium operators.xlsm operators_key.xlsm Use the correct order of operations to calculate the friction factor. Hard friction_factor.xlsm friction_factor_key.xlsm Description Difficulty Start Solution Headloss - Use the order of operations to calculate the fluid headloss in a pipe. Easy headloss.xlsm headloss_key.xlsm Operators - Calculate the equations using formulas and taking into consideration the appropriate order of operations. Medium operators.xlsm operators_key.xlsm Friction Factor - Use the correct order of operations to calculate the friction factor. Hard friction_factor.xlsm friction_factor_key.xlsm","title":"Exercises"},{"location":"01_excel/06_iffunction/iffunction/","text":"Using the IF Function There are many instances when using Excel where we need to write a formula that produces one of two different results, depending on some condition. For example, consider the following version of our cylinder analysis worksheet: Suppose we wish to add a \"Class\" item in column F indicating whether the cylinders are standard or overweight. This can be done by entering the following formula in cell F7 and copying it down to the end of the table: =IF(E7<35000, \"Standard\", \"Overweight\") Resulting in the following: Syntax The syntax of the IF function is as follows: = IF(logical_test, value_if_true, value_if_false) The logical_test argument needs to be a conditional expression that returns a TRUE or FALSE value. Conditional expression are typically formed with one of the following operators: Operator Example Description = A4=0 Equal <> A4<>B5 Not equal to > D7>3 Greater than >= D4>=0 Greater than or equal to < G3<(G4-7) Less than <= 0<=F12 Less than or equal to AND AND(0<=B5, B5<=5) True if both statements are true. OR OR(A4=0, B5=0) True if either or both statements are true. NOT NOT(A4=0) True if the statement is false. If the conditional expression evaluates to true, the value_if_true argument is used. Otherwise, the value_if_false argument is used. These arguments can any type of expression, including constants, cells references, or formulas. Here are some additional example formulas that use the IF function: =IF(A4<>0, 1/A4, \"Error - Divide by Zero!\") =IF(B4<=$D$2, -2.3*G4/4, -3.9*G4/4+6) =IF(units=\"Metric\", \"[m/sec], \"[ft/sec]\") Compound Conditions Sometimes we need to utilize compound conditional expressions with the IF function. But we need to be very careful when doing so. For example, suppose we want to represent the following mathematical expression: \\(0 \u2264 x \u2264 5\\) in an Excel formula and \"x\" is stored in cell B5. It would be tempting to use the following conditional expression: 0<=B5<=5 for the first argument in the IF function. However, this creates a useless and incorrect expression that will always return TRUE, regardless of the contents of cell B5. This is because a compound expression like this is evaluated one operator at a time from left to right. In other words, the first part of the expression: 0<=B5<=5 will be evaluated first. The result of this evaluation will be True or False, depending on whether or not B5 is greater than or equal to zero. This result is then compared against the rest of the expression. In computational terms, True and False evaluate to 1 or 0, respectively. Thus, if B5 is greater than or equal to zero, the expression simplifies to: 1<=5 otherwise (B5>0), it simplifies to: 0<=5 Both of these statements will then evaluate to True, regardless of the value of B5. In other words, the original expresssion is equivalent to: (0<=B5)<=5 which is fundamentally different from the mathematical expression we are trying to emulate. To solve this problem correctly, we need to use the AND function as follows: AND(0<=B5, B5<=5) This function returns True if both statements are true. Otherwise it returns False. Likewise, there is an OR function that returns True if either or both of the two expressions evaluate to True. Nested IF Functions It is possible to nest multiple instances of the IF function. For example: =IF(A4>=18,\"Adult\",IF(A4>12,\"Teen\",\"Child\")) The second IF function is only evaluated in the first condition is False. There are three possible outcomes in this case: \"Adult\", \"Teen\", and \"Child\". Sample Workbook The workbook used in the first example shown above can be downloaded here: cylinders3.xlsx Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Calculate the Reynolds' or Froude's number by inputing an IF equation into the appropriate cell. Easy reynolds_and_froude.xlsx reynolds_and_froude_key.xlsx.xlsm Use an IF equation to determine the varying prices of different concrete projects. Medium concrete_price_estimator.xlsx concrete_price_estimator_key.xlsx Determine which types and how many vehicles you can park along side a given curb. Medium parking.xlsx parking_key.xlsx Use IF statements and user inputs/selections to determine how many years that the user has left to finish school. Hard years_left_of_school.xlsx years_left_of_school_key.xlsx","title":"IF Function"},{"location":"01_excel/06_iffunction/iffunction/#using-the-if-function","text":"There are many instances when using Excel where we need to write a formula that produces one of two different results, depending on some condition. For example, consider the following version of our cylinder analysis worksheet: Suppose we wish to add a \"Class\" item in column F indicating whether the cylinders are standard or overweight. This can be done by entering the following formula in cell F7 and copying it down to the end of the table: =IF(E7<35000, \"Standard\", \"Overweight\") Resulting in the following:","title":"Using the IF Function"},{"location":"01_excel/06_iffunction/iffunction/#syntax","text":"The syntax of the IF function is as follows: = IF(logical_test, value_if_true, value_if_false) The logical_test argument needs to be a conditional expression that returns a TRUE or FALSE value. Conditional expression are typically formed with one of the following operators: Operator Example Description = A4=0 Equal <> A4<>B5 Not equal to > D7>3 Greater than >= D4>=0 Greater than or equal to < G3<(G4-7) Less than <= 0<=F12 Less than or equal to AND AND(0<=B5, B5<=5) True if both statements are true. OR OR(A4=0, B5=0) True if either or both statements are true. NOT NOT(A4=0) True if the statement is false. If the conditional expression evaluates to true, the value_if_true argument is used. Otherwise, the value_if_false argument is used. These arguments can any type of expression, including constants, cells references, or formulas. Here are some additional example formulas that use the IF function: =IF(A4<>0, 1/A4, \"Error - Divide by Zero!\") =IF(B4<=$D$2, -2.3*G4/4, -3.9*G4/4+6) =IF(units=\"Metric\", \"[m/sec], \"[ft/sec]\")","title":"Syntax"},{"location":"01_excel/06_iffunction/iffunction/#compound-conditions","text":"Sometimes we need to utilize compound conditional expressions with the IF function. But we need to be very careful when doing so. For example, suppose we want to represent the following mathematical expression: \\(0 \u2264 x \u2264 5\\) in an Excel formula and \"x\" is stored in cell B5. It would be tempting to use the following conditional expression: 0<=B5<=5 for the first argument in the IF function. However, this creates a useless and incorrect expression that will always return TRUE, regardless of the contents of cell B5. This is because a compound expression like this is evaluated one operator at a time from left to right. In other words, the first part of the expression: 0<=B5<=5 will be evaluated first. The result of this evaluation will be True or False, depending on whether or not B5 is greater than or equal to zero. This result is then compared against the rest of the expression. In computational terms, True and False evaluate to 1 or 0, respectively. Thus, if B5 is greater than or equal to zero, the expression simplifies to: 1<=5 otherwise (B5>0), it simplifies to: 0<=5 Both of these statements will then evaluate to True, regardless of the value of B5. In other words, the original expresssion is equivalent to: (0<=B5)<=5 which is fundamentally different from the mathematical expression we are trying to emulate. To solve this problem correctly, we need to use the AND function as follows: AND(0<=B5, B5<=5) This function returns True if both statements are true. Otherwise it returns False. Likewise, there is an OR function that returns True if either or both of the two expressions evaluate to True.","title":"Compound Conditions"},{"location":"01_excel/06_iffunction/iffunction/#nested-if-functions","text":"It is possible to nest multiple instances of the IF function. For example: =IF(A4>=18,\"Adult\",IF(A4>12,\"Teen\",\"Child\")) The second IF function is only evaluated in the first condition is False. There are three possible outcomes in this case: \"Adult\", \"Teen\", and \"Child\".","title":"Nested IF Functions"},{"location":"01_excel/06_iffunction/iffunction/#sample-workbook","text":"The workbook used in the first example shown above can be downloaded here: cylinders3.xlsx","title":"Sample Workbook"},{"location":"01_excel/06_iffunction/iffunction/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Calculate the Reynolds' or Froude's number by inputing an IF equation into the appropriate cell. Easy reynolds_and_froude.xlsx reynolds_and_froude_key.xlsx.xlsm Use an IF equation to determine the varying prices of different concrete projects. Medium concrete_price_estimator.xlsx concrete_price_estimator_key.xlsx Determine which types and how many vehicles you can park along side a given curb. Medium parking.xlsx parking_key.xlsx Use IF statements and user inputs/selections to determine how many years that the user has left to finish school. Hard years_left_of_school.xlsx years_left_of_school_key.xlsx","title":"Exercises"},{"location":"01_excel/07_goalseek/goalseek/","text":"Using the Goal Seek and Solver Tools There are many cases when performing computations in Excel where we need to solve an equation that is either difficult or impossible to solve directly. Therefore, we need to solve it using some sort of iterative process. The Goal Seek and Solver tools are perfectly suited for these cases. For example, consider the following workbook: The workbook is designed to solve a quadratic equation of the form: \\(y = ax^2 + bx + c\\) The user enters the coefficients a, b, & c in cells C4:C6. For the case shown above, we are solving: \\(y = x^2 - 3x + 1\\) The chart at the bottom is used to graph the parabola corresponding to the equation over a specified range. The solution to the equation is the two points where the parabola intercepts the y axis. These are called the \"roots\" and represent the solution to: \\(ax^2 + bx + c = 0\\) As can be seen on the chart, the roots are approximately 0.4 and 2.6. We can find the roots using cells F4 and F5. We enter a value for x in cell F4. The corresponding value of y is computed in cell F5 as: =C4*F4^2+C5*F4+C6 To find a root, we can enter a guess (0.4 for starters) into F4 and iteratively tweak that number until the value computed for y in F5 is roughly equal to zero. While this works, it can be time consuming and tedious. Goal Seek A more efficient way to solve for the roots is to let Excel perform the iterative calculations using the Goal Seek tool. This tool is located in the Data ribbon under the What-If Analysis menu. It has three inputs. For the case shown above, the inputs should be like this: This tells the Goal Seek tool to repeatedly change cell F4 (x) until the value in cell F5 (y) is equal to zero. After clicking the OK button, the following message appears: Note that the solution is not always found exactly due to roundoff error. After running the tool, the following values are displayed: To find other root, we need to repeat the process, but we must first enter a value for x that is close to the second root. If we enter an x value of 2.5 and repeat the process, we can quickly find the other root: Solver There is another tool in Excel for performing iterative calculations called the Solver that is even more powerful. The Solver is an Add-In so before using it, there are a few steps we need to take. Select the File|Open command, and then select Options . Click Add-Ins , and then in the Manage box, select Excel Add-ins . Click Go . In the Add-Ins available box, select the Solver Add-in check box, and then click OK . If Solver Add-in is not listed in the Add-Ins available box, click Browse to locate the add-in If you get prompted that the Solver Add-in is not currently installed on your computer, click Yes to install it. After you load the Solver Add-in, the Solver command is available in the Analysis group on the Data tab. These steps only need to be completed once. After launching the Solver, the following window appears: In general, the Solver is like Goal Seek in that it iteratively changes one (or more) input cell(s) until some condition is met. But in this case there are three possible conditions (max, min, value of) and a set of constraints can be defined. When we use the Value Of option, it is essentially the same as Goal Seek. Using the options shown above, we can solve for one of the roots of the parabola by clicking the Solve button. Doing so brings up the following message: Generally you want to select the OK option to keep the solver solution. The solution found by the solver is: which is the same as above (the starting value was near the second root), but a little more accurate. The real power of the solver is to perform optimization using the Max and Min options. This is something that cannot be done with Goal Seek. For example, suppose we wanted to find the x location corresponding the lowest point on the parabola. We could simply enter a guess for the x value and run the Solver with the following options: This results in the following solution: Which is precisely the correct result. While not applicable in this case, we can enter a series of constraints such as \"B4>=0\". As the Solver iterates, a variety of input values are tested. Such constraints can ensure that the Solver algorithm stays stable and will be more likely to converge on a solution. Sample Workbook The workbook used in the examples shown above can be downloaded here: parabola.xlsx $$ Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use goalseek on a parabolic function to find where the fish strikes the fly. Easy going_fishing.xlsm going_fishing_key.xlsm Use goalseek to find the zeros of a polynomial function. Medium polynomials.xlsm polynomials_key.xlsm Use goalseek and solver to identify key points on a topographic map. Medium topo_solver.xlsm topo_solver_key.xlsm A asteroid is headed for earth. You need to determine if the rajectory of a \"asteroid-stopping\" defense missile will clear the nearby buildings and destroy the asteroid before it impacts with earth. Hard missile_trajectory.xlsm missile_trajectory_key.xlsm","title":"Goal Seek"},{"location":"01_excel/07_goalseek/goalseek/#using-the-goal-seek-and-solver-tools","text":"There are many cases when performing computations in Excel where we need to solve an equation that is either difficult or impossible to solve directly. Therefore, we need to solve it using some sort of iterative process. The Goal Seek and Solver tools are perfectly suited for these cases. For example, consider the following workbook: The workbook is designed to solve a quadratic equation of the form: \\(y = ax^2 + bx + c\\) The user enters the coefficients a, b, & c in cells C4:C6. For the case shown above, we are solving: \\(y = x^2 - 3x + 1\\) The chart at the bottom is used to graph the parabola corresponding to the equation over a specified range. The solution to the equation is the two points where the parabola intercepts the y axis. These are called the \"roots\" and represent the solution to: \\(ax^2 + bx + c = 0\\) As can be seen on the chart, the roots are approximately 0.4 and 2.6. We can find the roots using cells F4 and F5. We enter a value for x in cell F4. The corresponding value of y is computed in cell F5 as: =C4*F4^2+C5*F4+C6 To find a root, we can enter a guess (0.4 for starters) into F4 and iteratively tweak that number until the value computed for y in F5 is roughly equal to zero. While this works, it can be time consuming and tedious.","title":"Using the Goal Seek and Solver Tools"},{"location":"01_excel/07_goalseek/goalseek/#goal-seek","text":"A more efficient way to solve for the roots is to let Excel perform the iterative calculations using the Goal Seek tool. This tool is located in the Data ribbon under the What-If Analysis menu. It has three inputs. For the case shown above, the inputs should be like this: This tells the Goal Seek tool to repeatedly change cell F4 (x) until the value in cell F5 (y) is equal to zero. After clicking the OK button, the following message appears: Note that the solution is not always found exactly due to roundoff error. After running the tool, the following values are displayed: To find other root, we need to repeat the process, but we must first enter a value for x that is close to the second root. If we enter an x value of 2.5 and repeat the process, we can quickly find the other root:","title":"Goal Seek"},{"location":"01_excel/07_goalseek/goalseek/#solver","text":"There is another tool in Excel for performing iterative calculations called the Solver that is even more powerful. The Solver is an Add-In so before using it, there are a few steps we need to take. Select the File|Open command, and then select Options . Click Add-Ins , and then in the Manage box, select Excel Add-ins . Click Go . In the Add-Ins available box, select the Solver Add-in check box, and then click OK . If Solver Add-in is not listed in the Add-Ins available box, click Browse to locate the add-in If you get prompted that the Solver Add-in is not currently installed on your computer, click Yes to install it. After you load the Solver Add-in, the Solver command is available in the Analysis group on the Data tab. These steps only need to be completed once. After launching the Solver, the following window appears: In general, the Solver is like Goal Seek in that it iteratively changes one (or more) input cell(s) until some condition is met. But in this case there are three possible conditions (max, min, value of) and a set of constraints can be defined. When we use the Value Of option, it is essentially the same as Goal Seek. Using the options shown above, we can solve for one of the roots of the parabola by clicking the Solve button. Doing so brings up the following message: Generally you want to select the OK option to keep the solver solution. The solution found by the solver is: which is the same as above (the starting value was near the second root), but a little more accurate. The real power of the solver is to perform optimization using the Max and Min options. This is something that cannot be done with Goal Seek. For example, suppose we wanted to find the x location corresponding the lowest point on the parabola. We could simply enter a guess for the x value and run the Solver with the following options: This results in the following solution: Which is precisely the correct result. While not applicable in this case, we can enter a series of constraints such as \"B4>=0\". As the Solver iterates, a variety of input values are tested. Such constraints can ensure that the Solver algorithm stays stable and will be more likely to converge on a solution.","title":"Solver"},{"location":"01_excel/07_goalseek/goalseek/#sample-workbook","text":"The workbook used in the examples shown above can be downloaded here: parabola.xlsx $$ Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Use goalseek on a parabolic function to find where the fish strikes the fly. Easy going_fishing.xlsm going_fishing_key.xlsm Use goalseek to find the zeros of a polynomial function. Medium polynomials.xlsm polynomials_key.xlsm Use goalseek and solver to identify key points on a topographic map. Medium topo_solver.xlsm topo_solver_key.xlsm A asteroid is headed for earth. You need to determine if the rajectory of a \"asteroid-stopping\" defense missile will clear the nearby buildings and destroy the asteroid before it impacts with earth. Hard missile_trajectory.xlsm missile_trajectory_key.xlsm","title":"Sample Workbook"},{"location":"01_excel/08_charts/charts/","text":"Creating Charts One of the most fundamental features of Excel is the Charts tool. Charts are used to generate a graphical representation of a set of data. Charts can be incredibly powerful in illustrating trends and characteristics of a data set. In this chapter, we will cover a brief overview of the chart tools with a special emphasis on the types of charts most commonly used in engineering and scientific applications. It is not intended to be an comprehensive overiew of all of the chart options. Such an overview would be beyond the scope of this Primer. Chart Types The first step in creating a chart is selecting the type of chart to use. This will depend primarily on the type of data that you wish to graph with the chart. The following table lists the more commonly-used charts and the suggested applications: Type Name Description Column Use this chart to visually compare values across a few categories. Bar Use this chart to visually compare values across a few categories when the chart shows duration or the category text is long. Line Use this chart to show trends over time (years, months, and days) or categories. Area Use this chart to show trends over time (years, months, and days) or categories. Use it to hightlight the magnitude of change over time. Pie Use this chart to show proportions of a whole. Use it when the total of your numbers is 100%. Scatter (X,Y) Use this chart type to show the relationship between sets of values. For scientific and engineering applications, the most common type of chart is the Scatter (X,Y) chart, which is sometimes called an XY Scatter chart. As the \"XY\" part of the name implies, this chart is used to represent one set of data (Y) which is dependent upon, or related to another set of data (X), both of which are numeric values. In other words: \\(y = f(x)\\) or y is some function of x. This can be an explicit numerical function ( \\(y = x^2-3x+1\\) ) or it could be an implicit relationship, such as measured strength of some specimens as a function of applied load. Creating a Chart The steps to creating a new chart are as follows: Select the data in the sheet that will be associated with the chart. Select the Insert tab. In the Charts section, click on one of the chart type icons and then select the specific type of chart you wish to create. To illustrate the process, consider the following example worksheet. This is a variation of the parabola worksheet described in the Goal Seek and Solver chapter. Our objective is to create an XY Scatter chart of the XY values shown in the tables. These values represent a solution of the equation: \\(y = x^2 - 3x + 1\\) for a the range of x values varying from -1 to 4. To create the chart, we select the cells in the range B12:B22 and follow the steps outlined above as follows: Note that the chart type selected was Scatter with Smoth Lines . The \"Smooth Lines\" part means that a smooth curve is fit the to XY points that interpolates the points and provides a natural curvature between the points using some type of spline function. This is typically the best option to select. By contrast, this is what the \"Straight Lines\" option looks like: Markers can also be combined with the smooth or straight lines. A marker is a dot at the location of each XY coordinate pair. Here is the Markers with Smooth Lines option: And the Markers Only option: As a matter of style, markers should only be used when there is a some kind of significance to each of the XY pairs. For example, perhaps the XY pairs represent data collected in the field or lab and each point corresponds to a sample or measurement. In many cases, however, the XY values represent some underlying fuction (such as the case shown above) and the points are arbitrarily selected. In this case, markers should not be used as they simply detract from the display of the function. Formatting a Chart Once the chart is created, we can edit the chart options to modify the formatting. If you click on a chart, a set of three buttons will appear just to the right of the chart. The \"+\" button can be used to add or remove chart elements such as axis labels, the chart title, and a legend. After editing the chart title and axis labels, the chart looks like this: Note that the range on the x- and y-axes are automatically determined. Suppose for this case that we wish to limit the range of the x-axis to vary from -1 to 4. To do this we double-click on the x-axis or right-click on the axis and select Format Axis. This brings up the Format Axis options on the right side: To remove the \"Auto\" option for the max and min bounds, we simply type in new values and hit the Enter key. After doing so, the Axis Options display as follows: Clicking the Reset button would revert back to the automatic setting. After manually editing the x-axis bounds, the chart looks like this: Changing the Data Source In some cases, after creating the chart we wish to change the set of cells associated with the chart (i.e., the \"data source\"). For example, perhaps we have deleted some of our XY pairs or we have extended the table to add additional pairs. When we do so, the chart is not automatically updated to reflect the change; we must manually make the correction. To change the data source, you can do the following: Click on the curve in the chart to select it. This will display the range of cells associated with the chart. Using the handles at the corners of the highlighted ranges, drag the corners to resize the selection to the desired range. Another option for changing the source is: Right-click on the curve and select the Select Data option. This brings up the Select Data Source dialog. Edit the Chart data range field to correspond to the desired range. Sample Workbook The workbook used in the examples shown above can be downloaded here: parabola2.xlsx Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Create a chart of the excess pore pressure vs distance from given test data. Easy excess_pore_pressure.xlsx excess_pore_pressure_key.xlsx Create a chart of the prices for different engineering materials over a specified date range and identify a trend. Medium material_price_trends.xlsx material_price_trends_key.xlsx Plot the settlement vs distance of different points due to underground blasting. Analyze the crater formed. Hard crater_settlement.xlsx crater_settlement_key.xlsx","title":"Charts"},{"location":"01_excel/08_charts/charts/#creating-charts","text":"One of the most fundamental features of Excel is the Charts tool. Charts are used to generate a graphical representation of a set of data. Charts can be incredibly powerful in illustrating trends and characteristics of a data set. In this chapter, we will cover a brief overview of the chart tools with a special emphasis on the types of charts most commonly used in engineering and scientific applications. It is not intended to be an comprehensive overiew of all of the chart options. Such an overview would be beyond the scope of this Primer.","title":"Creating Charts"},{"location":"01_excel/08_charts/charts/#chart-types","text":"The first step in creating a chart is selecting the type of chart to use. This will depend primarily on the type of data that you wish to graph with the chart. The following table lists the more commonly-used charts and the suggested applications: Type Name Description Column Use this chart to visually compare values across a few categories. Bar Use this chart to visually compare values across a few categories when the chart shows duration or the category text is long. Line Use this chart to show trends over time (years, months, and days) or categories. Area Use this chart to show trends over time (years, months, and days) or categories. Use it to hightlight the magnitude of change over time. Pie Use this chart to show proportions of a whole. Use it when the total of your numbers is 100%. Scatter (X,Y) Use this chart type to show the relationship between sets of values. For scientific and engineering applications, the most common type of chart is the Scatter (X,Y) chart, which is sometimes called an XY Scatter chart. As the \"XY\" part of the name implies, this chart is used to represent one set of data (Y) which is dependent upon, or related to another set of data (X), both of which are numeric values. In other words: \\(y = f(x)\\) or y is some function of x. This can be an explicit numerical function ( \\(y = x^2-3x+1\\) ) or it could be an implicit relationship, such as measured strength of some specimens as a function of applied load.","title":"Chart Types"},{"location":"01_excel/08_charts/charts/#creating-a-chart","text":"The steps to creating a new chart are as follows: Select the data in the sheet that will be associated with the chart. Select the Insert tab. In the Charts section, click on one of the chart type icons and then select the specific type of chart you wish to create. To illustrate the process, consider the following example worksheet. This is a variation of the parabola worksheet described in the Goal Seek and Solver chapter. Our objective is to create an XY Scatter chart of the XY values shown in the tables. These values represent a solution of the equation: \\(y = x^2 - 3x + 1\\) for a the range of x values varying from -1 to 4. To create the chart, we select the cells in the range B12:B22 and follow the steps outlined above as follows: Note that the chart type selected was Scatter with Smoth Lines . The \"Smooth Lines\" part means that a smooth curve is fit the to XY points that interpolates the points and provides a natural curvature between the points using some type of spline function. This is typically the best option to select. By contrast, this is what the \"Straight Lines\" option looks like: Markers can also be combined with the smooth or straight lines. A marker is a dot at the location of each XY coordinate pair. Here is the Markers with Smooth Lines option: And the Markers Only option: As a matter of style, markers should only be used when there is a some kind of significance to each of the XY pairs. For example, perhaps the XY pairs represent data collected in the field or lab and each point corresponds to a sample or measurement. In many cases, however, the XY values represent some underlying fuction (such as the case shown above) and the points are arbitrarily selected. In this case, markers should not be used as they simply detract from the display of the function.","title":"Creating a Chart"},{"location":"01_excel/08_charts/charts/#formatting-a-chart","text":"Once the chart is created, we can edit the chart options to modify the formatting. If you click on a chart, a set of three buttons will appear just to the right of the chart. The \"+\" button can be used to add or remove chart elements such as axis labels, the chart title, and a legend. After editing the chart title and axis labels, the chart looks like this: Note that the range on the x- and y-axes are automatically determined. Suppose for this case that we wish to limit the range of the x-axis to vary from -1 to 4. To do this we double-click on the x-axis or right-click on the axis and select Format Axis. This brings up the Format Axis options on the right side: To remove the \"Auto\" option for the max and min bounds, we simply type in new values and hit the Enter key. After doing so, the Axis Options display as follows: Clicking the Reset button would revert back to the automatic setting. After manually editing the x-axis bounds, the chart looks like this:","title":"Formatting a Chart"},{"location":"01_excel/08_charts/charts/#changing-the-data-source","text":"In some cases, after creating the chart we wish to change the set of cells associated with the chart (i.e., the \"data source\"). For example, perhaps we have deleted some of our XY pairs or we have extended the table to add additional pairs. When we do so, the chart is not automatically updated to reflect the change; we must manually make the correction. To change the data source, you can do the following: Click on the curve in the chart to select it. This will display the range of cells associated with the chart. Using the handles at the corners of the highlighted ranges, drag the corners to resize the selection to the desired range. Another option for changing the source is: Right-click on the curve and select the Select Data option. This brings up the Select Data Source dialog. Edit the Chart data range field to correspond to the desired range.","title":"Changing the Data Source"},{"location":"01_excel/08_charts/charts/#sample-workbook","text":"The workbook used in the examples shown above can be downloaded here: parabola2.xlsx","title":"Sample Workbook"},{"location":"01_excel/08_charts/charts/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Create a chart of the excess pore pressure vs distance from given test data. Easy excess_pore_pressure.xlsx excess_pore_pressure_key.xlsx Create a chart of the prices for different engineering materials over a specified date range and identify a trend. Medium material_price_trends.xlsx material_price_trends_key.xlsx Plot the settlement vs distance of different points due to underground blasting. Analyze the crater formed. Hard crater_settlement.xlsx crater_settlement_key.xlsx","title":"Exercises"},{"location":"01_excel/09_annotation/annotation/","text":"Annotation - Drawings and Equations When developing worksheets as a tool for solving engineering problems that we frequently encounter in practice, it is helpful to make the worksheets as clear and easy to use as possible. One of the ways this can be accomplished is to add graphics to the worksheet illustrating the problem being solved. In some cases, showing the equations in native form is also helpful. For example, suppose we are just starting to develop a worksheet for solving the deflection of a simply-supported beam subjected to a point load. The equations associated with the problem are as follows: Before entering the formulas, it would be very helpful to future users of the workbook if we could add some annotation to the workbook including a diagram and set of equations similar to those shown above. In this chapter, we will use this example to review the basic tools provided in Excel for making simple drawings and for composing graphical equations. (Note: You may want to open the sample workbook at the bottom of this chapter and follow along.) Drawing Tools The drawing tools in Excel are the same set of tools utilized in other Microsoft Office products, including Word and Powerpoint. Drawings are created using a set of objects called shapes . You begin creating a drawing in Excel by inserting a shape. To insert a shape, click on the Insert tab, and then click on the Shapes menu in the Illustrations section. To create our drawing, we will first create the lines corresponding to the x and y axes. Since the have an arrow at the ends, we will use the line shape with an arrow on one end ( ). To create the x-axis, start on the left and click and drag to the right. If you hold the shift key down while dragging, the line will stay perfectly flat. After creating the line, you will shift into drawing mode and the drawing tools will be displayed: If you click anywhere on the worksheet so that no shapes are selected, the drawing tool ribbon will go away. To get it back, you can simply click on one of your shapes or insert another shape using the process described above. Now we need to create the y-axis. Reselect the line/arrow tool from the shape pallette on the left side of the drawing tools ribbon. Then start at the left side of the axis (the origin) and repeat the process dragging straight up, again holding down the shift key while dragging. At this point, the drawing should look like this: Next, we will create the deflected beam shape. The best way to do this is with the curve shape ( ). Select the curve shape. Curves are created by clicking on a set of pivot points defining the curve and then double-clicking at the end. To create the beam, we will click on three points: one on the left side of the beam to start, one at the middle of the beam, then we will double-click on the right side to end. Star creating your beam by clicking on the coordinate origin. Then click at the midpoint of the beam as follows: The double-click on the right side of the beam: Note that you have created a nice smooth curve based on these three points. If you want to fine-tune the shape of the curve, select the curve and then select the Edit Shape|Edit Points command from the Insert Shapes section of the Drawing Tools ribbon. At this point, the three points defining the curve will appear. If click on one of the points, a set of handles will appear: Repositioning the point in the center or dragging the handles will reshape the curve. Experimenting for a few minutes will give you a good sense of how this works. When you are done try to restore the curve to the shape shown above as best you can (or delete and recreate the curve). Next we will create the support points. In the drawing shown above, the supports are shown with a triangle and circle. To keep things simple we will use a triangle only. Select the triangle shape ( ) and drag a triangle at the left end of the beam. You may need to create the shape and the drag it into position. You may also need to use the handles at the corners of the shape to resize it. If you want to give the shape a professional look, you can apply one of the \"3D\" shape styles: At this point, the support should look like this: To create a support on the other end, we can either repeat the entire process, or we can create a duplicate of the shape by pressing Ctrl-D and reposition it to the right end as follows: Next we will create the shape representing the load. To do this we will use the block arrow tool corresponding to a down arrow ( ). Click and draw in a long vertical shape to create the load arrow. Apply one of the 3D styles and the reposition the arrow as follows: Now we are ready to apply the lines associated with the dimensioning. Using a combination of the line tools ( ) and the techniques described above, create the following lines: As you create the lines, you may want to simply duplicate the existing lines. Also, if you need to align some of the shapes, select multiple shapes using the shift key and then select the Align menu in the Arrange section of the Drawing Tools ribbon. The last step is to add the text labels to the drawing. We will start with the \"P\" by the load arrow. To add the label, select the text box shape ( ) and drag a box by the load arrow. Then type \"P\" and click on the box containing the label to reposition it if necessary. To get right of the line around the text box, select the label and then select the Shape Outline menu in the Shape Styles section of the ribbon and select No Outline . To change the font attributes (size, font, bold, alignment, etc.) you will need to click on the Home ribbon and use the tools in the Font section while the textbox shape is selected. To create the remaining labels, duplicate (Ctrl-D) the current label and then change the text. Reposition and re-format as needed. When you are finished, our drawing is complete! The Equation Editor Next we will use the Excel Equation Editor to create a graphical representation of the equations describing the deflection of a simply supported beam. To make things interesting, we will start with the second equation shown here: To insert a new equation, select a cell somewhere in the vicinity of where you would like to put the equation and then click on the Insert tab. Over on the far right end of the tab, you will see a Symbols section. Click on the Equation menu. If you click on the down arrow, the menu lists some frequently-used equations for cases where you want to start with something and then modify. But we need to start from scratch, so we need to click on top part of the Equation button. This inserts a new equation and opends up the Equation Tools ribbon. The ribbon is divided into two main sections: Symbols and Structures . The structures represent basic components of equations that define positional relationships. In general, you form an equation by inserting a structure and then filling in the elements of the structure by typing standard characters (x, y, p, t, etc.) or by selecting symbols. We will start our equation by typing \"v=\". Then we select the Fraction menu and select the first (upper left) option (\"stacked fraction\"). This creates an empty fraction with a placeholder for the numerator and the denominator: Click on the numerator box to and type \"-Pb\". Then click on the denominator box and type \"6E\". At this point, we need to enter \"Iu\" with the \"u\" part as a subscript. To do so, we click on the Script menu in the Structures section and select the second item on the top row. This creates a place holder for the main part and the subscript. Click on the main part and type \"I\" and then click on the subscript and type \"u\". (Note that you rather than clicking on the placeholders, you can use the arrow keys on your keyboard to navigate between the different placeholders.) At this point, the equation should look like this: At this point, we are finished with the fraction and need to enter the remainder of the equation. Before doing so, we need to move the cursor out of the denominator, otherwise whatever we type will be in the denominator. To do so, we simply hit the right-arrow key on the keyboard a couple of times until the cursor is to right of and even with the main part of the equation: Next we need to create a set of square brackets for the right side of the equation. We could simply type the \"[\" and \"]\" characters on the keyboard, but we need the brackets to automatically resize themselves based on the content in the brackets, so we need to use a structure. Click on the Brackets menu and select the square brackets option (second item in the top row). Click on the placeholder in the middle of the brackets and insert another fraction structure. Enter \"L\" for the numerator and \"b\" for the denominator. Then hit the right arrow key once to exit the denominator. Next, we need to enter (x-a)3. To do this, we will need two structures: a superscript and a bracket. First insert the superscript structure, then click on the main part of the superscript structure and enter a bracket \"()\" structure. Then enter \"x-a\" in the main part of the bracket structure and click on the superscript and type \"3\". Hit the right arrow key to exit the superscript and finish the rest of the equation using the procedures described above. When you are finished, the equation should look like this: After creating the equation, you can move it around to reposition it. To edit it, simply click on it and the Equation Tools ribbon will appear again. You can now continue and try creating the other equations shown above if you wish. Selecting Objects After creating a set of shapes and equations, it is sometimes necessary to select them as a group by dragging a box around them. For example, this is necessary if you wish to reposition all of them at once. If you just drag a box around the objects, they are not selected. To do this, you need to activate the \"Select Objects\" mode. This is accomplished by clicking on the Home tab and then selecting the Select Objects item in the Find and Select menu on the far right end of the ribbon. Grouping When dealing with large sets of shapes and equations as described in the previous section, it is sometimes helpful to organize the objects into groups. This allows you to select and move them as a single item. To group a set of objects, select them and then select the Group item in Arrange section in the Drawing Tools ribbon. Select the Group option from the menu. The ungroup command can be used to undo the process of grouping a set of objects. Display Order When working with shapes that are filled, sometimes one objects can obscure another. You can directly control the order in which the objects are displayed using the options in the Bring Forward and Send Backward menus in the Arrange section of the Drawing Tools ribbon. Sample Workbooks The workbook used in the examples shown above can be downloaded here: simplebeam.xlsx <-- Without annotation. Start here if you want to try creating the drawings and equations simplebeam-key.xlsx <-- With completed annotation. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Create an annotated figure of drag force on a baseball and compute the drag force that the ball experiences. Easy drag_equation.xlsx drag_equation_key.xlsx Create an annotated soil profile and write an equation to compute the unit weight of the two soil layers. Medium unit_weight.xlsx unit_weight_key.xlsx Annotate a figure of a pipe with the necessary equations to calculate headloss. Then calculate the headloss with the given values and equations. Hard headloss.xlsx headloss_key.xlsx","title":"Annotation"},{"location":"01_excel/09_annotation/annotation/#annotation-drawings-and-equations","text":"When developing worksheets as a tool for solving engineering problems that we frequently encounter in practice, it is helpful to make the worksheets as clear and easy to use as possible. One of the ways this can be accomplished is to add graphics to the worksheet illustrating the problem being solved. In some cases, showing the equations in native form is also helpful. For example, suppose we are just starting to develop a worksheet for solving the deflection of a simply-supported beam subjected to a point load. The equations associated with the problem are as follows: Before entering the formulas, it would be very helpful to future users of the workbook if we could add some annotation to the workbook including a diagram and set of equations similar to those shown above. In this chapter, we will use this example to review the basic tools provided in Excel for making simple drawings and for composing graphical equations. (Note: You may want to open the sample workbook at the bottom of this chapter and follow along.)","title":"Annotation - Drawings and Equations"},{"location":"01_excel/09_annotation/annotation/#drawing-tools","text":"The drawing tools in Excel are the same set of tools utilized in other Microsoft Office products, including Word and Powerpoint. Drawings are created using a set of objects called shapes . You begin creating a drawing in Excel by inserting a shape. To insert a shape, click on the Insert tab, and then click on the Shapes menu in the Illustrations section. To create our drawing, we will first create the lines corresponding to the x and y axes. Since the have an arrow at the ends, we will use the line shape with an arrow on one end ( ). To create the x-axis, start on the left and click and drag to the right. If you hold the shift key down while dragging, the line will stay perfectly flat. After creating the line, you will shift into drawing mode and the drawing tools will be displayed: If you click anywhere on the worksheet so that no shapes are selected, the drawing tool ribbon will go away. To get it back, you can simply click on one of your shapes or insert another shape using the process described above. Now we need to create the y-axis. Reselect the line/arrow tool from the shape pallette on the left side of the drawing tools ribbon. Then start at the left side of the axis (the origin) and repeat the process dragging straight up, again holding down the shift key while dragging. At this point, the drawing should look like this: Next, we will create the deflected beam shape. The best way to do this is with the curve shape ( ). Select the curve shape. Curves are created by clicking on a set of pivot points defining the curve and then double-clicking at the end. To create the beam, we will click on three points: one on the left side of the beam to start, one at the middle of the beam, then we will double-click on the right side to end. Star creating your beam by clicking on the coordinate origin. Then click at the midpoint of the beam as follows: The double-click on the right side of the beam: Note that you have created a nice smooth curve based on these three points. If you want to fine-tune the shape of the curve, select the curve and then select the Edit Shape|Edit Points command from the Insert Shapes section of the Drawing Tools ribbon. At this point, the three points defining the curve will appear. If click on one of the points, a set of handles will appear: Repositioning the point in the center or dragging the handles will reshape the curve. Experimenting for a few minutes will give you a good sense of how this works. When you are done try to restore the curve to the shape shown above as best you can (or delete and recreate the curve). Next we will create the support points. In the drawing shown above, the supports are shown with a triangle and circle. To keep things simple we will use a triangle only. Select the triangle shape ( ) and drag a triangle at the left end of the beam. You may need to create the shape and the drag it into position. You may also need to use the handles at the corners of the shape to resize it. If you want to give the shape a professional look, you can apply one of the \"3D\" shape styles: At this point, the support should look like this: To create a support on the other end, we can either repeat the entire process, or we can create a duplicate of the shape by pressing Ctrl-D and reposition it to the right end as follows: Next we will create the shape representing the load. To do this we will use the block arrow tool corresponding to a down arrow ( ). Click and draw in a long vertical shape to create the load arrow. Apply one of the 3D styles and the reposition the arrow as follows: Now we are ready to apply the lines associated with the dimensioning. Using a combination of the line tools ( ) and the techniques described above, create the following lines: As you create the lines, you may want to simply duplicate the existing lines. Also, if you need to align some of the shapes, select multiple shapes using the shift key and then select the Align menu in the Arrange section of the Drawing Tools ribbon. The last step is to add the text labels to the drawing. We will start with the \"P\" by the load arrow. To add the label, select the text box shape ( ) and drag a box by the load arrow. Then type \"P\" and click on the box containing the label to reposition it if necessary. To get right of the line around the text box, select the label and then select the Shape Outline menu in the Shape Styles section of the ribbon and select No Outline . To change the font attributes (size, font, bold, alignment, etc.) you will need to click on the Home ribbon and use the tools in the Font section while the textbox shape is selected. To create the remaining labels, duplicate (Ctrl-D) the current label and then change the text. Reposition and re-format as needed. When you are finished, our drawing is complete!","title":"Drawing Tools"},{"location":"01_excel/09_annotation/annotation/#the-equation-editor","text":"Next we will use the Excel Equation Editor to create a graphical representation of the equations describing the deflection of a simply supported beam. To make things interesting, we will start with the second equation shown here: To insert a new equation, select a cell somewhere in the vicinity of where you would like to put the equation and then click on the Insert tab. Over on the far right end of the tab, you will see a Symbols section. Click on the Equation menu. If you click on the down arrow, the menu lists some frequently-used equations for cases where you want to start with something and then modify. But we need to start from scratch, so we need to click on top part of the Equation button. This inserts a new equation and opends up the Equation Tools ribbon. The ribbon is divided into two main sections: Symbols and Structures . The structures represent basic components of equations that define positional relationships. In general, you form an equation by inserting a structure and then filling in the elements of the structure by typing standard characters (x, y, p, t, etc.) or by selecting symbols. We will start our equation by typing \"v=\". Then we select the Fraction menu and select the first (upper left) option (\"stacked fraction\"). This creates an empty fraction with a placeholder for the numerator and the denominator: Click on the numerator box to and type \"-Pb\". Then click on the denominator box and type \"6E\". At this point, we need to enter \"Iu\" with the \"u\" part as a subscript. To do so, we click on the Script menu in the Structures section and select the second item on the top row. This creates a place holder for the main part and the subscript. Click on the main part and type \"I\" and then click on the subscript and type \"u\". (Note that you rather than clicking on the placeholders, you can use the arrow keys on your keyboard to navigate between the different placeholders.) At this point, the equation should look like this: At this point, we are finished with the fraction and need to enter the remainder of the equation. Before doing so, we need to move the cursor out of the denominator, otherwise whatever we type will be in the denominator. To do so, we simply hit the right-arrow key on the keyboard a couple of times until the cursor is to right of and even with the main part of the equation: Next we need to create a set of square brackets for the right side of the equation. We could simply type the \"[\" and \"]\" characters on the keyboard, but we need the brackets to automatically resize themselves based on the content in the brackets, so we need to use a structure. Click on the Brackets menu and select the square brackets option (second item in the top row). Click on the placeholder in the middle of the brackets and insert another fraction structure. Enter \"L\" for the numerator and \"b\" for the denominator. Then hit the right arrow key once to exit the denominator. Next, we need to enter (x-a)3. To do this, we will need two structures: a superscript and a bracket. First insert the superscript structure, then click on the main part of the superscript structure and enter a bracket \"()\" structure. Then enter \"x-a\" in the main part of the bracket structure and click on the superscript and type \"3\". Hit the right arrow key to exit the superscript and finish the rest of the equation using the procedures described above. When you are finished, the equation should look like this: After creating the equation, you can move it around to reposition it. To edit it, simply click on it and the Equation Tools ribbon will appear again. You can now continue and try creating the other equations shown above if you wish.","title":"The Equation Editor"},{"location":"01_excel/09_annotation/annotation/#selecting-objects","text":"After creating a set of shapes and equations, it is sometimes necessary to select them as a group by dragging a box around them. For example, this is necessary if you wish to reposition all of them at once. If you just drag a box around the objects, they are not selected. To do this, you need to activate the \"Select Objects\" mode. This is accomplished by clicking on the Home tab and then selecting the Select Objects item in the Find and Select menu on the far right end of the ribbon.","title":"Selecting Objects"},{"location":"01_excel/09_annotation/annotation/#grouping","text":"When dealing with large sets of shapes and equations as described in the previous section, it is sometimes helpful to organize the objects into groups. This allows you to select and move them as a single item. To group a set of objects, select them and then select the Group item in Arrange section in the Drawing Tools ribbon. Select the Group option from the menu. The ungroup command can be used to undo the process of grouping a set of objects.","title":"Grouping"},{"location":"01_excel/09_annotation/annotation/#display-order","text":"When working with shapes that are filled, sometimes one objects can obscure another. You can directly control the order in which the objects are displayed using the options in the Bring Forward and Send Backward menus in the Arrange section of the Drawing Tools ribbon.","title":"Display Order"},{"location":"01_excel/09_annotation/annotation/#sample-workbooks","text":"The workbook used in the examples shown above can be downloaded here: simplebeam.xlsx <-- Without annotation. Start here if you want to try creating the drawings and equations simplebeam-key.xlsx <-- With completed annotation.","title":"Sample Workbooks"},{"location":"01_excel/09_annotation/annotation/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Create an annotated figure of drag force on a baseball and compute the drag force that the ball experiences. Easy drag_equation.xlsx drag_equation_key.xlsx Create an annotated soil profile and write an equation to compute the unit weight of the two soil layers. Medium unit_weight.xlsx unit_weight_key.xlsx Annotate a figure of a pipe with the necessary equations to calculate headloss. Then calculate the headloss with the given values and equations. Hard headloss.xlsx headloss_key.xlsx","title":"Exercises"},{"location":"01_excel/10_arrayform/arrayform/","text":"Array Formulas In Excel terminology, an array is a group of cells in a row (horizonal array), column (vertical array), or multiple rows and columns (2D array). In this chapter we discuss a special type of Excel formula called an \"array formula\" that operates on arrays. Array formulas can be a powerful tool for condensing a complex set of calculations in a simple, concise formula. To illustrate the power of array formulas, we will use the following workbook as an example: The workbook is designed to perform calculations associated with the sale of a set of products. Each column represents a sale. The product ID is in column A, the number units sold in the sale is in column B, and the wholesale and retail prices are in columns C and D. We will calculate the total sale amount in terms of wholesale and retail in columns E and F and then perform some summary computations in the section at the bottom. When dealing with array formulas, it is sometimes useful to use named ranges. This is not a requirement but it makes the formulas much easier to understand. For the purpose of this example, we will name the following set of ranges: Range Column Name B6:B17 Units units C6:C17 Price-Wholesale pw D6:D17 Price-Retail pr E6:E17 Totals-Wholesale tw F6:F17 Totals-Retail tr These names will be used in each of the formula examples shown below. Simple Array Calculations To begin, we will use an array formula to calculate the wholesale total in column E. Normally, we will do this by entering the following formula cell E6: =B6*C6 and then copying the formula to the rest of the cells in column E. To do this with an array formula, we first select the entire Total|Wholesale column (E6:E17) and then type the following in the formula bar: =units*pw and then rather than simply hitting the Enter key, we hit Ctrl-Shift-Enter . We must always use this key sequence when entering an array formula. Otherwise we get either an error message or the wrong answer, depending on what is selected. After entering the array formula, the entire column is populated as follows: Note the resulting format of the formula: {=units*pw} The curly braces indicate that is an array formula. If we wish to edit the formula, we can click on the formula bar and make changes, but we must always hit Ctrl-Shift-Enter when we are done. Note If you are using excel through a Microsoft 365 subscription, you may not need to hit Ctrl-Shift-Enter to create an array formula. However, it is good to know how to so that if you are ever on a different version of Excel that requires the Ctrl-Shift-Enter method, you will still be able to use array formulas. An array formula is similar to performing vector algebra. The formula essentially multiplies the units column by the wholesale price column. The result of multiplying these two vertical arrays is a vertical array of same dimension (12 items) where each item is equal to the number of units times the price for that particular entry (row in this case). The equation applies to the entire column in the Totals|Wholesale part of the table. One advantage of using an array formula in a case like this is that the resulting formula is simple and intuitive. Next, we will do the same thing for the Totals|Retail column. We will select the column and enter the following formula in the formula bar: =units*pr and finish with Ctrl-Shift-Enter . At this point, the table is complete: Using Arrays with Functions Now we will focus on the bottom section where we will perform some summary calculations based on our sales totals using functions. There are many Excel functions such as Sum() or Average() that take an array as input and return a single number as output. We will use these formulas in combination with array algebra to create some interesting results. First of all, we calculate the wholesale total by calculating the sum of the number of units times the wholesale price. We could do that by calculating the sum of the Totats|Wholesale column, but with an array formula, we can perform the calculation without using this column. This is one of the advantages of array formulas is that we do not need any intermediate columns in order to some calculations involving multi-cell ranges. We will enter the following array formula in cell D20 : =SUM(units*pw) and we get value of $4,865.00. Similarly, we can use the formula: =SUM(units*pr) to calculate the retail total (). Once again, after typing the formulas, we finish with Ctrl-Shift-Enter and the formulas are displayed with curly braces. {=SUM(units*pw)} {=SUM(units*pr)} Next we will calculate the total profit as the sum of the retail totals minus the sum of the wholesale totals in cell D22 using the following formula. =SUM(tr-tw) Note that we use the wholesale totals and retail totals columns in this calculation. But we could have performed the calculations directly from the units column and the prices columns as follows: =SUM(units*pr-units*pw) In cell D23, we will calculate the maximum markup (difference between retail and wholesale prices) as follows: =MAX(pr-pw) And the average markup as: =AVERAGE(pr-pw) The maximum profit (difference between retail and wholesale totals) can be computed as: =MAX(tr-tw) Finally, in cell D26 we wish to compute the total high-price profit. The high-price profit is defined as the profit on items were the retail price is greater than $50. In order to calculate this correctly we need to compute a sum of only those items where the prices greater than $50. In order to do this we need to combine both the IF() funciton and the SUM() function as follows: =SUM(IF(pr>50,tr-tw,0)) This example is a nice illustration of the power of array formulas. Doing this type of calculation within a normal formula would've been much more difficult than it was in this case. At this point, our sales summary is complete: Logical Functions One caveat associated with using array formulas in Excel is that you have to be very careful when using logical functions such as OR() and AND() . For some reason, they don't behave the way you would normally expect, and can lead to logical errors in your formula results. However, there is a way you can reformulate your array formulas to work around this limitation. This issue and the associated workarounds are explained in the following article: http://dailydoseofexcel.com/archives/2004/12/04/logical-operations-in-array-formulas/ The workarounds rely on the fact that the value of True is equal to the numerical value of 1 and a value of False is equal to the numerical value of 0. Sample Workbook The workbook used in the examples shown above can be downloaded here: arrayform.xlsx Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Conduct a simple financial analysis on a list of items using arrays. This worksheet will help explain/show the benefits of using arrays. Easy financial_arrays.xlsx financial_arrays_key.xlsx Calculate a range of expenses for buying a new car. Medium new_car_expense_calculator.xlsx new_car_expense_calculator_key.xlsx Use arrays to find different statistics of force from test data. Hard force_analysis.xlsx force_analysis_key.xlsx","title":"Array Formulas"},{"location":"01_excel/10_arrayform/arrayform/#array-formulas","text":"In Excel terminology, an array is a group of cells in a row (horizonal array), column (vertical array), or multiple rows and columns (2D array). In this chapter we discuss a special type of Excel formula called an \"array formula\" that operates on arrays. Array formulas can be a powerful tool for condensing a complex set of calculations in a simple, concise formula. To illustrate the power of array formulas, we will use the following workbook as an example: The workbook is designed to perform calculations associated with the sale of a set of products. Each column represents a sale. The product ID is in column A, the number units sold in the sale is in column B, and the wholesale and retail prices are in columns C and D. We will calculate the total sale amount in terms of wholesale and retail in columns E and F and then perform some summary computations in the section at the bottom. When dealing with array formulas, it is sometimes useful to use named ranges. This is not a requirement but it makes the formulas much easier to understand. For the purpose of this example, we will name the following set of ranges: Range Column Name B6:B17 Units units C6:C17 Price-Wholesale pw D6:D17 Price-Retail pr E6:E17 Totals-Wholesale tw F6:F17 Totals-Retail tr These names will be used in each of the formula examples shown below.","title":"Array Formulas"},{"location":"01_excel/10_arrayform/arrayform/#simple-array-calculations","text":"To begin, we will use an array formula to calculate the wholesale total in column E. Normally, we will do this by entering the following formula cell E6: =B6*C6 and then copying the formula to the rest of the cells in column E. To do this with an array formula, we first select the entire Total|Wholesale column (E6:E17) and then type the following in the formula bar: =units*pw and then rather than simply hitting the Enter key, we hit Ctrl-Shift-Enter . We must always use this key sequence when entering an array formula. Otherwise we get either an error message or the wrong answer, depending on what is selected. After entering the array formula, the entire column is populated as follows: Note the resulting format of the formula: {=units*pw} The curly braces indicate that is an array formula. If we wish to edit the formula, we can click on the formula bar and make changes, but we must always hit Ctrl-Shift-Enter when we are done. Note If you are using excel through a Microsoft 365 subscription, you may not need to hit Ctrl-Shift-Enter to create an array formula. However, it is good to know how to so that if you are ever on a different version of Excel that requires the Ctrl-Shift-Enter method, you will still be able to use array formulas. An array formula is similar to performing vector algebra. The formula essentially multiplies the units column by the wholesale price column. The result of multiplying these two vertical arrays is a vertical array of same dimension (12 items) where each item is equal to the number of units times the price for that particular entry (row in this case). The equation applies to the entire column in the Totals|Wholesale part of the table. One advantage of using an array formula in a case like this is that the resulting formula is simple and intuitive. Next, we will do the same thing for the Totals|Retail column. We will select the column and enter the following formula in the formula bar: =units*pr and finish with Ctrl-Shift-Enter . At this point, the table is complete:","title":"Simple Array Calculations"},{"location":"01_excel/10_arrayform/arrayform/#using-arrays-with-functions","text":"Now we will focus on the bottom section where we will perform some summary calculations based on our sales totals using functions. There are many Excel functions such as Sum() or Average() that take an array as input and return a single number as output. We will use these formulas in combination with array algebra to create some interesting results. First of all, we calculate the wholesale total by calculating the sum of the number of units times the wholesale price. We could do that by calculating the sum of the Totats|Wholesale column, but with an array formula, we can perform the calculation without using this column. This is one of the advantages of array formulas is that we do not need any intermediate columns in order to some calculations involving multi-cell ranges. We will enter the following array formula in cell D20 : =SUM(units*pw) and we get value of $4,865.00. Similarly, we can use the formula: =SUM(units*pr) to calculate the retail total (). Once again, after typing the formulas, we finish with Ctrl-Shift-Enter and the formulas are displayed with curly braces. {=SUM(units*pw)} {=SUM(units*pr)} Next we will calculate the total profit as the sum of the retail totals minus the sum of the wholesale totals in cell D22 using the following formula. =SUM(tr-tw) Note that we use the wholesale totals and retail totals columns in this calculation. But we could have performed the calculations directly from the units column and the prices columns as follows: =SUM(units*pr-units*pw) In cell D23, we will calculate the maximum markup (difference between retail and wholesale prices) as follows: =MAX(pr-pw) And the average markup as: =AVERAGE(pr-pw) The maximum profit (difference between retail and wholesale totals) can be computed as: =MAX(tr-tw) Finally, in cell D26 we wish to compute the total high-price profit. The high-price profit is defined as the profit on items were the retail price is greater than $50. In order to calculate this correctly we need to compute a sum of only those items where the prices greater than $50. In order to do this we need to combine both the IF() funciton and the SUM() function as follows: =SUM(IF(pr>50,tr-tw,0)) This example is a nice illustration of the power of array formulas. Doing this type of calculation within a normal formula would've been much more difficult than it was in this case. At this point, our sales summary is complete:","title":"Using Arrays with Functions"},{"location":"01_excel/10_arrayform/arrayform/#logical-functions","text":"One caveat associated with using array formulas in Excel is that you have to be very careful when using logical functions such as OR() and AND() . For some reason, they don't behave the way you would normally expect, and can lead to logical errors in your formula results. However, there is a way you can reformulate your array formulas to work around this limitation. This issue and the associated workarounds are explained in the following article: http://dailydoseofexcel.com/archives/2004/12/04/logical-operations-in-array-formulas/ The workarounds rely on the fact that the value of True is equal to the numerical value of 1 and a value of False is equal to the numerical value of 0.","title":"Logical Functions"},{"location":"01_excel/10_arrayform/arrayform/#sample-workbook","text":"The workbook used in the examples shown above can be downloaded here: arrayform.xlsx","title":"Sample Workbook"},{"location":"01_excel/10_arrayform/arrayform/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Conduct a simple financial analysis on a list of items using arrays. This worksheet will help explain/show the benefits of using arrays. Easy financial_arrays.xlsx financial_arrays_key.xlsx Calculate a range of expenses for buying a new car. Medium new_car_expense_calculator.xlsx new_car_expense_calculator_key.xlsx Use arrays to find different statistics of force from test data. Hard force_analysis.xlsx force_analysis_key.xlsx","title":"Exercises"},{"location":"02_vba/01_gettingstarted/gettingstarted/","text":"Getting Started - Using the Developer Interface and the VB Editor Visual Basic (VB) is a great programming language for beginning programmers. It has a simple structure and it provides a number of safeguards that prevent common programming errors. Another great feature of VB is that it can be used as a powerful scripting language for writing macros and extensions to Microsoft Office applications including Excel and Access. It can also be used to write scripts for use in AutoCAD. There is a special version of VB used in these applications called Visual Basic for Applications (VBA). Writing VBA code for Excel is easy and fun!! Once you learn a few basics, you will be creating highly professional spreadsheets. VBA allows you to design a spreadsheet that will do things that are impossible with the basic spreadsheet options. It also allows you to make your spreadsheets more user-friendly. The Developer Tab The first step in adding Visual Basic to your spreadsheet is to turn on the Developer tab. This is not a default part of the ribbon, so you may need to turn it on as follows: Select the File|Options menu command. Click on the Customize Ribbon button on the left. Turn on the Developer option shown in the Main Tabs section on the right. Click OK to exit. You should now see the Developer tab. This is where we interact with our VB code. The Code Group The Code group is used to record macros and to open the VB editor. The Visual Basic button opens the Visual Basic Editor window and the other tools are used to record and control macros. The Visual Basic Editor The VB Editor is where you edit the Visual Basic code. It is very similar to the regular Visual Basic compiler. The code is shown in a set of windows on the right. The Project window on the left lists the components of the project. The VBAProject folder lists each of the sheets in your spreadsheet and the workbook. The Modules folder lists the code associated with Macros. The Forms folder lists the custom user forms associated with the project. To edit the code associated with a sheet, module, or user form, you simply double-click on the object in the Project Explorer Window. The Controls Group The Controls group is used to add controls to a worksheet and to create/edit the VB code associated with the controls. The View Code button brings up the Visual Basic Editor window shown above. Security Settings Since VBA is such a flexible and powerful scripting environment, it also happens to be a popular method for writing viruses. For example, it is possible to write scripts that are automatically executed whenever a spreadsheet is opened. The script could theoretically attempt to do some damage to your computer (delete files, etc.) once it executes. To minimize the chance that a malicious script could cause damage, Microsoft turns on some default layers of security over VBA scripts. Before we can start writing VBA code, we need to adjust those settings. Go to the Developer tab. Click on Macro Security You will then be presented with the following options: Select the settings shown in the figure above and click OK. You should only need to do this once. These settings are associated with your installation of Excel and will be applied each time you open a spreadsheet from here on out.","title":"Getting Started"},{"location":"02_vba/01_gettingstarted/gettingstarted/#getting-started-using-the-developer-interface-and-the-vb-editor","text":"Visual Basic (VB) is a great programming language for beginning programmers. It has a simple structure and it provides a number of safeguards that prevent common programming errors. Another great feature of VB is that it can be used as a powerful scripting language for writing macros and extensions to Microsoft Office applications including Excel and Access. It can also be used to write scripts for use in AutoCAD. There is a special version of VB used in these applications called Visual Basic for Applications (VBA). Writing VBA code for Excel is easy and fun!! Once you learn a few basics, you will be creating highly professional spreadsheets. VBA allows you to design a spreadsheet that will do things that are impossible with the basic spreadsheet options. It also allows you to make your spreadsheets more user-friendly.","title":"Getting Started - Using the Developer Interface and the VB Editor"},{"location":"02_vba/01_gettingstarted/gettingstarted/#the-developer-tab","text":"The first step in adding Visual Basic to your spreadsheet is to turn on the Developer tab. This is not a default part of the ribbon, so you may need to turn it on as follows: Select the File|Options menu command. Click on the Customize Ribbon button on the left. Turn on the Developer option shown in the Main Tabs section on the right. Click OK to exit. You should now see the Developer tab. This is where we interact with our VB code.","title":"The Developer Tab"},{"location":"02_vba/01_gettingstarted/gettingstarted/#the-code-group","text":"The Code group is used to record macros and to open the VB editor. The Visual Basic button opens the Visual Basic Editor window and the other tools are used to record and control macros.","title":"The Code Group"},{"location":"02_vba/01_gettingstarted/gettingstarted/#the-visual-basic-editor","text":"The VB Editor is where you edit the Visual Basic code. It is very similar to the regular Visual Basic compiler. The code is shown in a set of windows on the right. The Project window on the left lists the components of the project. The VBAProject folder lists each of the sheets in your spreadsheet and the workbook. The Modules folder lists the code associated with Macros. The Forms folder lists the custom user forms associated with the project. To edit the code associated with a sheet, module, or user form, you simply double-click on the object in the Project Explorer Window.","title":"The Visual Basic Editor"},{"location":"02_vba/01_gettingstarted/gettingstarted/#the-controls-group","text":"The Controls group is used to add controls to a worksheet and to create/edit the VB code associated with the controls. The View Code button brings up the Visual Basic Editor window shown above.","title":"The Controls Group"},{"location":"02_vba/01_gettingstarted/gettingstarted/#security-settings","text":"Since VBA is such a flexible and powerful scripting environment, it also happens to be a popular method for writing viruses. For example, it is possible to write scripts that are automatically executed whenever a spreadsheet is opened. The script could theoretically attempt to do some damage to your computer (delete files, etc.) once it executes. To minimize the chance that a malicious script could cause damage, Microsoft turns on some default layers of security over VBA scripts. Before we can start writing VBA code, we need to adjust those settings. Go to the Developer tab. Click on Macro Security You will then be presented with the following options: Select the settings shown in the figure above and click OK. You should only need to do this once. These settings are associated with your installation of Excel and will be applied each time you open a spreadsheet from here on out.","title":"Security Settings"},{"location":"02_vba/02_macros/macros/","text":"Recording Macros A VB Macro is essentially a VB subroutine that executes a series of VB statements. To generate a macro, you must first turn on the Developer tab . Macros are then created and managed using the tools in the Code Group on the left side of the tab: You can automate a series of steps in Excel by recording a macro. As you record a macro, Excel converts each of your steps into lines of VB code that are part of a script that can be replayed at a latter point in time to automatically replicate the steps recorded into the script. The options are as follows: Button Description Click on this button to start recording your macro. You will then be prompted for the name of the macro. Once you start recording the macro, the button will change to Stop Recording. Click here when you are finished with the steps you wish to include in the macro. This is a toggle button. When it is turned on, the steps in the macro are recorded in a relative fashion. I.e., the cells affected by the macro will be based on the position of the cell(s) selected when the macro is executed. This can be used to make a macro that can be applied to any section of the spreadsheet. When using this option, be sure to select an appropriate part of the sheet prior to recording the macro. This option is used to establish the security settings for the VB code. VB macros can be used to write computer viruses. The security settings are used to minimize danger from such viruses. This button brings up a window listing all of the macros associated with a project. You can select a macro and click on the Run button to execute the macro. You can also delete macros. This tool displays the Visual Basic Editor . This is where you write the Visual Basic code. It also allows you to look at the code associated with your macros. The macros are stored in the Modules section of the Project Explorer. Macros are extremely useful when you are first learning how to write VBA code in Excel. If you want to do something in code such as change the background color of a cell, but you don't know to do it, simply run a macro, change the color manually, and then look at the macro. You can learn how to do just about anything simply by running macros. Recording a Macro To illustrate the macro recording process, open up a blank workbook, click on the Developer tab, and click on the Record Macro button. You will then be prompted for the name of the macro. Enter \"my_macro\". Note that you should not use spaces in your macro names. Select any cell other than cell B3. Then, do the following: Select cell B3 . Enter a value of 23.4 in cell B3 . Enter a value of 873.2 in cell B4 . Enter a formula in cell B5 to compute the sum of the previous two values (\"=Sum(B3:B4)\"). Click on the Home tab and select the range B3:B4 and click on the center align button in the Alignment section. Use to borders tool in the Font section to apply a solid border to the cells. At this point, you workbook should look like this: Go back to the Developer tab and click on the Stop Recording button. This completes the recording of the macro. Saving a Macro-Enabled Workbook Before looking at the source code recorded by our macro, we need to save the changes that we have made into the workbook thus far. Click on the File|Save As... command and pick a location to save your workbook. Note that the filename and filter will look something like this by default: Note that the default extension is \"*.xlsx\". If you click the Save button, you will get the following error message: If we save the file in this format, our macro code will be lost and it will not function the next time we open it. To save a workbook containing VB code, you must change the extension as follows: Running a Macro Next we will test the macro that we just recorded. Before running the macro, we need to delete our changes to the sheet, including the formatting. The easiest way to do this is to select the entire column B and then select the Delete Sheet Columns command in the Cells section on the right side of the ribbon in the Home tab. After the deletion, there should be nothing on the sheet. Select any cell on the sheet. To run the macro, go to the Developer tab and click on the Macros button. This will bring up a list of the macros (we only have one at this point). Sure our macro is highlighted and then click on the Run button. This should execute our macro and reproduce all of the edits and changes we made to the worksheet when we were recording the macro. Viewing the Macro Code Next, we will examine the code associated with our macro. When you record a macro in Excel, everything you do is recorded as a set of Visual Basic code. To view the code, click on Visual Basic button in the Developer tab. This will launch the Visual Basic Editor window. On the left side of the window in the VBA Project Explorer you will see a folder called \"Modules\". Click on the plus sign (\"+\") to the left of this folder to expand its contents and you will an item called Module1 . When a macro is recorded, the code associated with the macro is always inserted into a module. If you already have one or more modules, a new module will be created. If you double click on the item labeled Module1 , a window will open and the code associated with the macro you just recorded will appear. The code should look something like this: Sub my_macro() ' ' my_macro Macro ' ' Range(\"B3\").Select ActiveCell.FormulaR1C1 = \"23.4\" Range(\"B4\").Select ActiveCell.FormulaR1C1 = \"873.2\" Range(\"B5\").Select ActiveCell.FormulaR1C1 = \"=SUM(R[-2]C:R[-1]C)\" Range(\"B3:B5\").Select With Selection .HorizontalAlignment = xlCenter .VerticalAlignment = xlBottom .WrapText = False .Orientation = 0 .AddIndent = False .IndentLevel = 0 .ShrinkToFit = False .ReadingOrder = xlContext .MergeCells = False End With Selection.Borders(xlDiagonalDown).LineStyle = xlNone Selection.Borders(xlDiagonalUp).LineStyle = xlNone With Selection.Borders(xlEdgeLeft) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlEdgeTop) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlEdgeBottom) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlEdgeRight) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlInsideVertical) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlInsideHorizontal) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With End Sub The first few lines of code are associated with entering the two values and the formula. The next section centers the selection and the last six blocks of code apply the border style to the selection. You can modify the code here if you wish and re-run the macro. Applications and Use Cases Macros have a number of useful applications. For example, you can record a macro associated with some set of steps that you find yourself doing frequently. The macro then automates those steps. You can also use a macro to figure out how to write VB code to perform some action. For example, suppose I want to embed an execution of the Goal Seek feature as part of my code, but I am not sure how to call Goal Seek from VB. I can simply record a macro that involves running the Goal Seek tool and then examine the code. In may applications, the VB code associated with our macro may not be as useful as we like because it only applies to a very specific case at a very specific location on our workbook. In these cases, we can often modify the macro code to make it more general purpose. For example, we can generalize the code and then put it in a loop to solve some kind of problem in an iterative fashion. In this sense, macros can be a very powerful way to quickly generate code. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Parabolic Zero - Record a macro performing a goal seek to find the zero(s) of a parabolic equation. Easy parabolic_zero.xlsm parabolic_zero_key.xlsm Table Format - Record a relative macro that formats the appropriate range of cells found within any given table of the same size. Medium table_format.xlsm table_format_key.xlsm Microstrain - Record a macro that conducts an analysis on microstrain data that quickly identifies the maximum values of the selected column. Hard microstrain.xlsm microstrain_key.xlsm","title":"Macros"},{"location":"02_vba/02_macros/macros/#recording-macros","text":"A VB Macro is essentially a VB subroutine that executes a series of VB statements. To generate a macro, you must first turn on the Developer tab . Macros are then created and managed using the tools in the Code Group on the left side of the tab: You can automate a series of steps in Excel by recording a macro. As you record a macro, Excel converts each of your steps into lines of VB code that are part of a script that can be replayed at a latter point in time to automatically replicate the steps recorded into the script. The options are as follows: Button Description Click on this button to start recording your macro. You will then be prompted for the name of the macro. Once you start recording the macro, the button will change to Stop Recording. Click here when you are finished with the steps you wish to include in the macro. This is a toggle button. When it is turned on, the steps in the macro are recorded in a relative fashion. I.e., the cells affected by the macro will be based on the position of the cell(s) selected when the macro is executed. This can be used to make a macro that can be applied to any section of the spreadsheet. When using this option, be sure to select an appropriate part of the sheet prior to recording the macro. This option is used to establish the security settings for the VB code. VB macros can be used to write computer viruses. The security settings are used to minimize danger from such viruses. This button brings up a window listing all of the macros associated with a project. You can select a macro and click on the Run button to execute the macro. You can also delete macros. This tool displays the Visual Basic Editor . This is where you write the Visual Basic code. It also allows you to look at the code associated with your macros. The macros are stored in the Modules section of the Project Explorer. Macros are extremely useful when you are first learning how to write VBA code in Excel. If you want to do something in code such as change the background color of a cell, but you don't know to do it, simply run a macro, change the color manually, and then look at the macro. You can learn how to do just about anything simply by running macros.","title":"Recording Macros"},{"location":"02_vba/02_macros/macros/#recording-a-macro","text":"To illustrate the macro recording process, open up a blank workbook, click on the Developer tab, and click on the Record Macro button. You will then be prompted for the name of the macro. Enter \"my_macro\". Note that you should not use spaces in your macro names. Select any cell other than cell B3. Then, do the following: Select cell B3 . Enter a value of 23.4 in cell B3 . Enter a value of 873.2 in cell B4 . Enter a formula in cell B5 to compute the sum of the previous two values (\"=Sum(B3:B4)\"). Click on the Home tab and select the range B3:B4 and click on the center align button in the Alignment section. Use to borders tool in the Font section to apply a solid border to the cells. At this point, you workbook should look like this: Go back to the Developer tab and click on the Stop Recording button. This completes the recording of the macro.","title":"Recording a Macro"},{"location":"02_vba/02_macros/macros/#saving-a-macro-enabled-workbook","text":"Before looking at the source code recorded by our macro, we need to save the changes that we have made into the workbook thus far. Click on the File|Save As... command and pick a location to save your workbook. Note that the filename and filter will look something like this by default: Note that the default extension is \"*.xlsx\". If you click the Save button, you will get the following error message: If we save the file in this format, our macro code will be lost and it will not function the next time we open it. To save a workbook containing VB code, you must change the extension as follows:","title":"Saving a Macro-Enabled Workbook"},{"location":"02_vba/02_macros/macros/#running-a-macro","text":"Next we will test the macro that we just recorded. Before running the macro, we need to delete our changes to the sheet, including the formatting. The easiest way to do this is to select the entire column B and then select the Delete Sheet Columns command in the Cells section on the right side of the ribbon in the Home tab. After the deletion, there should be nothing on the sheet. Select any cell on the sheet. To run the macro, go to the Developer tab and click on the Macros button. This will bring up a list of the macros (we only have one at this point). Sure our macro is highlighted and then click on the Run button. This should execute our macro and reproduce all of the edits and changes we made to the worksheet when we were recording the macro.","title":"Running a Macro"},{"location":"02_vba/02_macros/macros/#viewing-the-macro-code","text":"Next, we will examine the code associated with our macro. When you record a macro in Excel, everything you do is recorded as a set of Visual Basic code. To view the code, click on Visual Basic button in the Developer tab. This will launch the Visual Basic Editor window. On the left side of the window in the VBA Project Explorer you will see a folder called \"Modules\". Click on the plus sign (\"+\") to the left of this folder to expand its contents and you will an item called Module1 . When a macro is recorded, the code associated with the macro is always inserted into a module. If you already have one or more modules, a new module will be created. If you double click on the item labeled Module1 , a window will open and the code associated with the macro you just recorded will appear. The code should look something like this: Sub my_macro() ' ' my_macro Macro ' ' Range(\"B3\").Select ActiveCell.FormulaR1C1 = \"23.4\" Range(\"B4\").Select ActiveCell.FormulaR1C1 = \"873.2\" Range(\"B5\").Select ActiveCell.FormulaR1C1 = \"=SUM(R[-2]C:R[-1]C)\" Range(\"B3:B5\").Select With Selection .HorizontalAlignment = xlCenter .VerticalAlignment = xlBottom .WrapText = False .Orientation = 0 .AddIndent = False .IndentLevel = 0 .ShrinkToFit = False .ReadingOrder = xlContext .MergeCells = False End With Selection.Borders(xlDiagonalDown).LineStyle = xlNone Selection.Borders(xlDiagonalUp).LineStyle = xlNone With Selection.Borders(xlEdgeLeft) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlEdgeTop) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlEdgeBottom) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlEdgeRight) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlInsideVertical) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With With Selection.Borders(xlInsideHorizontal) .LineStyle = xlContinuous .ColorIndex = 0 .TintAndShade = 0 .Weight = xlThin End With End Sub The first few lines of code are associated with entering the two values and the formula. The next section centers the selection and the last six blocks of code apply the border style to the selection. You can modify the code here if you wish and re-run the macro.","title":"Viewing the Macro Code"},{"location":"02_vba/02_macros/macros/#applications-and-use-cases","text":"Macros have a number of useful applications. For example, you can record a macro associated with some set of steps that you find yourself doing frequently. The macro then automates those steps. You can also use a macro to figure out how to write VB code to perform some action. For example, suppose I want to embed an execution of the Goal Seek feature as part of my code, but I am not sure how to call Goal Seek from VB. I can simply record a macro that involves running the Goal Seek tool and then examine the code. In may applications, the VB code associated with our macro may not be as useful as we like because it only applies to a very specific case at a very specific location on our workbook. In these cases, we can often modify the macro code to make it more general purpose. For example, we can generalize the code and then put it in a loop to solve some kind of problem in an iterative fashion. In this sense, macros can be a very powerful way to quickly generate code.","title":"Applications and Use Cases"},{"location":"02_vba/02_macros/macros/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Parabolic Zero - Record a macro performing a goal seek to find the zero(s) of a parabolic equation. Easy parabolic_zero.xlsm parabolic_zero_key.xlsm Table Format - Record a relative macro that formats the appropriate range of cells found within any given table of the same size. Medium table_format.xlsm table_format_key.xlsm Microstrain - Record a macro that conducts an analysis on microstrain data that quickly identifies the maximum values of the selected column. Hard microstrain.xlsm microstrain_key.xlsm","title":"Exercises"},{"location":"02_vba/03_controls/controls/","text":"Adding Controls to a Spreadsheet Controls are buttons, combo boxes, option buttons, etc. that can be added to a worksheet. You can associate VB code with controls that is executed each time the user clicks on the control. The Controls Group To add a control to a spreadsheet, you should first turn on the Developer tab . You then create new controls and edit the code associated with controls using the Control group. The options in the group are as follows: Tool Description This tool is used to insert new controls (see below). This toggle button is used to switch in and out of design mode (see below) This button brings up the Properties window that is used to edit the properties associated with a selected control. This tool displays the Visual Basic Editor . This is where you write the Visual Basic code. This is used to run any custom user forms you may have associated with the project. Creating Controls To add a new control, click on the Insert button and then select one of the control types in the ActiveX Controls portion of the tool palette: Then drag a box on your worksheet where you want to place the control. While the control is still selected, you can use the Properties window to edit the properties associated with the control (the control name, the caption, etc.). To edit the code associated with a control, simply double click on the control. This switches you over the VB Editor and puts the cursor in the subprocedure associated with the Click event for the control. Any code you enter here is automatically executed when the control is clicked. Design Mode When you are writing VB code and adding controls to a spreadsheet, there are two basic modes: Design mode and Run mode . In design mode, when you click on a button or a control, you can edit the properties of the control in the VB Editor . If you double click on a control, you can edit the code associated with the control. If you are in Run mode, when you click on the control, the code associated with the control is executed. When developing your spreadsheet, you will be moving in and out of Design mode. Types of Controls In this section we will describe each of the controls in the ActiveX Controls menu. Buttons Buttons are also called Command Buttons . They are typically used as a simple mechanism to execute some VBA code, such as a macro you my have recorded. After creating the button, you double-click the button in design mode and then write the code that is executed when the button is clicked. If your button brings up a custom user form, you should also put a set of elipses after the button caption (...). Combo Boxes Combo boxes are sometimes called \"pop-up menus\". They allow you to select a choice from a set of options. The choices presented to the user come from a range of cells somewhere on your spreadsheet. You assign the set of choices to the combobox by setting the ListFillRange property of the combo box. The range is referenced like you would in a spreadsheet (J2:J5, Sheet2!G4:G6, etc.). The LinkedCell property allows the user to output a value from their selection to a specific cell. LinkedCell outputs this value from a column in the ListFillRange and this column is denoted by the BoundColumn property. The \"combo\" part of a combo box comes from the fact that rather than selecting an item from the list, you can type something in the box. If you want to restrict the user to only select something from the list (typical usage), you need to set the MatchRequired property to True. Check Boxes Checkboxes are used when you have an option or set of options that are true/false or yes/no and the options are independent. For example, The text displayed corresponds to the Caption property. The Value property is a boolean (true/false) indicating the status of the control. This control is typically utilized with some kind of If statement. You typically don't do anything when the user selects the control, but when the user selects a button or something, you check the status of the control. For example, If chkCoseSlaw Then price = price + 2.6 End If If your options are dependent (you can only select one from the group), you should use either the list box, combo box, or option control instead. List Boxes A list box is used when you have a large number of options and you need the user to select one option from the list. Example: The contents of the list come from a range of cells somewhere on your spreadsheet. The range is indicated by the ListFillRange property. To determine what item is selected, you can check the Value property. For the example shown above, the Value property would = \"Brigham Young\". In many cases, what you really want to know is what item is selected by order in the list. You can do this using the ListIndex property. The index numbering starts at 0, so for the case shown above, the ListIndex property = 2 . Note that if the list box is not big enough to show the entire list, a scroll bar is automatically added to the list to allow the user to scroll through the entire list. Text Boxes A text box is used to allow the user to enter a text string as some type of input. For example, The text in the control is stored in the Value property. Text boxes are rarely used in Excel because it is usually simpler and more efficient to have the user enter the text into one of the spreadsheet cells. Scroll Bars A scroll bar allows the user to select a value from a predefined range of values. The rectangle in the middle is called the \"thumb\". As the user moves the thumb, the value of the scroll bar changes and the value is stored in the Value property. You can link a scroll bar to a cell using the LinkedCell property. Then the current value of the scroll is echoed to a cell as shown above. You set the range of values on the scroll bar using the Min and Max properties. Scroll bars are fun, but are rarely used on spreadsheets. Spin Buttons A spin button allows the user to increment an integer value up or down by clicking on the button arrows. A spin button should always be linked to a cell using the LinkedCell property. You can set a limit on the values by changing the Min and Max properties. You can also use the SmallChange property to increment by 2, 5, 10, etc (default = 1). Option Buttons Option buttons are used when you want the user to make a single selection from a set of options. These are sometimes called \"radio\" controls, because the mimic the buttons on your car radio for selecting a pre-set station. Each control has a Value property which is a boolean representing the state of the control (true/false). The text displayed is from the Caption property. Labels A label is simply a text string where you can change the value of the text string using VB code. These are sometimes useful in custom user forms, but are rarely used in spreadsheets because you can simply put a label in a cell and change the value of the cell. Images An image control allows you to associate an image from a file with a control. The control is shown as a gray rectangle until you attach an image to the control using the Picture property. You select a file and the image in the file is then copied to the image control. You can use the Visible property to turn the image on or off and you can use the Top and Left properties to control the location of the image on your spreadsheet. You should only use this control on a spreadsheet if you intend to turn the image on or off or move it. Otherwise, just use the Insert|Pictures command in Excel. See the Road Kill homework assignment for an example of how to use image controls. Toggle Buttons A toggle button is similar to a checkbox, but it uses a button that is in a normal or depressed state: The button status is stored in the Value property as a boolean (true/false). The text on the button is from the Caption property. More Controls Clicking on the more controls button brings up a list of advanced controls. The contents of the list will depend on what is installed on your computer. Control Names When working with controls, you will need to reference your controls in your code using the control names which are defined by the Name property when you create the controls. When dealing with large numbers of controls, it is very important to assign meaningful names that describe the function of the control. Furthermore, to distinguish between different types of controls, you should use a three character prefix on the control names to indicate the type. For example, if I had a set of checkboxes for BBQ sides as shown above, I would name them: chkColeSlaw chkPotatoSalad chkBakeBeans chkMacNCheese And for my option controls I would name them: optRed optGreen optBlue Here is a complete list of suggested three character prefixes for each control type. Type Icon Prefix Command Button cmd Combo Box cbo Check Box chk List Box lst Text Box txt Scroll Bar scr Spin Button spn Option Button opt Label lbl Image img Toggle Button tog Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Christmas Tree - Use shapes, controls, and macros in this fun visually basic controlled workbook to decorate a Christmas Tree. Easy christmas_tree.xlsm christmas_tree_key.xlsm Control Exercises - Learn how to use all of the basic Excel controls with these short and simple exercises. Medium control_exercises.xlsm control_exercises_key.xlsm Madlib Controls - Use controls to create a madlib generator for you and your friends. Hard madlib_controls.xlsm madlib_controls_key.xlsm","title":"Controls"},{"location":"02_vba/03_controls/controls/#adding-controls-to-a-spreadsheet","text":"Controls are buttons, combo boxes, option buttons, etc. that can be added to a worksheet. You can associate VB code with controls that is executed each time the user clicks on the control.","title":"Adding Controls to a Spreadsheet"},{"location":"02_vba/03_controls/controls/#the-controls-group","text":"To add a control to a spreadsheet, you should first turn on the Developer tab . You then create new controls and edit the code associated with controls using the Control group. The options in the group are as follows: Tool Description This tool is used to insert new controls (see below). This toggle button is used to switch in and out of design mode (see below) This button brings up the Properties window that is used to edit the properties associated with a selected control. This tool displays the Visual Basic Editor . This is where you write the Visual Basic code. This is used to run any custom user forms you may have associated with the project.","title":"The Controls Group"},{"location":"02_vba/03_controls/controls/#creating-controls","text":"To add a new control, click on the Insert button and then select one of the control types in the ActiveX Controls portion of the tool palette: Then drag a box on your worksheet where you want to place the control. While the control is still selected, you can use the Properties window to edit the properties associated with the control (the control name, the caption, etc.). To edit the code associated with a control, simply double click on the control. This switches you over the VB Editor and puts the cursor in the subprocedure associated with the Click event for the control. Any code you enter here is automatically executed when the control is clicked.","title":"Creating Controls"},{"location":"02_vba/03_controls/controls/#design-mode","text":"When you are writing VB code and adding controls to a spreadsheet, there are two basic modes: Design mode and Run mode . In design mode, when you click on a button or a control, you can edit the properties of the control in the VB Editor . If you double click on a control, you can edit the code associated with the control. If you are in Run mode, when you click on the control, the code associated with the control is executed. When developing your spreadsheet, you will be moving in and out of Design mode.","title":"Design Mode"},{"location":"02_vba/03_controls/controls/#types-of-controls","text":"In this section we will describe each of the controls in the ActiveX Controls menu.","title":"Types of Controls"},{"location":"02_vba/03_controls/controls/#buttons","text":"Buttons are also called Command Buttons . They are typically used as a simple mechanism to execute some VBA code, such as a macro you my have recorded. After creating the button, you double-click the button in design mode and then write the code that is executed when the button is clicked. If your button brings up a custom user form, you should also put a set of elipses after the button caption (...).","title":"Buttons"},{"location":"02_vba/03_controls/controls/#combo-boxes","text":"Combo boxes are sometimes called \"pop-up menus\". They allow you to select a choice from a set of options. The choices presented to the user come from a range of cells somewhere on your spreadsheet. You assign the set of choices to the combobox by setting the ListFillRange property of the combo box. The range is referenced like you would in a spreadsheet (J2:J5, Sheet2!G4:G6, etc.). The LinkedCell property allows the user to output a value from their selection to a specific cell. LinkedCell outputs this value from a column in the ListFillRange and this column is denoted by the BoundColumn property. The \"combo\" part of a combo box comes from the fact that rather than selecting an item from the list, you can type something in the box. If you want to restrict the user to only select something from the list (typical usage), you need to set the MatchRequired property to True.","title":"Combo Boxes"},{"location":"02_vba/03_controls/controls/#check-boxes","text":"Checkboxes are used when you have an option or set of options that are true/false or yes/no and the options are independent. For example, The text displayed corresponds to the Caption property. The Value property is a boolean (true/false) indicating the status of the control. This control is typically utilized with some kind of If statement. You typically don't do anything when the user selects the control, but when the user selects a button or something, you check the status of the control. For example, If chkCoseSlaw Then price = price + 2.6 End If If your options are dependent (you can only select one from the group), you should use either the list box, combo box, or option control instead.","title":"Check Boxes"},{"location":"02_vba/03_controls/controls/#list-boxes","text":"A list box is used when you have a large number of options and you need the user to select one option from the list. Example: The contents of the list come from a range of cells somewhere on your spreadsheet. The range is indicated by the ListFillRange property. To determine what item is selected, you can check the Value property. For the example shown above, the Value property would = \"Brigham Young\". In many cases, what you really want to know is what item is selected by order in the list. You can do this using the ListIndex property. The index numbering starts at 0, so for the case shown above, the ListIndex property = 2 . Note that if the list box is not big enough to show the entire list, a scroll bar is automatically added to the list to allow the user to scroll through the entire list.","title":"List Boxes"},{"location":"02_vba/03_controls/controls/#text-boxes","text":"A text box is used to allow the user to enter a text string as some type of input. For example, The text in the control is stored in the Value property. Text boxes are rarely used in Excel because it is usually simpler and more efficient to have the user enter the text into one of the spreadsheet cells.","title":"Text Boxes"},{"location":"02_vba/03_controls/controls/#scroll-bars","text":"A scroll bar allows the user to select a value from a predefined range of values. The rectangle in the middle is called the \"thumb\". As the user moves the thumb, the value of the scroll bar changes and the value is stored in the Value property. You can link a scroll bar to a cell using the LinkedCell property. Then the current value of the scroll is echoed to a cell as shown above. You set the range of values on the scroll bar using the Min and Max properties. Scroll bars are fun, but are rarely used on spreadsheets.","title":"Scroll Bars"},{"location":"02_vba/03_controls/controls/#spin-buttons","text":"A spin button allows the user to increment an integer value up or down by clicking on the button arrows. A spin button should always be linked to a cell using the LinkedCell property. You can set a limit on the values by changing the Min and Max properties. You can also use the SmallChange property to increment by 2, 5, 10, etc (default = 1).","title":"Spin Buttons"},{"location":"02_vba/03_controls/controls/#option-buttons","text":"Option buttons are used when you want the user to make a single selection from a set of options. These are sometimes called \"radio\" controls, because the mimic the buttons on your car radio for selecting a pre-set station. Each control has a Value property which is a boolean representing the state of the control (true/false). The text displayed is from the Caption property.","title":"Option Buttons"},{"location":"02_vba/03_controls/controls/#labels","text":"A label is simply a text string where you can change the value of the text string using VB code. These are sometimes useful in custom user forms, but are rarely used in spreadsheets because you can simply put a label in a cell and change the value of the cell.","title":"Labels"},{"location":"02_vba/03_controls/controls/#images","text":"An image control allows you to associate an image from a file with a control. The control is shown as a gray rectangle until you attach an image to the control using the Picture property. You select a file and the image in the file is then copied to the image control. You can use the Visible property to turn the image on or off and you can use the Top and Left properties to control the location of the image on your spreadsheet. You should only use this control on a spreadsheet if you intend to turn the image on or off or move it. Otherwise, just use the Insert|Pictures command in Excel. See the Road Kill homework assignment for an example of how to use image controls.","title":"Images"},{"location":"02_vba/03_controls/controls/#toggle-buttons","text":"A toggle button is similar to a checkbox, but it uses a button that is in a normal or depressed state: The button status is stored in the Value property as a boolean (true/false). The text on the button is from the Caption property.","title":"Toggle Buttons"},{"location":"02_vba/03_controls/controls/#more-controls","text":"Clicking on the more controls button brings up a list of advanced controls. The contents of the list will depend on what is installed on your computer.","title":"More Controls"},{"location":"02_vba/03_controls/controls/#control-names","text":"When working with controls, you will need to reference your controls in your code using the control names which are defined by the Name property when you create the controls. When dealing with large numbers of controls, it is very important to assign meaningful names that describe the function of the control. Furthermore, to distinguish between different types of controls, you should use a three character prefix on the control names to indicate the type. For example, if I had a set of checkboxes for BBQ sides as shown above, I would name them: chkColeSlaw chkPotatoSalad chkBakeBeans chkMacNCheese And for my option controls I would name them: optRed optGreen optBlue Here is a complete list of suggested three character prefixes for each control type. Type Icon Prefix Command Button cmd Combo Box cbo Check Box chk List Box lst Text Box txt Scroll Bar scr Spin Button spn Option Button opt Label lbl Image img Toggle Button tog","title":"Control Names"},{"location":"02_vba/03_controls/controls/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Christmas Tree - Use shapes, controls, and macros in this fun visually basic controlled workbook to decorate a Christmas Tree. Easy christmas_tree.xlsm christmas_tree_key.xlsm Control Exercises - Learn how to use all of the basic Excel controls with these short and simple exercises. Medium control_exercises.xlsm control_exercises_key.xlsm Madlib Controls - Use controls to create a madlib generator for you and your friends. Hard madlib_controls.xlsm madlib_controls_key.xlsm","title":"Exercises"},{"location":"02_vba/04_ranges/ranges/","text":"Working with Cells and Ranges When writing VB code, you can use variables, for loops, and all other VB types and statements. However, most of your code will be dealing with values stored in cells and ranges. The Range Object A range is set of cells. It can be one cell or multiple cells. A range is an object within a worksheet object. For example, the following statement sets the value of cell C23 to a formula referencing a set of named cells: Worksheets(\"trapchan\").Range(\"C23\").Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" If the \"trapchan\" worksheet is the active sheet, the first part can be left off as follows: Range(\"C23\").Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" The .Value part is optional. You can also write: Range(\"C23\") = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" You have to remember to put the double quotes around the cell address. If the cell C23 has been named \"Q\" in the spreadsheet, you can reference the range as follows: Range(\"Q\").Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" To get something from a cell and put it in a variable, you just do things in reverse: x = Range(\"B14\").Value The Cells Object Another way to interact with a cell is to use the Cells(rowindex, columnindex) function. For example: Cells(2, 5).Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" or x = val(Cells(2, 14).Value) Once again, the value part is optional since it is the default property of both the cell and range object. Working with Multiple Cells A range can also encompass a set of cells. The following code selects a block of cells: Range(\"A1:C5\").Select or Range(\"A1\", \"C5\").Select In some cases, it is useful to reference a range of cells using integers representing the row and column of the cell. This can be accomplished with the Cells object. For example: Range(Cells(1,1), Cells(3,5)).Select The problem with referring to specific cells in your code is that if you change the location of data on your spreadsheet, you need to go through your code and make sure all of the addresses are updated. In some cases it is useful to define the ranges you are dealing with using global constants at the top of your VB code. Then when you reference a range, you can use the constants. If the range ever changes, you only need to update your code in one location. For example: Const TableRange As String = \"A4:D50\" Const NameRange As String = \"A4:D50\" Const ScoreRange As String = \"D4:D50\" . . Range(TableRange).ClearContents . . An even better approach is to get into the habit of naming cells and ranges on your spreadsheet. Then your VB code can always refer to ranges by names. Then, if you change the location or domain of a named range, you generally don't need to update your VB code. For example: Range(\"TableRange\").ClearContents Range(\"NameRange\").ClearContents Range(\"ScoreRange\").ClearContents Looping Through Cells One of the most common things we do with VB code is to traverse or loop through a set of cells. There are several ways this can be accomplished. One way is to use the Cells object. The following code loops through a table of cells located in the range B4:F20: Dim row As Integer Dim col As Integer For row = 4 To 20 For col = 2 To 6 If Cells(row, col) = \"\" Then Cells(row, col).Interior.Color = vbRed End If Next col Next row In most cases, it doesn't matter what order the cells are traversed, as long as each cell is visited. In such cases the For Each ... Next looping style may be used. The following code does the same thing as the nested loop shown above: Dim cell As Variant For Each cell In Range(\"B4:F20\") If cell = \"\" Then cell.Interior.Color = vbRed End If Next cell Another option is to create your own range objects. A range object is essentially a range type variable. The following code defines three ranges: Dim coordrange As Range Dim xrange As Range Dim yrange As Range Set xrange = Range(Cells(3, 1), Cells(100, 1)) Set yrange = Range(Cells(3, 2), Cells(100, 2)) Set coordrange = Range(Cells(3, 1), Cells(100, 2)) Once a set of range objects has been defined, you can easily manipulate the cells in the range object. For example, the following code clears the contents of all the cells in the coordrange object: coordrange.Clear Once again, these ranges can be traversed using the For Each ... Next syntax. Dim cell As Variant For Each cell In xrange cell.Value = \"0.0\" Next cell One of the most useful things you can do with VBA in Excel is to allow the user to enter a list of numbers where the size of the list can vary. The following code searches through a list and copies the numbers in the list into an array. It stops copying the numbers when it reaches a blank cell. 'Get the x values i = 0 For Each cell In Range(\"B4:B23\") If cell.Value = \"\" Then numpts = i Exit For Else i = i + 1 x(i) = cell.Value End If Next cell R1C1 Notation Another case where we deal with ranges in VB code is when we record macros and then modify the macros to make custom subs. If we create a formula while recording the macro, the formula will often be recorded using what is called \"R1C1 notation\". For example, here is a snippet of code from a recorded macro: Range(\"F11\").Select ActiveCell.FormulaR1C1 = \"=SUM(R[-4]C:R[-2]C)\" This is the same as: Range(\"F11\").Select ActiveCell.Formula = \"=SUM(F7:F9)\" So what is the advantage of the R1C1 notation? If you need to modify the formula using variables or some other run-time conditions, the R1C1 notation can be easier to manipulate. The R1C1 notation makes it possible to refer to both rows and columns using integers rather than letters and it makes it very easy to indicate relative vs. absolute references. The following table illustrates how the R1C1 notation works: R1C1 Expression Equivalent Expression* R[-4]C:R[-2]C F7:F9 R[+2]C:R[+4]C F13:F15 R4C2:RC[-1] \\(B\\) 4:E11 RC:R15C10 F11: \\(J\\) 15 *Assumes reference cell = F11 In other words, R10 means \"an absolute reference to row 10\" whereas R[-2] means \"a relative reference to two rows above the cell in question\" and R (without a number) means \"on the same row as the cell in question\". Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Range Basics - Run through 5 quick exercises that use ranges. Easy range_basics.xlsm range_basics_key.xlsm Calculator - Calculate the given equations from three variables. Medium calculator.xlsm calculator_key.xlsm Sum - Use ranges to calculate a sum and an adjusted sum of the tabulated data. Medium sum.xlsm sum_key.xlsm Empty Cells - Calculate the number of empty cells from the range of data. Also change the range object properties to display a red cell for an empty cell. Hard empty_cells.xlsm empty_cells_key.xlsm","title":"Ranges"},{"location":"02_vba/04_ranges/ranges/#working-with-cells-and-ranges","text":"When writing VB code, you can use variables, for loops, and all other VB types and statements. However, most of your code will be dealing with values stored in cells and ranges.","title":"Working with Cells and Ranges"},{"location":"02_vba/04_ranges/ranges/#the-range-object","text":"A range is set of cells. It can be one cell or multiple cells. A range is an object within a worksheet object. For example, the following statement sets the value of cell C23 to a formula referencing a set of named cells: Worksheets(\"trapchan\").Range(\"C23\").Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" If the \"trapchan\" worksheet is the active sheet, the first part can be left off as follows: Range(\"C23\").Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" The .Value part is optional. You can also write: Range(\"C23\") = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" You have to remember to put the double quotes around the cell address. If the cell C23 has been named \"Q\" in the spreadsheet, you can reference the range as follows: Range(\"Q\").Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" To get something from a cell and put it in a variable, you just do things in reverse: x = Range(\"B14\").Value","title":"The Range Object"},{"location":"02_vba/04_ranges/ranges/#the-cells-object","text":"Another way to interact with a cell is to use the Cells(rowindex, columnindex) function. For example: Cells(2, 5).Value = \"=(u/n)*A*Rh^(2/3)*S^(1/2)\" or x = val(Cells(2, 14).Value) Once again, the value part is optional since it is the default property of both the cell and range object.","title":"The Cells Object"},{"location":"02_vba/04_ranges/ranges/#working-with-multiple-cells","text":"A range can also encompass a set of cells. The following code selects a block of cells: Range(\"A1:C5\").Select or Range(\"A1\", \"C5\").Select In some cases, it is useful to reference a range of cells using integers representing the row and column of the cell. This can be accomplished with the Cells object. For example: Range(Cells(1,1), Cells(3,5)).Select The problem with referring to specific cells in your code is that if you change the location of data on your spreadsheet, you need to go through your code and make sure all of the addresses are updated. In some cases it is useful to define the ranges you are dealing with using global constants at the top of your VB code. Then when you reference a range, you can use the constants. If the range ever changes, you only need to update your code in one location. For example: Const TableRange As String = \"A4:D50\" Const NameRange As String = \"A4:D50\" Const ScoreRange As String = \"D4:D50\" . . Range(TableRange).ClearContents . . An even better approach is to get into the habit of naming cells and ranges on your spreadsheet. Then your VB code can always refer to ranges by names. Then, if you change the location or domain of a named range, you generally don't need to update your VB code. For example: Range(\"TableRange\").ClearContents Range(\"NameRange\").ClearContents Range(\"ScoreRange\").ClearContents","title":"Working with Multiple Cells"},{"location":"02_vba/04_ranges/ranges/#looping-through-cells","text":"One of the most common things we do with VB code is to traverse or loop through a set of cells. There are several ways this can be accomplished. One way is to use the Cells object. The following code loops through a table of cells located in the range B4:F20: Dim row As Integer Dim col As Integer For row = 4 To 20 For col = 2 To 6 If Cells(row, col) = \"\" Then Cells(row, col).Interior.Color = vbRed End If Next col Next row In most cases, it doesn't matter what order the cells are traversed, as long as each cell is visited. In such cases the For Each ... Next looping style may be used. The following code does the same thing as the nested loop shown above: Dim cell As Variant For Each cell In Range(\"B4:F20\") If cell = \"\" Then cell.Interior.Color = vbRed End If Next cell Another option is to create your own range objects. A range object is essentially a range type variable. The following code defines three ranges: Dim coordrange As Range Dim xrange As Range Dim yrange As Range Set xrange = Range(Cells(3, 1), Cells(100, 1)) Set yrange = Range(Cells(3, 2), Cells(100, 2)) Set coordrange = Range(Cells(3, 1), Cells(100, 2)) Once a set of range objects has been defined, you can easily manipulate the cells in the range object. For example, the following code clears the contents of all the cells in the coordrange object: coordrange.Clear Once again, these ranges can be traversed using the For Each ... Next syntax. Dim cell As Variant For Each cell In xrange cell.Value = \"0.0\" Next cell One of the most useful things you can do with VBA in Excel is to allow the user to enter a list of numbers where the size of the list can vary. The following code searches through a list and copies the numbers in the list into an array. It stops copying the numbers when it reaches a blank cell. 'Get the x values i = 0 For Each cell In Range(\"B4:B23\") If cell.Value = \"\" Then numpts = i Exit For Else i = i + 1 x(i) = cell.Value End If Next cell","title":"Looping Through Cells"},{"location":"02_vba/04_ranges/ranges/#r1c1-notation","text":"Another case where we deal with ranges in VB code is when we record macros and then modify the macros to make custom subs. If we create a formula while recording the macro, the formula will often be recorded using what is called \"R1C1 notation\". For example, here is a snippet of code from a recorded macro: Range(\"F11\").Select ActiveCell.FormulaR1C1 = \"=SUM(R[-4]C:R[-2]C)\" This is the same as: Range(\"F11\").Select ActiveCell.Formula = \"=SUM(F7:F9)\" So what is the advantage of the R1C1 notation? If you need to modify the formula using variables or some other run-time conditions, the R1C1 notation can be easier to manipulate. The R1C1 notation makes it possible to refer to both rows and columns using integers rather than letters and it makes it very easy to indicate relative vs. absolute references. The following table illustrates how the R1C1 notation works: R1C1 Expression Equivalent Expression* R[-4]C:R[-2]C F7:F9 R[+2]C:R[+4]C F13:F15 R4C2:RC[-1] \\(B\\) 4:E11 RC:R15C10 F11: \\(J\\) 15 *Assumes reference cell = F11 In other words, R10 means \"an absolute reference to row 10\" whereas R[-2] means \"a relative reference to two rows above the cell in question\" and R (without a number) means \"on the same row as the cell in question\".","title":"R1C1 Notation"},{"location":"02_vba/04_ranges/ranges/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Range Basics - Run through 5 quick exercises that use ranges. Easy range_basics.xlsm range_basics_key.xlsm Calculator - Calculate the given equations from three variables. Medium calculator.xlsm calculator_key.xlsm Sum - Use ranges to calculate a sum and an adjusted sum of the tabulated data. Medium sum.xlsm sum_key.xlsm Empty Cells - Calculate the number of empty cells from the range of data. Also change the range object properties to display a red cell for an empty cell. Hard empty_cells.xlsm empty_cells_key.xlsm","title":"Exercises"},{"location":"02_vba/05_msgbox/msgbox/","text":"MsgBox and InputBox There are many occasions when programming where it is convenient to show a prompt to display a message to the user, and in some cases ask a simple question or ask for some simple feedback. In VBA, this can be accomplished with the MsgBox and InputBox tools. MsgBox MsgBox is used to display a simple message to the user. Here is the syntax: The last two arguments (HelpFile, Context) are rarely used. The other arguments are described below. Prompt Note that the only argument that is required is the Prompt. Here is a simple example. The code: MsgBox \"Hello World\" Brings up the following window: Buttons The second argument can be used to control what buttons are displayed. For example, the code: MsgBox \"Hello World\", vbOKCancel Brings up the following window: The buttons argument is what is called an enumerated type, meaning you can only pick from a pre-defined set of options. The options are defined as VB constants, hence the \"vb\" prefix. Here are the more commonly used options: vbOKOnly vbOKCancel vbRetryCancel vbYesNo vbYesNoCancel To determine which button is selected, you need to apply MsgBox as a function rather than as a sub. For example: Dim mybutton As Variant mybutton = MsgBox(\"This will delete your sheet. Continue?\", vbOKCancel) If mybutton = vbOK Then 'PUT THE CODE HERE TO DELETE THE SHEET Else Exit Sub End If In other words, when used as a function, MsgBox returns a code indicating the button that was selected. Once again, the button codes are defined as a set of VB constants: vbOK vbCancel vbYes vbNo vbRetry Style You can also choose to add an icon to the MsgBox by adding another constant to the button argument. For example, the code: MsgBox \"This sheet brought to you by Norm Jones\", vbInformation + vbOKOnly Brings up the following window: Note that the style constants can be added to the button constants. The style constants are as follows: Icon Constant vbInformation vbExclamation vbCritical Title For each of the examples show above, note that the text shown in the title bar is \"Microsoft Excel\". You can change the title by using the third argument as follows: MsgBox \"Hello World\", vbOKOnly, \"Greetings\" This code brings up: InputBox InputBox is very similar to MsgBox, but it is used when you need to prompt the user to input some text (or a number or a date) before you execute some code. The syntax is as follows: Prompt Once again, the prompt is the message that is displayed and it is the only required argument. For example, the code: name = inputbox(\"Please enter your name\") brings up: Note that InputBox is always used as a function. The value returned by the function is the text string entered by the user. If the user selects the Cancel button, InputBox returns an empty string. Therefore, to determine what button was selected, you simply test the value of the return string as follows: result = inputbox(\"Please enter your name\") If result <> \"\" Then 'DO SOMETHING WITH NAME HERE End If Title The Title argument is used to specify a text string to go in the title bar, similar to MsgBox. Default The Default argument is used to provide a default text string in the input box when it first comes up. For example: result = inputbox(\"Please enter your name\", \"Greetings\", \"Joe Blow\") If result <> \"\" Then 'DO SOMETHING WITH NAME HERE End If brings up: Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution MsgBox - Create a control button that displays a message box with a congratulatory statement. Easy msgbox.xlsm msgbox_key.xlsm Unit Weight - Create a message box that will only calculate the unit weight if the user clicks on \"OK.\" Medium unit_weight.xlsm unit_weight_key.xlsm Scholarship Letter - Create an input box that asks for the recipient's name and adds it to the scholarship award letter template. Hard scholarship_letter.xlsm scholarship_letter_key.xlsm","title":"MsgBox"},{"location":"02_vba/05_msgbox/msgbox/#msgbox-and-inputbox","text":"There are many occasions when programming where it is convenient to show a prompt to display a message to the user, and in some cases ask a simple question or ask for some simple feedback. In VBA, this can be accomplished with the MsgBox and InputBox tools.","title":"MsgBox and InputBox"},{"location":"02_vba/05_msgbox/msgbox/#msgbox","text":"MsgBox is used to display a simple message to the user. Here is the syntax: The last two arguments (HelpFile, Context) are rarely used. The other arguments are described below.","title":"MsgBox"},{"location":"02_vba/05_msgbox/msgbox/#prompt","text":"Note that the only argument that is required is the Prompt. Here is a simple example. The code: MsgBox \"Hello World\" Brings up the following window:","title":"Prompt"},{"location":"02_vba/05_msgbox/msgbox/#buttons","text":"The second argument can be used to control what buttons are displayed. For example, the code: MsgBox \"Hello World\", vbOKCancel Brings up the following window: The buttons argument is what is called an enumerated type, meaning you can only pick from a pre-defined set of options. The options are defined as VB constants, hence the \"vb\" prefix. Here are the more commonly used options: vbOKOnly vbOKCancel vbRetryCancel vbYesNo vbYesNoCancel To determine which button is selected, you need to apply MsgBox as a function rather than as a sub. For example: Dim mybutton As Variant mybutton = MsgBox(\"This will delete your sheet. Continue?\", vbOKCancel) If mybutton = vbOK Then 'PUT THE CODE HERE TO DELETE THE SHEET Else Exit Sub End If In other words, when used as a function, MsgBox returns a code indicating the button that was selected. Once again, the button codes are defined as a set of VB constants: vbOK vbCancel vbYes vbNo vbRetry","title":"Buttons"},{"location":"02_vba/05_msgbox/msgbox/#style","text":"You can also choose to add an icon to the MsgBox by adding another constant to the button argument. For example, the code: MsgBox \"This sheet brought to you by Norm Jones\", vbInformation + vbOKOnly Brings up the following window: Note that the style constants can be added to the button constants. The style constants are as follows: Icon Constant vbInformation vbExclamation vbCritical","title":"Style"},{"location":"02_vba/05_msgbox/msgbox/#title","text":"For each of the examples show above, note that the text shown in the title bar is \"Microsoft Excel\". You can change the title by using the third argument as follows: MsgBox \"Hello World\", vbOKOnly, \"Greetings\" This code brings up:","title":"Title"},{"location":"02_vba/05_msgbox/msgbox/#inputbox","text":"InputBox is very similar to MsgBox, but it is used when you need to prompt the user to input some text (or a number or a date) before you execute some code. The syntax is as follows:","title":"InputBox"},{"location":"02_vba/05_msgbox/msgbox/#prompt_1","text":"Once again, the prompt is the message that is displayed and it is the only required argument. For example, the code: name = inputbox(\"Please enter your name\") brings up: Note that InputBox is always used as a function. The value returned by the function is the text string entered by the user. If the user selects the Cancel button, InputBox returns an empty string. Therefore, to determine what button was selected, you simply test the value of the return string as follows: result = inputbox(\"Please enter your name\") If result <> \"\" Then 'DO SOMETHING WITH NAME HERE End If","title":"Prompt"},{"location":"02_vba/05_msgbox/msgbox/#title_1","text":"The Title argument is used to specify a text string to go in the title bar, similar to MsgBox.","title":"Title"},{"location":"02_vba/05_msgbox/msgbox/#default","text":"The Default argument is used to provide a default text string in the input box when it first comes up. For example: result = inputbox(\"Please enter your name\", \"Greetings\", \"Joe Blow\") If result <> \"\" Then 'DO SOMETHING WITH NAME HERE End If brings up:","title":"Default"},{"location":"02_vba/05_msgbox/msgbox/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution MsgBox - Create a control button that displays a message box with a congratulatory statement. Easy msgbox.xlsm msgbox_key.xlsm Unit Weight - Create a message box that will only calculate the unit weight if the user clicks on \"OK.\" Medium unit_weight.xlsm unit_weight_key.xlsm Scholarship Letter - Create an input box that asks for the recipient's name and adds it to the scholarship award letter template. Hard scholarship_letter.xlsm scholarship_letter_key.xlsm","title":"Exercises"},{"location":"02_vba/06_variables/variables/","text":"Declaring and Using Variables Variables are a fundamental part of any programming language. A variable is a placeholder for a piece of information corresponding to a number, date, text string, etc. You can store information in a variable and then retrieve the information from the variable later as you use the variable as part of an expression or as part of an assignment statement that passes the information somewhere else. Simple Method The simplest way to use variables is to just reference them in your code. For example, consider the following code: Private Sub cmdCalculateArea_Click() Radius = 4.3 Pi = 3.14159 Area = Pi * Radius ^ 2 Circ = 2 * Pi * Radius MsgBox \"Area = \" & Area MsgBox \"Circumference = \" & Circ End Sub This code computes the area and circumference of a circle with radius of 4.3. We first assign values to the Radius and Pi variables and then use those variables to calculate the area and circumference and store these two values in the Area and Circ variables. The values stored in the Area and Circ variables are then displayed using the MsgBox calls. This code brings up the following two messages: As you can see, variables provide a simple and convenient way to perform calculations. Declaring Variables While the approach shown above is simple, it can be dangerous. For example, consider the following code: Private Sub cmdCalculateArea_Click() Radias = 4.3 Pi = 3.14159 Area = Pi * Radius ^ 2 Circ = 2 * Pi * Radius MsgBox \"Area = \" & Area MsgBox \"Circumference = \" & Circ End Sub Note the difference on the very first line of code (\"Radias = ...\"). The word \"Radius\" has been misspelled, but it is spelled correctly in the rest of the code. This is what the code produces: which is clearly wrong! What happened? Whenever the VB compiler encounters a variable name it does not recognize, it creates a new variable with that name and initializes the value to zero. So there is a variable called \"Radias\" with a value of 4.3, but when the lines for calculating the area and circumference were encountered, the compiler created a new variable called \"Radius\" with a default value of zero and used that variable in the calculations. That is why the area and circumference ended up with a value of zero. This is a logic error and can be extremely difficult to track down and fix in some cases. It is easy to make spelling mistakes, so this can lead to lots of bugs in your code. Fortunately, there is a simple way to ensure that this never happens. First of all, you should put the following line at the top of each of your code modules: Option Explicit This line forces you to declare all variables before you use them. You declare variables using a Dim statement as follows: Dim radius, pi, area, circ This statement defines the variables you intend to use and the compiler immediately creates the variables in the list when this statement is encountered. Then if you ever encounter a misspelled variable, the code stops with a run-time error and you get a message like this: It is then a simple matter to correct the spelling and fix the bug. Therefore, you should ALWAYS remember to include the Option Explicit statement when using variables. It will prevent a huge amount of nasty bugs. Variable Types When we create variables to use in our code, we typically have a specific objective in mind and we plan to store a specific type of data in each variable. We can change our Dim statement to more explicitly define what type of variable we are declaring as follows: Dim n As Integer, name As String, birthday As Date The advantage of explicitly declaring types is that if you ever try to store something of one type in a variable of another type, you will get an error message. Here are the most commonly-used variable types in VBA: Type Mem Range Boolean 1B True/False Currency 8B -922,337,203,685,477.5808 to 922,337,203,685,477.5807 Date 8B January 1, 100 to December 31, 9999 Single (single precision floating point numbers) 4B +/-1e-45 to +/-1e+38 Double (double precision floating point numbers) 8B +/-1e-324 to +/-1e+308 Integer (single precision whole numbers) 2B -32,768 to 32,767 Long (double precision whole numbers) 4B -2,147,483,648 to 2,147,483,647 String Varies 0 to ~2 billion characters Variant Varies All of the above Source: MSDN - Visual Basic for Applications Reference, Data Type Summary Singles and doubles both work well for floating point numbers (numbers with both a whole and decimal part, Ex. -207.393). However, a single only preserves about 7 digits of accuracy while a double preserves about 15 digits. Therefore we typically use doubles just to be safe. The Variant type is a special case and is somewhat unique to VB. A variant can hold any type of information. When you store something in a Variant, part of the Variant memory is used to mark the type of data currently stored in the variable. When you access the data in the variable, the data type information is used to process it properly. Therefore, a Variant is kind of a general purpose type. You can explicitly declare something to be a Variant as follows: Dim x As Variant, y As Variant, z As Variant Or you can simply do this: Dim x, y, z and you get the same result. In other words, if you don't explicitly declare the type for a variable, it defaults to Variant. You need to be careful with this method. For example, many people assume that this statement: Dim x, y, z As Double declares all three variables as Doubles. However, that is not true. The only variable that ends up as a Double is z . Since no type was defined for x and y , they default to Variants. In other words, it is the same as doing the following: Dim x As Variant, y As Variant, z As Double Default Values When you declare a numeric variable, the default value of the variable is always zero. For example, consider the following code: Dim n As Integer Range(\"B4\") = n n = n + 1 Range(\"B5\") = n After this code is executed, there is a value of 0 in cell B4 and a value of 1 in cell B5 . If you reference a variable after it is declared but before assigning a value to it, it contains the default value of zero. Likewise, the default value for a string variable = \"\" (empty string). And the default value for a boolean variable = False. If you are ever in doubt, there is no harm in assigning a value to a variable before using it. Variable Names When coming up with names for your variables, a few simple rules must be followed: You can only use the characters a-z, A-Z, 0-9, and the underscore character (\"_\"). You cannot use reserved VB words such as \"If\", \"Dim\", etc. You should also try to make your variable names reflective of the variable usage when possible. For example, use \"last_name\", \"first_name\" rather than \"x1\", \"x2\" if you are going to store names in your variables. Assignment Statements When working with variables, it is important to understand how assignment statements work. To store a value in a variable, you would do something like this: x = 283.922 As a mathematical expression, this statement would be interpreted as \"x is equal to 283.922\". However, that is not the best way to interpret this statement in programming logic. When used as a stand-alone statement, it literally means \"take the value of 283.922 and store it in the variable called x\". This is why we call this an assignment statement. Here is another example: x = 2 y = 8 x = y As a sequence of mathematical expressions this does not make sense because 2 does not equal 8. But as an assignment statement, the last line means \"Take the current value of y (which is 8) and store it in x.\" After the assignment statement is completed, both x and y have a value of 8. In some cases, the thing on the right side is an expression: x = (7 * y) / 3 In this case we evaluate the expression on the right using the current value of y and then store the result in x. It should be noted that when writing an assignment statement, the item on the left side must be a variable or object that can store the result of the expression on the right. In other words, this would not make sense: (y * y) / 3 = x '<-- WRONG! Here is another example. In this case we are going read the value from cell A4 and store it in x. x = Range(\"A4\") Once again, the order is critical. If what you really wanted to do was take the value of x and store it in cell A4, you would reverse the statement as follows: Range(\"A4\") = x This illustrates that cells are similar to variables. You can store values in cells and then retrieve those values later. In summary, the best way to think of an assignment statement is \"Take the value of the expression on the right, and store it in the variable/object on the left.\" Constants In some cases it is useful to declare a variable that never changes. Such a variable is called a constant. Here is a commonly used constant: Const pi As Double = 3.14159 After making this declaration, you can use pi anywhere in your code as an alias for 3.14159. For example: area = pi * radius ^ 2 circumf = 2 * pi * r You could do the same thing by declaring pi as a variable (see code at the top of this page). The advantage of using a constant is that it ensures that you don't accidentally change the value of the constant. If you attempt to do so, you will get an error message. Scope When dealing with variables, we often need to consider something called \"scope\". A variable's scope defines in which part of the code the variable can be utilized. In most cases, we define a variable inside of a sub or function as follows: Sub mysub() Dim x As Double, y As Double, sum As Double x = Range(\"A4\") y = Range(\"B4\") sum = x + y Range(\"C4\") = sum End Sub In this case, the scope of the variables x, y, and sum is within mysub. If you were to use a variable with the same name(s) in another sub as follows: Sub mysub() Dim x As Double, y As Double, sum As Double x = Range(\"A4\") y = Range(\"B4\") sum = x + y Range(\"C4\") = sum End Sub Sub anothersub() Dim x As Double, y As Double, sum As Double x = 5 y = 12 Range(\"C4\") = y * x End Sub each of the two subs would be referencing two different sets of variables. However, if you declare the variables outside the subs like this: Dim x As Double, y As Double, sum As Double Sub mysub() x = Range(\"A4\") y = Range(\"B4\") sum = x + y Range(\"C4\") = sum End Sub Sub anothersub() x = 5 y = 12 Range(\"C4\") = y * x End Sub then the scope of the variables is defined as the entire module and both subs would be referencing the same variables. If you want a variable to be shared by every sheet, form, or module in the entire project, you can declare it as a global variable as follows: Global x As Double, y As Double, sum As Double Globals can only be defined inside a module (you can't do this in a sheet or form). While it may be tempting to declare variables outside of subs or as globals, this is generally viewed as poor programming practice. In the vast majority of cases, it is cleaner and less confusing if you declare your variables inside each sub or function where they are used. If you need to pass information from one sub to another, do it via input arguments. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Total Head - Pass cell values into variables and use the variables to calculate the total fluid head. Easy total_head.xlsm total_head_key.xlsm Lengths, Dot Product - Use variables to store vectors and calculate their lengths and dot product. Medium lengths_dot_product.xlsm lengths_dot_product_key.xlsm Citation Generator - Store the values/words of a resource as variables to use in the string generator that displays the correct citation. Hard citation_generator.xlsm citation_generator_key.xlsm","title":"Variables"},{"location":"02_vba/06_variables/variables/#declaring-and-using-variables","text":"Variables are a fundamental part of any programming language. A variable is a placeholder for a piece of information corresponding to a number, date, text string, etc. You can store information in a variable and then retrieve the information from the variable later as you use the variable as part of an expression or as part of an assignment statement that passes the information somewhere else.","title":"Declaring and Using Variables"},{"location":"02_vba/06_variables/variables/#simple-method","text":"The simplest way to use variables is to just reference them in your code. For example, consider the following code: Private Sub cmdCalculateArea_Click() Radius = 4.3 Pi = 3.14159 Area = Pi * Radius ^ 2 Circ = 2 * Pi * Radius MsgBox \"Area = \" & Area MsgBox \"Circumference = \" & Circ End Sub This code computes the area and circumference of a circle with radius of 4.3. We first assign values to the Radius and Pi variables and then use those variables to calculate the area and circumference and store these two values in the Area and Circ variables. The values stored in the Area and Circ variables are then displayed using the MsgBox calls. This code brings up the following two messages: As you can see, variables provide a simple and convenient way to perform calculations.","title":"Simple Method"},{"location":"02_vba/06_variables/variables/#declaring-variables","text":"While the approach shown above is simple, it can be dangerous. For example, consider the following code: Private Sub cmdCalculateArea_Click() Radias = 4.3 Pi = 3.14159 Area = Pi * Radius ^ 2 Circ = 2 * Pi * Radius MsgBox \"Area = \" & Area MsgBox \"Circumference = \" & Circ End Sub Note the difference on the very first line of code (\"Radias = ...\"). The word \"Radius\" has been misspelled, but it is spelled correctly in the rest of the code. This is what the code produces: which is clearly wrong! What happened? Whenever the VB compiler encounters a variable name it does not recognize, it creates a new variable with that name and initializes the value to zero. So there is a variable called \"Radias\" with a value of 4.3, but when the lines for calculating the area and circumference were encountered, the compiler created a new variable called \"Radius\" with a default value of zero and used that variable in the calculations. That is why the area and circumference ended up with a value of zero. This is a logic error and can be extremely difficult to track down and fix in some cases. It is easy to make spelling mistakes, so this can lead to lots of bugs in your code. Fortunately, there is a simple way to ensure that this never happens. First of all, you should put the following line at the top of each of your code modules: Option Explicit This line forces you to declare all variables before you use them. You declare variables using a Dim statement as follows: Dim radius, pi, area, circ This statement defines the variables you intend to use and the compiler immediately creates the variables in the list when this statement is encountered. Then if you ever encounter a misspelled variable, the code stops with a run-time error and you get a message like this: It is then a simple matter to correct the spelling and fix the bug. Therefore, you should ALWAYS remember to include the Option Explicit statement when using variables. It will prevent a huge amount of nasty bugs.","title":"Declaring Variables"},{"location":"02_vba/06_variables/variables/#variable-types","text":"When we create variables to use in our code, we typically have a specific objective in mind and we plan to store a specific type of data in each variable. We can change our Dim statement to more explicitly define what type of variable we are declaring as follows: Dim n As Integer, name As String, birthday As Date The advantage of explicitly declaring types is that if you ever try to store something of one type in a variable of another type, you will get an error message. Here are the most commonly-used variable types in VBA: Type Mem Range Boolean 1B True/False Currency 8B -922,337,203,685,477.5808 to 922,337,203,685,477.5807 Date 8B January 1, 100 to December 31, 9999 Single (single precision floating point numbers) 4B +/-1e-45 to +/-1e+38 Double (double precision floating point numbers) 8B +/-1e-324 to +/-1e+308 Integer (single precision whole numbers) 2B -32,768 to 32,767 Long (double precision whole numbers) 4B -2,147,483,648 to 2,147,483,647 String Varies 0 to ~2 billion characters Variant Varies All of the above Source: MSDN - Visual Basic for Applications Reference, Data Type Summary Singles and doubles both work well for floating point numbers (numbers with both a whole and decimal part, Ex. -207.393). However, a single only preserves about 7 digits of accuracy while a double preserves about 15 digits. Therefore we typically use doubles just to be safe. The Variant type is a special case and is somewhat unique to VB. A variant can hold any type of information. When you store something in a Variant, part of the Variant memory is used to mark the type of data currently stored in the variable. When you access the data in the variable, the data type information is used to process it properly. Therefore, a Variant is kind of a general purpose type. You can explicitly declare something to be a Variant as follows: Dim x As Variant, y As Variant, z As Variant Or you can simply do this: Dim x, y, z and you get the same result. In other words, if you don't explicitly declare the type for a variable, it defaults to Variant. You need to be careful with this method. For example, many people assume that this statement: Dim x, y, z As Double declares all three variables as Doubles. However, that is not true. The only variable that ends up as a Double is z . Since no type was defined for x and y , they default to Variants. In other words, it is the same as doing the following: Dim x As Variant, y As Variant, z As Double","title":"Variable Types"},{"location":"02_vba/06_variables/variables/#default-values","text":"When you declare a numeric variable, the default value of the variable is always zero. For example, consider the following code: Dim n As Integer Range(\"B4\") = n n = n + 1 Range(\"B5\") = n After this code is executed, there is a value of 0 in cell B4 and a value of 1 in cell B5 . If you reference a variable after it is declared but before assigning a value to it, it contains the default value of zero. Likewise, the default value for a string variable = \"\" (empty string). And the default value for a boolean variable = False. If you are ever in doubt, there is no harm in assigning a value to a variable before using it.","title":"Default Values"},{"location":"02_vba/06_variables/variables/#variable-names","text":"When coming up with names for your variables, a few simple rules must be followed: You can only use the characters a-z, A-Z, 0-9, and the underscore character (\"_\"). You cannot use reserved VB words such as \"If\", \"Dim\", etc. You should also try to make your variable names reflective of the variable usage when possible. For example, use \"last_name\", \"first_name\" rather than \"x1\", \"x2\" if you are going to store names in your variables.","title":"Variable Names"},{"location":"02_vba/06_variables/variables/#assignment-statements","text":"When working with variables, it is important to understand how assignment statements work. To store a value in a variable, you would do something like this: x = 283.922 As a mathematical expression, this statement would be interpreted as \"x is equal to 283.922\". However, that is not the best way to interpret this statement in programming logic. When used as a stand-alone statement, it literally means \"take the value of 283.922 and store it in the variable called x\". This is why we call this an assignment statement. Here is another example: x = 2 y = 8 x = y As a sequence of mathematical expressions this does not make sense because 2 does not equal 8. But as an assignment statement, the last line means \"Take the current value of y (which is 8) and store it in x.\" After the assignment statement is completed, both x and y have a value of 8. In some cases, the thing on the right side is an expression: x = (7 * y) / 3 In this case we evaluate the expression on the right using the current value of y and then store the result in x. It should be noted that when writing an assignment statement, the item on the left side must be a variable or object that can store the result of the expression on the right. In other words, this would not make sense: (y * y) / 3 = x '<-- WRONG! Here is another example. In this case we are going read the value from cell A4 and store it in x. x = Range(\"A4\") Once again, the order is critical. If what you really wanted to do was take the value of x and store it in cell A4, you would reverse the statement as follows: Range(\"A4\") = x This illustrates that cells are similar to variables. You can store values in cells and then retrieve those values later. In summary, the best way to think of an assignment statement is \"Take the value of the expression on the right, and store it in the variable/object on the left.\"","title":"Assignment Statements"},{"location":"02_vba/06_variables/variables/#constants","text":"In some cases it is useful to declare a variable that never changes. Such a variable is called a constant. Here is a commonly used constant: Const pi As Double = 3.14159 After making this declaration, you can use pi anywhere in your code as an alias for 3.14159. For example: area = pi * radius ^ 2 circumf = 2 * pi * r You could do the same thing by declaring pi as a variable (see code at the top of this page). The advantage of using a constant is that it ensures that you don't accidentally change the value of the constant. If you attempt to do so, you will get an error message.","title":"Constants"},{"location":"02_vba/06_variables/variables/#scope","text":"When dealing with variables, we often need to consider something called \"scope\". A variable's scope defines in which part of the code the variable can be utilized. In most cases, we define a variable inside of a sub or function as follows: Sub mysub() Dim x As Double, y As Double, sum As Double x = Range(\"A4\") y = Range(\"B4\") sum = x + y Range(\"C4\") = sum End Sub In this case, the scope of the variables x, y, and sum is within mysub. If you were to use a variable with the same name(s) in another sub as follows: Sub mysub() Dim x As Double, y As Double, sum As Double x = Range(\"A4\") y = Range(\"B4\") sum = x + y Range(\"C4\") = sum End Sub Sub anothersub() Dim x As Double, y As Double, sum As Double x = 5 y = 12 Range(\"C4\") = y * x End Sub each of the two subs would be referencing two different sets of variables. However, if you declare the variables outside the subs like this: Dim x As Double, y As Double, sum As Double Sub mysub() x = Range(\"A4\") y = Range(\"B4\") sum = x + y Range(\"C4\") = sum End Sub Sub anothersub() x = 5 y = 12 Range(\"C4\") = y * x End Sub then the scope of the variables is defined as the entire module and both subs would be referencing the same variables. If you want a variable to be shared by every sheet, form, or module in the entire project, you can declare it as a global variable as follows: Global x As Double, y As Double, sum As Double Globals can only be defined inside a module (you can't do this in a sheet or form). While it may be tempting to declare variables outside of subs or as globals, this is generally viewed as poor programming practice. In the vast majority of cases, it is cleaner and less confusing if you declare your variables inside each sub or function where they are used. If you need to pass information from one sub to another, do it via input arguments.","title":"Scope"},{"location":"02_vba/06_variables/variables/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Total Head - Pass cell values into variables and use the variables to calculate the total fluid head. Easy total_head.xlsm total_head_key.xlsm Lengths, Dot Product - Use variables to store vectors and calculate their lengths and dot product. Medium lengths_dot_product.xlsm lengths_dot_product_key.xlsm Citation Generator - Store the values/words of a resource as variables to use in the string generator that displays the correct citation. Hard citation_generator.xlsm citation_generator_key.xlsm","title":"Exercises"},{"location":"02_vba/07_objects/objects/","text":"Working with Objects VBA is an object-oriented language. Controls, cells, ranges, shapes, worksheets, and workbooks are all different types of objects that can be manipulated using VBA in Excel. Objects have three types of features: properties, methods, and events. Properties Properties are attributes associated with an object. For example, a command button has properties for the control name, the caption, the size, the font, and the colors. You can change properties using the Properties window or in code using an assignment statement: Range(\"B5\").Formula = \"=A5/12 + B15\" Properties can be thought of as a collection of variables associated with an object. Each property has a type (integer, double, string) and some properties are other objects. For example, the following line of code shows how to modify a property associated with an embedded object. Range(\"B5\").Interior.Color = 65535 Methods Methods are actions that can be performed by an object. For example, a range object has a Select method that selects the cells in the range. Range(\"B4:D12\").Select The following Method clears the data in a set of cells while keeping the formatting intact: Range(\"B5\").ClearContents Not all objects include methods. Events An event is something that happens to an object. We write code in response to events. Events are described in more detail on the Working with Events section. Collections A collection is a special type of object that is a set of objects. For example, the Sheets collection contains all of the Sheet objects in a workbook. For each sheet, there is a collection of Shape objects called Shapes. There is also a collection of Comment objects called Comments. All collection objects contain a Count property that tracks the number of objects in the collection. To reference the objects in a collection, you can use the index of the object: Sheets(2).Activate Or if you know the name of the object, you can reference it by name: Sheets(\"Sheet2\").Activate To traverse a collection, we use the For Each type of loop. For example, to delete all of the shapes on a page, we could do the following: Dim myshape As Shape For Each myshape In Shapes myshape.Delete Next myshape The For Each loop is explained in more detail in the Loops chapter. Object Browser When we work with objects in Excel, we are using the Microsoft Excel Object Model . The model can be explored in the Visual Basic Editor using the Object Browser . To access the browser, you click on the Object Browser icon . This brings up the Object Browser window: The Object Browser is a great way to explore objects and learn what members (properties, methods) are available with the object. The top left item lets us pick which object model to browse. You typically want to change this to \"Excel\" (as shown) to focus on the Excel objects rather than browsing all objects in MS Office. You can then use the search field (to the left of the binocular icon) to search for a particular object type. You then pick the object of interest in the search results and the members of the object (properties and methods) are listed in the main part of the window. You can click on each member and get a summary at the bottom of the window. You can also right-click on a member to bring up context sensitive help on that member. For example, doing this: brings up this: Of course, you can also look up information on objects directly using the search feature in the Visual Basic Help utility. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Project Management - Use a variety of objects and change their appearance and/or values through methods and properties to update the project management table. Easy project_management.xlsm project_management_key.xlsm Objects - Run through a few object.method basics to obtain specific results and get rid of an Excel Bug :) Medium objects.xlsm objects_key.xlsm Pop the Balloon - Use shape objects and use methods and properties to create an animation that pumps up a balloon until it pops! Hard pop_the_balloon.xlsm pop_the_balloon_key.xlsm","title":"Objects"},{"location":"02_vba/07_objects/objects/#working-with-objects","text":"VBA is an object-oriented language. Controls, cells, ranges, shapes, worksheets, and workbooks are all different types of objects that can be manipulated using VBA in Excel. Objects have three types of features: properties, methods, and events.","title":"Working with Objects"},{"location":"02_vba/07_objects/objects/#properties","text":"Properties are attributes associated with an object. For example, a command button has properties for the control name, the caption, the size, the font, and the colors. You can change properties using the Properties window or in code using an assignment statement: Range(\"B5\").Formula = \"=A5/12 + B15\" Properties can be thought of as a collection of variables associated with an object. Each property has a type (integer, double, string) and some properties are other objects. For example, the following line of code shows how to modify a property associated with an embedded object. Range(\"B5\").Interior.Color = 65535","title":"Properties"},{"location":"02_vba/07_objects/objects/#methods","text":"Methods are actions that can be performed by an object. For example, a range object has a Select method that selects the cells in the range. Range(\"B4:D12\").Select The following Method clears the data in a set of cells while keeping the formatting intact: Range(\"B5\").ClearContents Not all objects include methods.","title":"Methods"},{"location":"02_vba/07_objects/objects/#events","text":"An event is something that happens to an object. We write code in response to events. Events are described in more detail on the Working with Events section.","title":"Events"},{"location":"02_vba/07_objects/objects/#collections","text":"A collection is a special type of object that is a set of objects. For example, the Sheets collection contains all of the Sheet objects in a workbook. For each sheet, there is a collection of Shape objects called Shapes. There is also a collection of Comment objects called Comments. All collection objects contain a Count property that tracks the number of objects in the collection. To reference the objects in a collection, you can use the index of the object: Sheets(2).Activate Or if you know the name of the object, you can reference it by name: Sheets(\"Sheet2\").Activate To traverse a collection, we use the For Each type of loop. For example, to delete all of the shapes on a page, we could do the following: Dim myshape As Shape For Each myshape In Shapes myshape.Delete Next myshape The For Each loop is explained in more detail in the Loops chapter.","title":"Collections"},{"location":"02_vba/07_objects/objects/#object-browser","text":"When we work with objects in Excel, we are using the Microsoft Excel Object Model . The model can be explored in the Visual Basic Editor using the Object Browser . To access the browser, you click on the Object Browser icon . This brings up the Object Browser window: The Object Browser is a great way to explore objects and learn what members (properties, methods) are available with the object. The top left item lets us pick which object model to browse. You typically want to change this to \"Excel\" (as shown) to focus on the Excel objects rather than browsing all objects in MS Office. You can then use the search field (to the left of the binocular icon) to search for a particular object type. You then pick the object of interest in the search results and the members of the object (properties and methods) are listed in the main part of the window. You can click on each member and get a summary at the bottom of the window. You can also right-click on a member to bring up context sensitive help on that member. For example, doing this: brings up this: Of course, you can also look up information on objects directly using the search feature in the Visual Basic Help utility.","title":"Object Browser"},{"location":"02_vba/07_objects/objects/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Project Management - Use a variety of objects and change their appearance and/or values through methods and properties to update the project management table. Easy project_management.xlsm project_management_key.xlsm Objects - Run through a few object.method basics to obtain specific results and get rid of an Excel Bug :) Medium objects.xlsm objects_key.xlsm Pop the Balloon - Use shape objects and use methods and properties to create an animation that pumps up a balloon until it pops! Hard pop_the_balloon.xlsm pop_the_balloon_key.xlsm","title":"Exercises"},{"location":"02_vba/08_ifthen/ifthen/","text":"Decisions and Conditions - Writing If Statements There are countless occasions when writing code where we need to execute code only if certain conditions are met. This can be accomplished by writing If statements. Syntax The general syntax of an If statement is as follows: If condition_1 Then statement(s) ElseIf condition_2 Then statement(s) ... ElseIf condition_n Then statement(s) Else statement(s) End If The If ... Then and the End If parts are required. All of the other parts are optional and are only used when needed. For example, in some cases you don't need any of the Else options: If Range(\"B5\") = \"\" Then MsgBox \"Error: Cell B5 cannot be empty\" Exit Sub End If Note that you can put as many statements as you want between the If and End If lines. Each of the statements is executed if the condition is true. You do not have to indent, but it is STRONGLY recommended as it makes your code much easier to follow. In some cases you may wish to include an Else clause that is executed when the condition is false. If x = 0 Then MsgBox \"Error: Cannot divide by zero\" Else y = 1 / x End If In other cases, you may need to check several conditions, each of which is mutually exclusive. If yourteam = \"BYU\" Then MsgBox \"You are cool\" ElseIf yourteam = \"Utah\" Then MsgBox \"You are NOT cool\" ElseIf yourteam = \"Utah State\" Then MsgBox \"What is an aggie?\" Else MsgBox \"I do not care\" End If Each of the conditions is checked in sequence starting at the top. Once a condition is found that evaluates to True, none of the remaining conditions are tested and the flow of control exits the IF statement and jumps to the code immediately following the End If statement. For the cases with no ElseIf clauses and simple one-line results, you can put your entire statement on a single line: If yourteam = \"BYU\" Then MsgBox \"You are cool\" or If x = 0 Then y = 0 Else y = 1 / x Conditional Expressions Every If statement requires at least one conditional expression. A conditional expression is an expression that returns either True or False when evaluated. Conditional expressions are generally formulated using a binary conditional operator. A binary operator takes two arguments, one on each side of the operator. Here is a list of the commonly used operators: Operator Symbol Example Equal = a = b Not equal <> a <> b Less than < x < y Greater than > p > q Less than Or equal to <= x <= 5.5 Greater than or equal to >= y >= p Multiple conditional expressions can be combined with the And and Or operators. With the And operator, the combined expression is true if both conditions are true. With the Or operator, the combined expression is true if either of the two conditions is true. For example, If myteam = \"BYU\" And yourteam = \"BYU\" Then MsgBox \"High five!\" ElseIf yourteam = \"Utah\" Or yourteam = \"USU\" Then MsgBox \"Boo!\" Else MsgBox \"Nice to meet you\" End If You may wish to combine more than two conditional expressions. In this case, it helps to use parentheses. If (myteam = \"BYU\") And (yourteam = \"Utah\" Or yourteam = \"USU\") Then MsgBox \"We are going to have a problem.\" Else MsgBox \"Nice to meet you\" End If You can also use the Not operator to negate a statement. It is a unary operator and it negates the conditional expression that follows it. For example, If (myteam = \"BYU\") And Not (yourteam = \"Utah\" Or yourteam = \"USU\") Then MsgBox \"We are going to get along OK.\" End If Notice that Not True \u2192 False and Not False \u2192 True. Evaluating Number Ranges When doing computations, it is common to need to determine if a number is inside a range. For example, in mathematics it is common two write a statement like this: 0 \u2264 x \u2264 5 When writing this as a compound conditional expression, it is tempting to write it as follows: If 0 <= x <= 5 Then However, this is NOT logically equivalent to the statement shown above. For example, suppose that x = -10 , which is outside the range and should make the expression evaluate to False. The expression is evaluated in two parts from left to right, so the first part evaluated is 0 <= x , which returns a value of False. The value of False is then substituted for the first part of the expression and the remaining expression is then evaluated as False <= 5 . Whenever a boolean value (True/False) is compared to numerical value, True = 1 and False = 0 . Therefore, this expression is evaluated as 0 <= 5 , which is True, leading to an incorrect result. The proper way to write this expression in VB is: If 0 <= x And x <= 5 Then In this case, the two sides are evaluated independently and then combined with the And operator, resulting in the correct answer. If Statements and Controls If statements are commonly used to determine the state of controls. Suppose you have a checkbox called chkResizeImage . You could check the state of the Value property as follows: If chkResizeImage.Value = True Then Note that for a checkbox and option control, the Value property is a Boolean variable that equals True if the control is selected, and False otherwise. Since the Value property is the default property for each of these objects, you can simplify this statement by omitting the .Value part as follows: If chkResizeImage = True Then Furthermore, this statement can be further simplified as follows: If chkResizeImage Then In other words, the = True part is redundant because chkResizeImage = True is logically equivalent to the value of chkResizeImage (the expression is true when chkResizeImage is true). Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Score Keeper - Use an IF THEN expression to provide feedback on a calculated score. Easy score_keeper.xlsm score_keeper_key.xlsm Density - Use an IF THEN expression with a check box and a conditional expression to display the correct density with the values given. Medium density.xlsm density_key.xlsm Receipt - Create an IF THEN expression that takes a few conditions into consideration when generating a receipt for a customer. Hard receipt.xlsm receipt_key.xlsm","title":"If Statements"},{"location":"02_vba/08_ifthen/ifthen/#decisions-and-conditions-writing-if-statements","text":"There are countless occasions when writing code where we need to execute code only if certain conditions are met. This can be accomplished by writing If statements.","title":"Decisions and Conditions - Writing If Statements"},{"location":"02_vba/08_ifthen/ifthen/#syntax","text":"The general syntax of an If statement is as follows: If condition_1 Then statement(s) ElseIf condition_2 Then statement(s) ... ElseIf condition_n Then statement(s) Else statement(s) End If The If ... Then and the End If parts are required. All of the other parts are optional and are only used when needed. For example, in some cases you don't need any of the Else options: If Range(\"B5\") = \"\" Then MsgBox \"Error: Cell B5 cannot be empty\" Exit Sub End If Note that you can put as many statements as you want between the If and End If lines. Each of the statements is executed if the condition is true. You do not have to indent, but it is STRONGLY recommended as it makes your code much easier to follow. In some cases you may wish to include an Else clause that is executed when the condition is false. If x = 0 Then MsgBox \"Error: Cannot divide by zero\" Else y = 1 / x End If In other cases, you may need to check several conditions, each of which is mutually exclusive. If yourteam = \"BYU\" Then MsgBox \"You are cool\" ElseIf yourteam = \"Utah\" Then MsgBox \"You are NOT cool\" ElseIf yourteam = \"Utah State\" Then MsgBox \"What is an aggie?\" Else MsgBox \"I do not care\" End If Each of the conditions is checked in sequence starting at the top. Once a condition is found that evaluates to True, none of the remaining conditions are tested and the flow of control exits the IF statement and jumps to the code immediately following the End If statement. For the cases with no ElseIf clauses and simple one-line results, you can put your entire statement on a single line: If yourteam = \"BYU\" Then MsgBox \"You are cool\" or If x = 0 Then y = 0 Else y = 1 / x","title":"Syntax"},{"location":"02_vba/08_ifthen/ifthen/#conditional-expressions","text":"Every If statement requires at least one conditional expression. A conditional expression is an expression that returns either True or False when evaluated. Conditional expressions are generally formulated using a binary conditional operator. A binary operator takes two arguments, one on each side of the operator. Here is a list of the commonly used operators: Operator Symbol Example Equal = a = b Not equal <> a <> b Less than < x < y Greater than > p > q Less than Or equal to <= x <= 5.5 Greater than or equal to >= y >= p Multiple conditional expressions can be combined with the And and Or operators. With the And operator, the combined expression is true if both conditions are true. With the Or operator, the combined expression is true if either of the two conditions is true. For example, If myteam = \"BYU\" And yourteam = \"BYU\" Then MsgBox \"High five!\" ElseIf yourteam = \"Utah\" Or yourteam = \"USU\" Then MsgBox \"Boo!\" Else MsgBox \"Nice to meet you\" End If You may wish to combine more than two conditional expressions. In this case, it helps to use parentheses. If (myteam = \"BYU\") And (yourteam = \"Utah\" Or yourteam = \"USU\") Then MsgBox \"We are going to have a problem.\" Else MsgBox \"Nice to meet you\" End If You can also use the Not operator to negate a statement. It is a unary operator and it negates the conditional expression that follows it. For example, If (myteam = \"BYU\") And Not (yourteam = \"Utah\" Or yourteam = \"USU\") Then MsgBox \"We are going to get along OK.\" End If Notice that Not True \u2192 False and Not False \u2192 True.","title":"Conditional Expressions"},{"location":"02_vba/08_ifthen/ifthen/#evaluating-number-ranges","text":"When doing computations, it is common to need to determine if a number is inside a range. For example, in mathematics it is common two write a statement like this: 0 \u2264 x \u2264 5 When writing this as a compound conditional expression, it is tempting to write it as follows: If 0 <= x <= 5 Then However, this is NOT logically equivalent to the statement shown above. For example, suppose that x = -10 , which is outside the range and should make the expression evaluate to False. The expression is evaluated in two parts from left to right, so the first part evaluated is 0 <= x , which returns a value of False. The value of False is then substituted for the first part of the expression and the remaining expression is then evaluated as False <= 5 . Whenever a boolean value (True/False) is compared to numerical value, True = 1 and False = 0 . Therefore, this expression is evaluated as 0 <= 5 , which is True, leading to an incorrect result. The proper way to write this expression in VB is: If 0 <= x And x <= 5 Then In this case, the two sides are evaluated independently and then combined with the And operator, resulting in the correct answer.","title":"Evaluating Number Ranges"},{"location":"02_vba/08_ifthen/ifthen/#if-statements-and-controls","text":"If statements are commonly used to determine the state of controls. Suppose you have a checkbox called chkResizeImage . You could check the state of the Value property as follows: If chkResizeImage.Value = True Then Note that for a checkbox and option control, the Value property is a Boolean variable that equals True if the control is selected, and False otherwise. Since the Value property is the default property for each of these objects, you can simplify this statement by omitting the .Value part as follows: If chkResizeImage = True Then Furthermore, this statement can be further simplified as follows: If chkResizeImage Then In other words, the = True part is redundant because chkResizeImage = True is logically equivalent to the value of chkResizeImage (the expression is true when chkResizeImage is true).","title":"If Statements and Controls"},{"location":"02_vba/08_ifthen/ifthen/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Score Keeper - Use an IF THEN expression to provide feedback on a calculated score. Easy score_keeper.xlsm score_keeper_key.xlsm Density - Use an IF THEN expression with a check box and a conditional expression to display the correct density with the values given. Medium density.xlsm density_key.xlsm Receipt - Create an IF THEN expression that takes a few conditions into consideration when generating a receipt for a customer. Hard receipt.xlsm receipt_key.xlsm","title":"Exercises"},{"location":"02_vba/09_debug/debug/","text":"Debugging - Finding and Fixing Errors One of the more frustrating parts of programming can be finding and fixing errors. This process is called \"debugging\" and errors in computer code are called \"bugs\". Debugging your code is much easier if you utilize the built-in debugging tools provided with the Visual Basic Editor. Types of Bugs Before discussing the debugging tools, it is helpful to review the three basic types of bugs: syntax errors, run-time errors, and logic errors. Syntax Errors All programming languages have a set of rules that must be followed when writing the code. These rules are called the code syntax. When you write code, a utility called the compiler parses through your code and converts it to low-level machine language. If you do not use proper syntax, the compiler cannot understand what it is you are trying to do. For example, a common syntax error would be forgetting to include the \"Then\" part of an If statement. If you hit the return key before typing \"Then\", you get a message like this: Another common error would be misspelling a keyword (\"Iff\"). Most syntax errors are caught immediately by the VB Editor when you hit the return key. You can also check for syntax errors by selecting the Compile VBA Project command in the Debug menu. Syntax errors are the easiest to find and fix. Run-Time Errors Run-Time errors occur when your code has correct syntax, but the logic of the code is such that it generates an error when you execute the code. For example, the code: x = 0 y = 1 / x Has legal syntax but generates a \"Divide By Zero\" error when you run the code. When this happens you get an error message and the Visual Basic Editor pops to the front and the line with the offending code is highlighted. Sometimes it is obvious what is causing the run-time error, but in some cases you will need to use the debugging tools to figure it out. Logic Errors A logic error is when your code has correct syntax and does not produce a run-time error but your code produces incorrect results (generates the wrong numbers, for example). Logic errors are the most difficult kind of bug to find and fix. You can spend hours trying to fix your logic errors, but the debugging tools described below can greatly simplify the process. Debugging Tools The debugging tools are located in the Debug menu in the VB Editor. These tools can be used to trace the execution of your code in a line-by-line fashion and examine the value of variables to determine what is causing your run-time or logic errors. Breakpoints The first thing you should do when debugging is create one or more breakpoints. A breakpoint is a location in the code where you want execution to halt so that you can examine the state of your variables and objects and/or begin to trace execution line-by-line. To set a breakpoint, you simply click in the gray column on the left side of the editor and a red dot will appear: When you run the code, the execution will then stop at the breakpoint and the line will be highlighted in yellow. The yellow highlight means that the yellow line has NOT been executed yet, but it is the next line to execute. You can also set a breakpoint by putting the cursor on a line and selecting the Debug|Toggle Breakpoint command or by pressing F9 . You can clear a breakpoint by clicking on it. You can get rid of all of your breakpoints by selecting the Debug|Clear All Breakpoints command. Step Options Once you have halted execution using a breakpoint, you can then trace the execution of your code one line at a time using the Step options. In most cases, the easiest thing to do is press the F8 key to execute the Step Into command. This executes the current line and then highlights the next line in yellow. However, if the current line contains a custom sub or function (i.e., one that you wrote as opposed to a built-in VB sub or function), then you need to be a little more careful. There are actually three different Step commands and each behaves a little differently based on how you want to trace your code. Command Shortcut Result Step Into F8 Executes the current line of code and if the code contains a call to a custom sub or function, the code execution jumps to the first line in the sub or function and then pauses. This gives you the chance to trace the execution of the sub or function. Step Over Shift+F8 Executes the current line of code and if the code contains a call to a custom sub or function, the sub or function is executed but that execution is not traced. After executing the line (including referenced subs and/or functions) the next line of code in the current module is highlighted and the execution pauses. You should use this option when you are confident that your subs or functions do not contain errors and you don't need to trace their execution. Step Out Ctrl+Shift+F8 This command should be used when you are in the middle of tracing the execution of your code inside a custom sub or function and you are satisfied that the sub or function does not contain the error you are looking for. This completes the execution of the sub or function and returns you to the next line following the line where the sub or function was called. Run to Cursor Ctrl+F8 This command executes all code between the current yellow-highlighted line and the line containing the cursor. The line containing the cursor is then highlighted and the execution pauses. It is important to note that none of these four options \"skips\" code in the sense that portions of your code are not executed. All of the code is executed, but in some cases you may not see the step-by-step execution. If for some reason you want to actually skip one or more lines of code, you should set the cursor in the first line following the code you want to skip and then select the Debug|Set Next Statement command. Run Commands After stopping at a breakpoint and examining some code, you may wish to quickly finish all of your remaining lines of code, or execute all lines of code between the current line and the next breakpoint. You can do this using the Run command. There is a set of Run-Pause-Stop commands in the VB Editor menu. Command Symbol Action Run Execute the code from the current position to the next breakpoint or until the code is completed. Pause Pause the execution. This button can be used when your code appears to be stuck in an infinite loop. It causes the code execution to pause and the next line of code to be executed is highlighted. Stop This command can be used either when the code is running or when it is paused. It causes the execution to stop and everything is reset to the non-running state. The Run command can also be used as a shortcut to run a specific sub by putting the cursor in the sub and then selecting the Run button in the VB Editor. For example, this could be used to execute the code associated with a button without actually having to click the button. Examining Variables and Expressions When the code execution is paused, it is extremely helpful to examine the status of your variables, expressions, and objects. To examine the value of a variable, simply hover the cursor over the variable and the current value is displayed: You can also select part or all of an expression to see the value of the highlighted part: If you find yourself checking the value of a particular variable or expression repeatedly, you can select the variable or expression and then select the Debug|Add Watch... command. This opens the Watch window at the bottom of the VB Editor and displays the value of the variable or expression in the window. These values are constantly updated as the code is executed. If you add an array or object to the watch window, you can click the plus button to expand the object and view the values of object/array members. In this example, x and y are two arrays of doubles: Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Total Head Debug - Find a run-time error, logic error and syntax error for the code solving for the total head in the bernoulli equation. Easy total_head_debug.xlsm total_head_debug_key.xlsm Citation Machine - Debug the code so that a message box with the correct citation displays when the user clicks \"Create Citation.\" Medium citation_machine.xlsm citation_machine_key.xlsm Debugging - Debug the code that calculates three equations. Hard debugging.xlsm debugging_key.xlsm","title":"Debugging"},{"location":"02_vba/09_debug/debug/#debugging-finding-and-fixing-errors","text":"One of the more frustrating parts of programming can be finding and fixing errors. This process is called \"debugging\" and errors in computer code are called \"bugs\". Debugging your code is much easier if you utilize the built-in debugging tools provided with the Visual Basic Editor.","title":"Debugging - Finding and Fixing Errors"},{"location":"02_vba/09_debug/debug/#types-of-bugs","text":"Before discussing the debugging tools, it is helpful to review the three basic types of bugs: syntax errors, run-time errors, and logic errors.","title":"Types of Bugs"},{"location":"02_vba/09_debug/debug/#syntax-errors","text":"All programming languages have a set of rules that must be followed when writing the code. These rules are called the code syntax. When you write code, a utility called the compiler parses through your code and converts it to low-level machine language. If you do not use proper syntax, the compiler cannot understand what it is you are trying to do. For example, a common syntax error would be forgetting to include the \"Then\" part of an If statement. If you hit the return key before typing \"Then\", you get a message like this: Another common error would be misspelling a keyword (\"Iff\"). Most syntax errors are caught immediately by the VB Editor when you hit the return key. You can also check for syntax errors by selecting the Compile VBA Project command in the Debug menu. Syntax errors are the easiest to find and fix.","title":"Syntax Errors"},{"location":"02_vba/09_debug/debug/#run-time-errors","text":"Run-Time errors occur when your code has correct syntax, but the logic of the code is such that it generates an error when you execute the code. For example, the code: x = 0 y = 1 / x Has legal syntax but generates a \"Divide By Zero\" error when you run the code. When this happens you get an error message and the Visual Basic Editor pops to the front and the line with the offending code is highlighted. Sometimes it is obvious what is causing the run-time error, but in some cases you will need to use the debugging tools to figure it out.","title":"Run-Time Errors"},{"location":"02_vba/09_debug/debug/#logic-errors","text":"A logic error is when your code has correct syntax and does not produce a run-time error but your code produces incorrect results (generates the wrong numbers, for example). Logic errors are the most difficult kind of bug to find and fix. You can spend hours trying to fix your logic errors, but the debugging tools described below can greatly simplify the process.","title":"Logic Errors"},{"location":"02_vba/09_debug/debug/#debugging-tools","text":"The debugging tools are located in the Debug menu in the VB Editor. These tools can be used to trace the execution of your code in a line-by-line fashion and examine the value of variables to determine what is causing your run-time or logic errors.","title":"Debugging Tools"},{"location":"02_vba/09_debug/debug/#breakpoints","text":"The first thing you should do when debugging is create one or more breakpoints. A breakpoint is a location in the code where you want execution to halt so that you can examine the state of your variables and objects and/or begin to trace execution line-by-line. To set a breakpoint, you simply click in the gray column on the left side of the editor and a red dot will appear: When you run the code, the execution will then stop at the breakpoint and the line will be highlighted in yellow. The yellow highlight means that the yellow line has NOT been executed yet, but it is the next line to execute. You can also set a breakpoint by putting the cursor on a line and selecting the Debug|Toggle Breakpoint command or by pressing F9 . You can clear a breakpoint by clicking on it. You can get rid of all of your breakpoints by selecting the Debug|Clear All Breakpoints command.","title":"Breakpoints"},{"location":"02_vba/09_debug/debug/#step-options","text":"Once you have halted execution using a breakpoint, you can then trace the execution of your code one line at a time using the Step options. In most cases, the easiest thing to do is press the F8 key to execute the Step Into command. This executes the current line and then highlights the next line in yellow. However, if the current line contains a custom sub or function (i.e., one that you wrote as opposed to a built-in VB sub or function), then you need to be a little more careful. There are actually three different Step commands and each behaves a little differently based on how you want to trace your code. Command Shortcut Result Step Into F8 Executes the current line of code and if the code contains a call to a custom sub or function, the code execution jumps to the first line in the sub or function and then pauses. This gives you the chance to trace the execution of the sub or function. Step Over Shift+F8 Executes the current line of code and if the code contains a call to a custom sub or function, the sub or function is executed but that execution is not traced. After executing the line (including referenced subs and/or functions) the next line of code in the current module is highlighted and the execution pauses. You should use this option when you are confident that your subs or functions do not contain errors and you don't need to trace their execution. Step Out Ctrl+Shift+F8 This command should be used when you are in the middle of tracing the execution of your code inside a custom sub or function and you are satisfied that the sub or function does not contain the error you are looking for. This completes the execution of the sub or function and returns you to the next line following the line where the sub or function was called. Run to Cursor Ctrl+F8 This command executes all code between the current yellow-highlighted line and the line containing the cursor. The line containing the cursor is then highlighted and the execution pauses. It is important to note that none of these four options \"skips\" code in the sense that portions of your code are not executed. All of the code is executed, but in some cases you may not see the step-by-step execution. If for some reason you want to actually skip one or more lines of code, you should set the cursor in the first line following the code you want to skip and then select the Debug|Set Next Statement command.","title":"Step Options"},{"location":"02_vba/09_debug/debug/#run-commands","text":"After stopping at a breakpoint and examining some code, you may wish to quickly finish all of your remaining lines of code, or execute all lines of code between the current line and the next breakpoint. You can do this using the Run command. There is a set of Run-Pause-Stop commands in the VB Editor menu. Command Symbol Action Run Execute the code from the current position to the next breakpoint or until the code is completed. Pause Pause the execution. This button can be used when your code appears to be stuck in an infinite loop. It causes the code execution to pause and the next line of code to be executed is highlighted. Stop This command can be used either when the code is running or when it is paused. It causes the execution to stop and everything is reset to the non-running state. The Run command can also be used as a shortcut to run a specific sub by putting the cursor in the sub and then selecting the Run button in the VB Editor. For example, this could be used to execute the code associated with a button without actually having to click the button.","title":"Run Commands"},{"location":"02_vba/09_debug/debug/#examining-variables-and-expressions","text":"When the code execution is paused, it is extremely helpful to examine the status of your variables, expressions, and objects. To examine the value of a variable, simply hover the cursor over the variable and the current value is displayed: You can also select part or all of an expression to see the value of the highlighted part: If you find yourself checking the value of a particular variable or expression repeatedly, you can select the variable or expression and then select the Debug|Add Watch... command. This opens the Watch window at the bottom of the VB Editor and displays the value of the variable or expression in the window. These values are constantly updated as the code is executed. If you add an array or object to the watch window, you can click the plus button to expand the object and view the values of object/array members. In this example, x and y are two arrays of doubles:","title":"Examining Variables and Expressions"},{"location":"02_vba/09_debug/debug/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Total Head Debug - Find a run-time error, logic error and syntax error for the code solving for the total head in the bernoulli equation. Easy total_head_debug.xlsm total_head_debug_key.xlsm Citation Machine - Debug the code so that a message box with the correct citation displays when the user clicks \"Create Citation.\" Medium citation_machine.xlsm citation_machine_key.xlsm Debugging - Debug the code that calculates three equations. Hard debugging.xlsm debugging_key.xlsm","title":"Exercises"},{"location":"02_vba/10_loops/loops/","text":"Loops - Writing Iterative Code There are many cases in programming where we need to perform some type of iteration. For example, maybe we need to loop through a column of cells until we find a blank cell. Or perhaps we need to iterate through a set of numbers in order to perform some kind of numerical calculation that can't be performed with a built-in Excel function. In this section we will review the various options available in VBA for writing loops and examine several example applications. Types of Loops There are three basic types of loops in VB: For Each... For i=... Do While|Until... Each type of loop has certain advantages and is best used in certain circumstances. However, in many cases multiple types will work and the choice of which loop to apply becomes a matter of personal preference. Each type is examined below. For Each... For each loops are used to loop through a collection of objects. This could include the cells in a range, the sheets in a workbook, or the shape objects associated with a particular sheet. The syntax is as follows: Dim myitem As vartype For Each myitem In mycollection statement(s) Next myitem In this case, mycollection refers to the collection of objects that we wish to loop through. myitem is a looping variable and vartype is the type corresponding to the individual objects in the collection. If you are ever in doubt as to what type to use, go ahead and use the Variant type. This works fine in most cases. The way the loop works is that the statement(s) are executed once for each object in the collection. During each loop iteration, myitem becomes an alias for the current object being referenced, so typically you do something with myitem in the statement(s). Next myitem marks the end of the loop and it increments the myitem alias to reference the next object in the collection. Once all the objects are visited, code execution moves to the next line of code following myitem. Here is a sample For Each... loop. The objective of the loop is to count how many negative numbers there are in the range B4:D20 . This code assumes that we have already declared an integer variable named numneg . Dim mycell As Range For Each mycell In Range(\"B4:D20\") If mycell.Value < 0 Then numneg = numneg + 1 End If Next mycell Here is another example. In this case, we wish to loop through all of the Shape objects associated with the current sheet (from the Shapes collection) and change the shape color to red. Dim sh As Shape For Each sh In Shapes sh.Fill.ForeColor.RGB = vbRed Next sh For i=... The For i=... loop is used when the iteration is based on a set of numbers. Specifically, you need to loop through a set of integers, starting with one number and ending at another. Here is the syntax: Dim i As Integer For i = Start To End [Step inc] statement(s) Next i The Step inc part is optional and will be explained below. The variable i is the looping variable and should always be declared as an Integer or Long type variable. Start and End represent the beginning and ending values of i. The first time through the loop, i is equal to Start and at the end of the loop, i is incremented to the next value. Eventually i is equal to End and that is the last iteration of the loop. Here is a simple example. This code writes the phrase \"Hello World\" to every cell in the range B3:B17 . Dim myrow As Integer For myrow = 3 To 17 Cells(myrow, 2) = \"Hello World\" Next myrow The first time through the loop, myrow = 3 and when the code execution encounters the Next myrow line, myrow is incremented to 4. This continues until myrow = 17. Once myrow is incremented to 18, the loop stops and code execution continues to the next line following the loop. By default, the Next i line will increment by one. However, you can change how the looping variable changes using the optional Step argument. For example, the following loop does the same thing as the loop above, but it starts at row 17 and goes backwards to row 3. Dim myrow As Integer For myrow = 17 To 3 Step -1 Cells(myrow, 2) = \"Hello World\" Next myrow The loops can be entirely independent of spreadsheet cells. The following loop computes the sum of all integers between 1 and 100. Dim i As Integer Dim sum As Integer For i = 1 To 100 sum = sum + i Next i Finally, it is possible to exit a For i=... loop at any time using the Exit For statement. This kicks you out of the loop and it moves the execution to the next statement immediately following the loop. For example, the following loop iterates through cells B3:B17 and writes \"Hello World\". However, if it encounters a non-empty cell in that range, it halts the loop. Dim myrow As Integer For myrow = 3 To 17 If Cells(myrow, 2) = \"\" Then Cells(myrow, 2) = \"Hello World\" Else Exit For End If Next myrow Do While|Until... The Do While|Until... loops are often referred to as simple \"do loops\". Do loops are extremely flexible and are generally used when you do not know beforehand how many iterations will be required. Therefore, the loop continues until some kind of condition is met. There are many ways in which a do loop can be formulated, but the general syntax is as follows: Do While|Until condition statement(s) Loop Or the condition part can be put at the end of the loop as follows: Do statement(s) Loop While|Until condition In other words, the statement(s) are executed repeatedly until some condition is met. If the condition starts out as true, the While option should be used. If the condition starts out as false, the Until option should be used. The following set of examples are based on this spreadsheet. The objective of the examples is to start at row 4, and loop through each of the cells in column A until an empty row is found. This type of loop is fairly common when you want to append something to the end of a table. We will now illustrate four different ways to solve this problem with a do loop. Method 1: Do While... In the first case, we will use the While option and test the condition at the top of the loop. Dim myrow As Integer myrow = 4 Do While Cells(myrow, 1) <> \"\" myrow = myrow + 1 Loop The objective of the loop is to look at each cell in column A starting at row 4. Each time through the loop, the myrow variable indicates the row number of the current row being examined. The row counter (myrow) is incremented in the body of the loop. The condition being tested is whether the current cell is NOT empty. The loop continues as long as this condition is true, hence the \"While\" statement. After the loop is completed, myrow will have a value of 21, indicating the row number of the first empty row following the table. Method 2: Do Until... The next example is very similar, but the condition is different. Dim myrow As Integer myrow = 4 Do Until Cells(myrow, 1) = \"\" myrow = myrow + 1 Loop In this case, we test to see if the current cell is empty, and we iterate until that condition is met. Once again, when the loop is finished, myrow will contain a value of 21. Method 3: Do ... Loop While In this case, we use the While option again, but we don't perform the test until the end of the loop. Dim myrow As Integer myrow = 3 '<--- Note the difference here Do myrow = myrow + 1 Loop While Cells(myrow, 1) <> \"\" This loop will result in the exact same result as Method 1, the only difference being that in this case, the loop is always executed at least once. With Method 1, it is possible that the condition would fail on the first test (an empty table for example) and the statement(s) inside the loop would never be executed. There are some cases where it is necessary to have the loop executed at least once. Note that since the counter is incremented once before we even begin to check it, we need to start the loop counter at 3 rather than 4. Method 4: Do ... Loop Until Finally, we can use the Until option at the end of the loop. Dim myrow As Integer myrow = 3 Do myrow = myrow + 1 Loop Until Cells(myrow, 1) = \"\" Please note that all four of these examples do essentially the same thing. Which approach you use in cases like this is entirely a matter of preference. Infinite Loops With do loops, one must be extremely careful in designing the exit conditions for the loop. If the conditional statement is wrong, or if you forget to do something in the body of the loop that would eventually lead to the exit condition being met, then you will encounter something called an \"infinite loop\". Here is an example: Dim myrow As Integer myrow = 4 Do While Cells(myrow, 1) <> \"\" MsgBox \"Hello World\" Loop This is similar to one of the loops above, but we have removed the myrow = myrow + 1 part. The condition is based on Cells(myrow, 1) eventually being empty, but it will never happen because myrow is never incremented. So it will keep checking cell A4 and displaying a message for all eternity (or until you kill Excel). If you accidentally write an infinite loop, Excel will appear to freeze when you run your code. In some cases, you can bring up the VB Editor window and select the pause button or press the Esc key to pause execution and then stop execution using the Stop button. Unfortunately, this does not always work so you need to kill Excel using the Task Manager (Ctrl-Alt-Delete). Whenever you are writing loops, you should always save your changes prior to running your code in case you end up with an infinite loop and have to kill Excel. If you don't save your changes, you may end up losing some code you have written. Exit Do Statement In some cases it is useful to exit a do loop in the middle of the loop. This can be accomplished using the Exit Do statement. For example: Dim myrow As Integer myrow = 4 Do Until myrow = 32768 If Cells(myrow, 1) = \"\" Then Exit Do Else myrow = myrow + 1 End If Loop In this case, the loop achieves the same result as the loops above. When an Exit Do statement is encountered, the code execution goes to the first line following the end of the loop. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Loops - A simple exercise running through each of the basic loops. Easy loops.xlsm loops_key.xlsm Counting Odds and Evens - Create a loop that counts the number of odd and even numbers in a column. Medium counting_odds_and_evens.xlsm counting_odds_and_evens_key.xlsm Digital Storage - Use loops to aid in converting code to and from base ten data storage. Hard digital_storage.xlsm digital_storage_key.xlsm","title":"Loops"},{"location":"02_vba/10_loops/loops/#loops-writing-iterative-code","text":"There are many cases in programming where we need to perform some type of iteration. For example, maybe we need to loop through a column of cells until we find a blank cell. Or perhaps we need to iterate through a set of numbers in order to perform some kind of numerical calculation that can't be performed with a built-in Excel function. In this section we will review the various options available in VBA for writing loops and examine several example applications.","title":"Loops - Writing Iterative Code"},{"location":"02_vba/10_loops/loops/#types-of-loops","text":"There are three basic types of loops in VB: For Each... For i=... Do While|Until... Each type of loop has certain advantages and is best used in certain circumstances. However, in many cases multiple types will work and the choice of which loop to apply becomes a matter of personal preference. Each type is examined below.","title":"Types of Loops"},{"location":"02_vba/10_loops/loops/#for-each","text":"For each loops are used to loop through a collection of objects. This could include the cells in a range, the sheets in a workbook, or the shape objects associated with a particular sheet. The syntax is as follows: Dim myitem As vartype For Each myitem In mycollection statement(s) Next myitem In this case, mycollection refers to the collection of objects that we wish to loop through. myitem is a looping variable and vartype is the type corresponding to the individual objects in the collection. If you are ever in doubt as to what type to use, go ahead and use the Variant type. This works fine in most cases. The way the loop works is that the statement(s) are executed once for each object in the collection. During each loop iteration, myitem becomes an alias for the current object being referenced, so typically you do something with myitem in the statement(s). Next myitem marks the end of the loop and it increments the myitem alias to reference the next object in the collection. Once all the objects are visited, code execution moves to the next line of code following myitem. Here is a sample For Each... loop. The objective of the loop is to count how many negative numbers there are in the range B4:D20 . This code assumes that we have already declared an integer variable named numneg . Dim mycell As Range For Each mycell In Range(\"B4:D20\") If mycell.Value < 0 Then numneg = numneg + 1 End If Next mycell Here is another example. In this case, we wish to loop through all of the Shape objects associated with the current sheet (from the Shapes collection) and change the shape color to red. Dim sh As Shape For Each sh In Shapes sh.Fill.ForeColor.RGB = vbRed Next sh","title":"For Each..."},{"location":"02_vba/10_loops/loops/#for-i","text":"The For i=... loop is used when the iteration is based on a set of numbers. Specifically, you need to loop through a set of integers, starting with one number and ending at another. Here is the syntax: Dim i As Integer For i = Start To End [Step inc] statement(s) Next i The Step inc part is optional and will be explained below. The variable i is the looping variable and should always be declared as an Integer or Long type variable. Start and End represent the beginning and ending values of i. The first time through the loop, i is equal to Start and at the end of the loop, i is incremented to the next value. Eventually i is equal to End and that is the last iteration of the loop. Here is a simple example. This code writes the phrase \"Hello World\" to every cell in the range B3:B17 . Dim myrow As Integer For myrow = 3 To 17 Cells(myrow, 2) = \"Hello World\" Next myrow The first time through the loop, myrow = 3 and when the code execution encounters the Next myrow line, myrow is incremented to 4. This continues until myrow = 17. Once myrow is incremented to 18, the loop stops and code execution continues to the next line following the loop. By default, the Next i line will increment by one. However, you can change how the looping variable changes using the optional Step argument. For example, the following loop does the same thing as the loop above, but it starts at row 17 and goes backwards to row 3. Dim myrow As Integer For myrow = 17 To 3 Step -1 Cells(myrow, 2) = \"Hello World\" Next myrow The loops can be entirely independent of spreadsheet cells. The following loop computes the sum of all integers between 1 and 100. Dim i As Integer Dim sum As Integer For i = 1 To 100 sum = sum + i Next i Finally, it is possible to exit a For i=... loop at any time using the Exit For statement. This kicks you out of the loop and it moves the execution to the next statement immediately following the loop. For example, the following loop iterates through cells B3:B17 and writes \"Hello World\". However, if it encounters a non-empty cell in that range, it halts the loop. Dim myrow As Integer For myrow = 3 To 17 If Cells(myrow, 2) = \"\" Then Cells(myrow, 2) = \"Hello World\" Else Exit For End If Next myrow","title":"For i=..."},{"location":"02_vba/10_loops/loops/#do-whileuntil","text":"The Do While|Until... loops are often referred to as simple \"do loops\". Do loops are extremely flexible and are generally used when you do not know beforehand how many iterations will be required. Therefore, the loop continues until some kind of condition is met. There are many ways in which a do loop can be formulated, but the general syntax is as follows: Do While|Until condition statement(s) Loop Or the condition part can be put at the end of the loop as follows: Do statement(s) Loop While|Until condition In other words, the statement(s) are executed repeatedly until some condition is met. If the condition starts out as true, the While option should be used. If the condition starts out as false, the Until option should be used. The following set of examples are based on this spreadsheet. The objective of the examples is to start at row 4, and loop through each of the cells in column A until an empty row is found. This type of loop is fairly common when you want to append something to the end of a table. We will now illustrate four different ways to solve this problem with a do loop.","title":"Do While|Until..."},{"location":"02_vba/10_loops/loops/#method-1-do-while","text":"In the first case, we will use the While option and test the condition at the top of the loop. Dim myrow As Integer myrow = 4 Do While Cells(myrow, 1) <> \"\" myrow = myrow + 1 Loop The objective of the loop is to look at each cell in column A starting at row 4. Each time through the loop, the myrow variable indicates the row number of the current row being examined. The row counter (myrow) is incremented in the body of the loop. The condition being tested is whether the current cell is NOT empty. The loop continues as long as this condition is true, hence the \"While\" statement. After the loop is completed, myrow will have a value of 21, indicating the row number of the first empty row following the table.","title":"Method 1: Do While..."},{"location":"02_vba/10_loops/loops/#method-2-do-until","text":"The next example is very similar, but the condition is different. Dim myrow As Integer myrow = 4 Do Until Cells(myrow, 1) = \"\" myrow = myrow + 1 Loop In this case, we test to see if the current cell is empty, and we iterate until that condition is met. Once again, when the loop is finished, myrow will contain a value of 21.","title":"Method 2: Do Until..."},{"location":"02_vba/10_loops/loops/#method-3-do-loop-while","text":"In this case, we use the While option again, but we don't perform the test until the end of the loop. Dim myrow As Integer myrow = 3 '<--- Note the difference here Do myrow = myrow + 1 Loop While Cells(myrow, 1) <> \"\" This loop will result in the exact same result as Method 1, the only difference being that in this case, the loop is always executed at least once. With Method 1, it is possible that the condition would fail on the first test (an empty table for example) and the statement(s) inside the loop would never be executed. There are some cases where it is necessary to have the loop executed at least once. Note that since the counter is incremented once before we even begin to check it, we need to start the loop counter at 3 rather than 4.","title":"Method 3: Do ... Loop While"},{"location":"02_vba/10_loops/loops/#method-4-do-loop-until","text":"Finally, we can use the Until option at the end of the loop. Dim myrow As Integer myrow = 3 Do myrow = myrow + 1 Loop Until Cells(myrow, 1) = \"\" Please note that all four of these examples do essentially the same thing. Which approach you use in cases like this is entirely a matter of preference.","title":"Method 4: Do ... Loop Until"},{"location":"02_vba/10_loops/loops/#infinite-loops","text":"With do loops, one must be extremely careful in designing the exit conditions for the loop. If the conditional statement is wrong, or if you forget to do something in the body of the loop that would eventually lead to the exit condition being met, then you will encounter something called an \"infinite loop\". Here is an example: Dim myrow As Integer myrow = 4 Do While Cells(myrow, 1) <> \"\" MsgBox \"Hello World\" Loop This is similar to one of the loops above, but we have removed the myrow = myrow + 1 part. The condition is based on Cells(myrow, 1) eventually being empty, but it will never happen because myrow is never incremented. So it will keep checking cell A4 and displaying a message for all eternity (or until you kill Excel). If you accidentally write an infinite loop, Excel will appear to freeze when you run your code. In some cases, you can bring up the VB Editor window and select the pause button or press the Esc key to pause execution and then stop execution using the Stop button. Unfortunately, this does not always work so you need to kill Excel using the Task Manager (Ctrl-Alt-Delete). Whenever you are writing loops, you should always save your changes prior to running your code in case you end up with an infinite loop and have to kill Excel. If you don't save your changes, you may end up losing some code you have written.","title":"Infinite Loops"},{"location":"02_vba/10_loops/loops/#exit-do-statement","text":"In some cases it is useful to exit a do loop in the middle of the loop. This can be accomplished using the Exit Do statement. For example: Dim myrow As Integer myrow = 4 Do Until myrow = 32768 If Cells(myrow, 1) = \"\" Then Exit Do Else myrow = myrow + 1 End If Loop In this case, the loop achieves the same result as the loops above. When an Exit Do statement is encountered, the code execution goes to the first line following the end of the loop.","title":"Exit Do Statement"},{"location":"02_vba/10_loops/loops/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Loops - A simple exercise running through each of the basic loops. Easy loops.xlsm loops_key.xlsm Counting Odds and Evens - Create a loop that counts the number of odd and even numbers in a column. Medium counting_odds_and_evens.xlsm counting_odds_and_evens_key.xlsm Digital Storage - Use loops to aid in converting code to and from base ten data storage. Hard digital_storage.xlsm digital_storage_key.xlsm","title":"Exercises"},{"location":"02_vba/11_arrays/arrays/","text":"Using Arrays to Store Sets of Data In many applications (especially in engineering), it is necessary to work with variables containing a set of related data. For example, one may have a list (vector) or matrix of numbers that need to be stored and used as part of some type of linear algebra calculations. Suppose you have a vector called \"x\" with ten double values. One solution would be to declare your variables like this: Dim x1 As Double Dim x2 As Double Dim x3 As Double Dim x4 As Double Dim x5 As Double Dim x6 As Double Dim x7 As Double Dim x8 As Double Dim x9 As Double Dim x10 As Double Then in your code, you would reference the variables independently: x1 = Cells(4,1) x2 = Cells(4,2) ... x8 = x7 * Sin(x6) + 2 This works, but it is not an efficient approach, especially for cases where you have hundreds or thousands of items in the vector. One-Dimensional Arrays A more efficient way to handle the problem described above is to declare a one-dimensional array variable as follows: Dim x(1 To 10) As Double Then the elements of the array can be referenced like this: x(1) = Cells(4,1) x(2) = Cells(4,2) ... x(8) = x(7) * Sin(x(6)) + 2 One of the benefits of using arrays is that they can be easily traversed using the For i = ... style of loop. For example, the following code declares an array of 1000 doubles and initializes the value of each item in the array to = 1.5. Dim v(1 To 1000) As Double Dim i As Integer For i = 1 To 1000 v(i) = 1.5 Next i When declaring arrays, we can define the lower and upper bounds of the array indices. For example: Dim p(5 To 15) As Integer p(5) = 1 p(6) = 2 ... p(14) = 12 p(15) = p(14) * p(12) It is also possible to omit the first part of the array bounds: Dim x(100) As Double But if you do so, this declares an array of 101 items! The array bounds are from 0 to 100. Multi-Dimensional Arrays In some cases, it is useful to declare multi-dimensional arrays. For example, if we want to declare a variable to store a matrix with 20 rows and 15 columns, we could do the following: Dim m(1 To 20, 1 To 15) As Double And the individual elements of the arrays are referenced like this: m(1, 1) = 0.5 m(13, 5) = m(2, 12) * 2 To traverse the elements of the array, we can use a nested set of For i = ... loops. Dim i As Integer, j As Integer For i = 1 To 20 For j = 1 To 15 m(i, j) = 1 / m(i, j) Next j Next i Arrays are not limited to two dimensions. You can use three, four, or more dimensions if you like. Dim q(1 To 2, 1 To 100, 1 To 50) As Double q(1, 40, 25) = 4.5 The maximum number of dimensions you can use is 32. Dynamic Arrays - The ReDim Statement When you declare an array using the Dim statement, the dimension bounds must be constants. However, there are cases when it is necessary to declare the bounds (especially the upper bound) using a variable. In other words, you may not know until you run your code how big the array needs to be. In this case, you should use the ReDim statement: Dim n As Integer n = ... '<--- Do something to determine how big the array needs to be ReDim x(1 To n) As Double For i = 1 To n x(i) = ... Next i A classic example involving spreadsheets is when we want to read a column of values into an array, but there may be any number of items in the column. We can either just guess what the maximum size could possibly be and declare a really big array, or we could write a short loop to count the number of items in the array and then declare an array just big enough to read the values. For example, consider the following range of cells in a worksheet: Suppose we wanted to read these two columns of numbers into two arrays, x and f , in order to perform some numerical calculations. We could declare the arrays to be 24 items long using the Dim statement and just allow for some empty space. Or we could loop through the cells first in order to find out exactly how many items are in the list and then declare two arrays to the exact size needed and then load the values from the cells into the array as shown here: Dim n As Integer Dim myrow As Integer 'Find out how many items are in the column myrow = 6 Do While Cells(myrow, 2) <> \"\" myrow = myrow + 1 Loop n = myrow - 5 ReDim x(1 To n) As Double ReDim f(1 To n) As Double 'Copy the values into the arrays Dim i As Integer For i = 1 To n x(i) = Cells(i + 5, 2) f(i) = Cells(i + 5, 3) Next i At this point, the two arrays could be used directly in formulas and could be indexed from 1 to n. Another case where the ReDim statement can be used is when you need to resize an array (make it larger or smaller) during run-time. For example: n = 1000 ReDim x(1 To n) As Double ... n = n + 100 ReDim x(1 To n) As Double After the last line, the array would contain 1100 items. If your array contains information that you do not want to lose, you should use the Preserve keyword. n = 1000 ReDim x(1 To n) As Double ... n = n + 100 ReDim Preserve x(1 To n) As Double This ensures that the items stored in the array are not lost when the array is resized. Arrays vs. Ranges You may have noticed that a 2D array is very similar to a range: both have rows and columns. In fact, when we use the Cells object to reference a set of cells using row and column indices like this: Cells(4, 5) = \"Hello\" or For myrow = 6 To 20 Cells(myrow, 2) = \"\" Next myrow We are essentially using the Cells object as a 2D array. So the question arises, if you already have your data in a range of cells, why not just reference them directly using the Cells object as opposed to loading the values into a 1D or 2D array? In some cases, it is just a matter of personal preference. In other cases, the code can be much cleaner and easier to follow when you first load the values into arrays. For example, consider the Numeric Integration example in the previous section above. After loading the two columns into the x and f arrays, the calculations performed to numerically integrate the function defined by the numbers mimics the corresponding mathematical formula because the arrays are indexed from 1 to n. If one were to do the same calculations using the Cells object, it would be necessary to offset the row and column indices to match the location where the cells are stored on the worksheet. This makes the code much more difficult to write and debug. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Point Identifier - Use an array to select the correct point from the list of coordinates. Easy point_identifier.xlsm point_identifier_key.xlsm Dot Product - Store the columns of a matrix into vector arrays and compute the dot product. Medium dot_product.xlsm dot_product_key.xlsm Transposition - Store the values of a matrix into an array and pass the arrayed values into a loop to return the transpose of the initial matrix. Hard transposition.xlsm transposition_key.xlsm","title":"Arrays"},{"location":"02_vba/11_arrays/arrays/#using-arrays-to-store-sets-of-data","text":"In many applications (especially in engineering), it is necessary to work with variables containing a set of related data. For example, one may have a list (vector) or matrix of numbers that need to be stored and used as part of some type of linear algebra calculations. Suppose you have a vector called \"x\" with ten double values. One solution would be to declare your variables like this: Dim x1 As Double Dim x2 As Double Dim x3 As Double Dim x4 As Double Dim x5 As Double Dim x6 As Double Dim x7 As Double Dim x8 As Double Dim x9 As Double Dim x10 As Double Then in your code, you would reference the variables independently: x1 = Cells(4,1) x2 = Cells(4,2) ... x8 = x7 * Sin(x6) + 2 This works, but it is not an efficient approach, especially for cases where you have hundreds or thousands of items in the vector.","title":"Using Arrays to Store Sets of Data"},{"location":"02_vba/11_arrays/arrays/#one-dimensional-arrays","text":"A more efficient way to handle the problem described above is to declare a one-dimensional array variable as follows: Dim x(1 To 10) As Double Then the elements of the array can be referenced like this: x(1) = Cells(4,1) x(2) = Cells(4,2) ... x(8) = x(7) * Sin(x(6)) + 2 One of the benefits of using arrays is that they can be easily traversed using the For i = ... style of loop. For example, the following code declares an array of 1000 doubles and initializes the value of each item in the array to = 1.5. Dim v(1 To 1000) As Double Dim i As Integer For i = 1 To 1000 v(i) = 1.5 Next i When declaring arrays, we can define the lower and upper bounds of the array indices. For example: Dim p(5 To 15) As Integer p(5) = 1 p(6) = 2 ... p(14) = 12 p(15) = p(14) * p(12) It is also possible to omit the first part of the array bounds: Dim x(100) As Double But if you do so, this declares an array of 101 items! The array bounds are from 0 to 100.","title":"One-Dimensional Arrays"},{"location":"02_vba/11_arrays/arrays/#multi-dimensional-arrays","text":"In some cases, it is useful to declare multi-dimensional arrays. For example, if we want to declare a variable to store a matrix with 20 rows and 15 columns, we could do the following: Dim m(1 To 20, 1 To 15) As Double And the individual elements of the arrays are referenced like this: m(1, 1) = 0.5 m(13, 5) = m(2, 12) * 2 To traverse the elements of the array, we can use a nested set of For i = ... loops. Dim i As Integer, j As Integer For i = 1 To 20 For j = 1 To 15 m(i, j) = 1 / m(i, j) Next j Next i Arrays are not limited to two dimensions. You can use three, four, or more dimensions if you like. Dim q(1 To 2, 1 To 100, 1 To 50) As Double q(1, 40, 25) = 4.5 The maximum number of dimensions you can use is 32.","title":"Multi-Dimensional Arrays"},{"location":"02_vba/11_arrays/arrays/#dynamic-arrays-the-redim-statement","text":"When you declare an array using the Dim statement, the dimension bounds must be constants. However, there are cases when it is necessary to declare the bounds (especially the upper bound) using a variable. In other words, you may not know until you run your code how big the array needs to be. In this case, you should use the ReDim statement: Dim n As Integer n = ... '<--- Do something to determine how big the array needs to be ReDim x(1 To n) As Double For i = 1 To n x(i) = ... Next i A classic example involving spreadsheets is when we want to read a column of values into an array, but there may be any number of items in the column. We can either just guess what the maximum size could possibly be and declare a really big array, or we could write a short loop to count the number of items in the array and then declare an array just big enough to read the values. For example, consider the following range of cells in a worksheet: Suppose we wanted to read these two columns of numbers into two arrays, x and f , in order to perform some numerical calculations. We could declare the arrays to be 24 items long using the Dim statement and just allow for some empty space. Or we could loop through the cells first in order to find out exactly how many items are in the list and then declare two arrays to the exact size needed and then load the values from the cells into the array as shown here: Dim n As Integer Dim myrow As Integer 'Find out how many items are in the column myrow = 6 Do While Cells(myrow, 2) <> \"\" myrow = myrow + 1 Loop n = myrow - 5 ReDim x(1 To n) As Double ReDim f(1 To n) As Double 'Copy the values into the arrays Dim i As Integer For i = 1 To n x(i) = Cells(i + 5, 2) f(i) = Cells(i + 5, 3) Next i At this point, the two arrays could be used directly in formulas and could be indexed from 1 to n. Another case where the ReDim statement can be used is when you need to resize an array (make it larger or smaller) during run-time. For example: n = 1000 ReDim x(1 To n) As Double ... n = n + 100 ReDim x(1 To n) As Double After the last line, the array would contain 1100 items. If your array contains information that you do not want to lose, you should use the Preserve keyword. n = 1000 ReDim x(1 To n) As Double ... n = n + 100 ReDim Preserve x(1 To n) As Double This ensures that the items stored in the array are not lost when the array is resized.","title":"Dynamic Arrays - The ReDim Statement"},{"location":"02_vba/11_arrays/arrays/#arrays-vs-ranges","text":"You may have noticed that a 2D array is very similar to a range: both have rows and columns. In fact, when we use the Cells object to reference a set of cells using row and column indices like this: Cells(4, 5) = \"Hello\" or For myrow = 6 To 20 Cells(myrow, 2) = \"\" Next myrow We are essentially using the Cells object as a 2D array. So the question arises, if you already have your data in a range of cells, why not just reference them directly using the Cells object as opposed to loading the values into a 1D or 2D array? In some cases, it is just a matter of personal preference. In other cases, the code can be much cleaner and easier to follow when you first load the values into arrays. For example, consider the Numeric Integration example in the previous section above. After loading the two columns into the x and f arrays, the calculations performed to numerically integrate the function defined by the numbers mimics the corresponding mathematical formula because the arrays are indexed from 1 to n. If one were to do the same calculations using the Cells object, it would be necessary to offset the row and column indices to match the location where the cells are stored on the worksheet. This makes the code much more difficult to write and debug.","title":"Arrays vs. Ranges"},{"location":"02_vba/11_arrays/arrays/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Point Identifier - Use an array to select the correct point from the list of coordinates. Easy point_identifier.xlsm point_identifier_key.xlsm Dot Product - Store the columns of a matrix into vector arrays and compute the dot product. Medium dot_product.xlsm dot_product_key.xlsm Transposition - Store the values of a matrix into an array and pass the arrayed values into a loop to return the transpose of the initial matrix. Hard transposition.xlsm transposition_key.xlsm","title":"Exercises"},{"location":"02_vba/12_strings/strings/","text":"Using String Functions A string is a sequence of one or more text characters. A string constant is a sequence of characters in code delimited by double quotes (\"Hello world\"). A string variable is a variable used to store text. String variables are dynamically allocated to accommodate the amount of text you store in each string. They can hold up to two billion characters! Concatenation Recall that we can combine (concatenate) two or more strings using the & operator. For example, the code: Dim str1 As String, str2 As String str1 = \"Enter to learn\" str2 = \"go forth to serve\" MsgBox str1 & \", \" & str2 Would produce: Note that this example involves both string variables (str1, str2) and string constants (\", \"). String Functions In many cases, we need to manipulate string constants and variables. VB provides a rich suite of functions for manipulating strings. Some of the more widely used string functions are as follows: Function Description Example Result Left(str, numchar) Extracts the specified number of characters from the left side of the string str . mystr = Left(\"Hello World\", 5) \"Hello\" Right(str, numchar) Extracts the specified number of characters from the right side of the string str . mystr = Right(\"Hello World\", 5) \"World\" Mid(str, startchar, [numchar]) Extracts a string of length numchar from the middle of str , starting at startchar . If numchar is omitted, the entire right-hand portion of the string, beginning at startchar, is extracted. mystr = Mid(\"Hello World\", 7, 1) mystr = Mid(\"Hello World\", 7) \"W\" \"World\" Len(str) Returns the length of str . n = Len(\"Hello World\") 11 UCase(str) Converts the string to all uppercase characters. mystr = UCase(\"Hello World\") \"HELLO WORLD\" LCase(str) Converts the string to all lowercase characters. mystr = LCase(\"Hello World\") \"hello world\" LTrim(str) Returns a copy of the string without leading spaces mystr = LTrim(\" Hello \") \"Hello \" RTrim(str) Returns a copy of the string without trailing spaces mystr = RTrim(\" Hello \") \" Hello\" Trim(str) Returns a copy of the string without leading or trailing spaces mystr = Trim(\" Hello \") \"Hello\" StrReverse(str) Returns a copy of the string in reverse order mystr = StrReverse(\"Hello World\") \"dlroW olleH\" Replace(expression, find, replace, [start], [count], [compare]) Replaces each instance of \" find \" with \" replace \" in \" expression \". mystr = Replace(\"Hello World\", \"Hello\", \"Goodbye\") mystr = Replace(\"Hello World\", \"l\", \"\") mystr = Replace(\"Hello World\", \"o\", \"\", 1, 1) mystr = Replace(\"Hello World\", \"o\", \"\", 1) mystr = Replace(\"Hello World\", \"l\", \"\", 6) \"Goodbye World\" \"Heo Word\" \"Hell World\" \"Hell Wrld\" \"Hello Word\" InStr([start], string1, string2, [compare]) Returns an integer representing the position of string2 inside string1 . Start is an optional starting location (if omitted, search starts at position 1). If string2 is not found in string1, the function returns zero. n = InStr(1, \"Hello World\", \"W\") n = InStr(1, \"Hello World\", \"N\") 7 0 StrConv(string, conversion, [LCID]) Returns a copy of string after modifying the string based on the conversion argument. The conversion argument should be a vb constant with options including vbUpperCase, vbLowerCase, vbProperCase. mystr = StrConv(\"Hello World\", vbUpperCase) mystr = StrConv(\"Hello World\", vbLowerCase) mystr = StrConv(\"hello world\", vbProperCase) HELLO WORLD hello world Hello World These functions can be combined in creative ways to achieve a variety of results. For example, consider the following table: Suppose we wanted to populate the third column with full names. We could do that with the following code: Dim first As String Dim last As String Dim full As String For myrow = 2 To 5 first = Cells(myrow, 2) last = Cells(myrow, 1) full = first & \" \" & last Cells(myrow, 3) = full Next myrow Resulting in: If we wanted the full name to be \"last, first\" format, we could restructure our code as follows: For myrow = 2 To 5 first = Cells(myrow, 2) last = Cells(myrow, 1) full = last & \", \" & first Cells(myrow, 3) = full Next myrow Resulting in: Now suppose we wanted the full name to be in all caps and we want to ensure that all leading and trailing spaces (if any) are removed. We could add references to string functions as follows: For myrow = 2 To 5 first = Cells(myrow, 2) last = Cells(myrow, 1) full = UCase(Trim(last) & \", \" & Trim(first)) Cells(myrow, 3) = full Next myrow Resulting in: Sample Code The workbook associated with the examples on this page can be downloaded here: sample code.xlsm Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Citation - From a range of values, create a citation as a string and display the result as a message box. Easy citation.xlsm citation_key.xlsm Concatenation - By using concatenation, create a madlib generator. Easy concatenation.xlsm concatenation_key.xlsm Secret Code - Use string functions to create a secret code that only you will know how to decipher. Medium secret_code.xlsm secret_code_key.xlsm URL Deconstruct - Use a variety of string functions to deconstruct website URL addresses into their respective parts. Hard url_deconstruct.xlsm url_deconstruct_key.xlsm","title":"Strings"},{"location":"02_vba/12_strings/strings/#using-string-functions","text":"A string is a sequence of one or more text characters. A string constant is a sequence of characters in code delimited by double quotes (\"Hello world\"). A string variable is a variable used to store text. String variables are dynamically allocated to accommodate the amount of text you store in each string. They can hold up to two billion characters!","title":"Using String Functions"},{"location":"02_vba/12_strings/strings/#concatenation","text":"Recall that we can combine (concatenate) two or more strings using the & operator. For example, the code: Dim str1 As String, str2 As String str1 = \"Enter to learn\" str2 = \"go forth to serve\" MsgBox str1 & \", \" & str2 Would produce: Note that this example involves both string variables (str1, str2) and string constants (\", \").","title":"Concatenation"},{"location":"02_vba/12_strings/strings/#string-functions","text":"In many cases, we need to manipulate string constants and variables. VB provides a rich suite of functions for manipulating strings. Some of the more widely used string functions are as follows: Function Description Example Result Left(str, numchar) Extracts the specified number of characters from the left side of the string str . mystr = Left(\"Hello World\", 5) \"Hello\" Right(str, numchar) Extracts the specified number of characters from the right side of the string str . mystr = Right(\"Hello World\", 5) \"World\" Mid(str, startchar, [numchar]) Extracts a string of length numchar from the middle of str , starting at startchar . If numchar is omitted, the entire right-hand portion of the string, beginning at startchar, is extracted. mystr = Mid(\"Hello World\", 7, 1) mystr = Mid(\"Hello World\", 7) \"W\" \"World\" Len(str) Returns the length of str . n = Len(\"Hello World\") 11 UCase(str) Converts the string to all uppercase characters. mystr = UCase(\"Hello World\") \"HELLO WORLD\" LCase(str) Converts the string to all lowercase characters. mystr = LCase(\"Hello World\") \"hello world\" LTrim(str) Returns a copy of the string without leading spaces mystr = LTrim(\" Hello \") \"Hello \" RTrim(str) Returns a copy of the string without trailing spaces mystr = RTrim(\" Hello \") \" Hello\" Trim(str) Returns a copy of the string without leading or trailing spaces mystr = Trim(\" Hello \") \"Hello\" StrReverse(str) Returns a copy of the string in reverse order mystr = StrReverse(\"Hello World\") \"dlroW olleH\" Replace(expression, find, replace, [start], [count], [compare]) Replaces each instance of \" find \" with \" replace \" in \" expression \". mystr = Replace(\"Hello World\", \"Hello\", \"Goodbye\") mystr = Replace(\"Hello World\", \"l\", \"\") mystr = Replace(\"Hello World\", \"o\", \"\", 1, 1) mystr = Replace(\"Hello World\", \"o\", \"\", 1) mystr = Replace(\"Hello World\", \"l\", \"\", 6) \"Goodbye World\" \"Heo Word\" \"Hell World\" \"Hell Wrld\" \"Hello Word\" InStr([start], string1, string2, [compare]) Returns an integer representing the position of string2 inside string1 . Start is an optional starting location (if omitted, search starts at position 1). If string2 is not found in string1, the function returns zero. n = InStr(1, \"Hello World\", \"W\") n = InStr(1, \"Hello World\", \"N\") 7 0 StrConv(string, conversion, [LCID]) Returns a copy of string after modifying the string based on the conversion argument. The conversion argument should be a vb constant with options including vbUpperCase, vbLowerCase, vbProperCase. mystr = StrConv(\"Hello World\", vbUpperCase) mystr = StrConv(\"Hello World\", vbLowerCase) mystr = StrConv(\"hello world\", vbProperCase) HELLO WORLD hello world Hello World These functions can be combined in creative ways to achieve a variety of results. For example, consider the following table: Suppose we wanted to populate the third column with full names. We could do that with the following code: Dim first As String Dim last As String Dim full As String For myrow = 2 To 5 first = Cells(myrow, 2) last = Cells(myrow, 1) full = first & \" \" & last Cells(myrow, 3) = full Next myrow Resulting in: If we wanted the full name to be \"last, first\" format, we could restructure our code as follows: For myrow = 2 To 5 first = Cells(myrow, 2) last = Cells(myrow, 1) full = last & \", \" & first Cells(myrow, 3) = full Next myrow Resulting in: Now suppose we wanted the full name to be in all caps and we want to ensure that all leading and trailing spaces (if any) are removed. We could add references to string functions as follows: For myrow = 2 To 5 first = Cells(myrow, 2) last = Cells(myrow, 1) full = UCase(Trim(last) & \", \" & Trim(first)) Cells(myrow, 3) = full Next myrow Resulting in:","title":"String Functions"},{"location":"02_vba/12_strings/strings/#sample-code","text":"The workbook associated with the examples on this page can be downloaded here: sample code.xlsm","title":"Sample Code"},{"location":"02_vba/12_strings/strings/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Citation - From a range of values, create a citation as a string and display the result as a message box. Easy citation.xlsm citation_key.xlsm Concatenation - By using concatenation, create a madlib generator. Easy concatenation.xlsm concatenation_key.xlsm Secret Code - Use string functions to create a secret code that only you will know how to decipher. Medium secret_code.xlsm secret_code_key.xlsm URL Deconstruct - Use a variety of string functions to deconstruct website URL addresses into their respective parts. Hard url_deconstruct.xlsm url_deconstruct_key.xlsm","title":"Exercises"},{"location":"02_vba/13_userforms/userforms/","text":"Creating Custom User Forms Occasionally it is useful to prompt the user with a user form and wait for the user to enter some information to the user form before proceeding to execute some code. In many cases, this can be accomplished with MsgBox/InputBox , but there are other cases where we need more detailed information and it is not convenient to pull that information from the cells on a sheet. In such cases, it is possible to create a custom user form containing a set of controls. To illustrate the process of using a custom user form, assume that we have a workbook where we need to routinely add new sheets to the workbook, but rather than adding blank sheets, we want the sheets to be copied from one of three pre-defined templates (stored as hidden sheets). You can download a copy of the spreadsheet used in this example by clicking here . Creating the Form The first step is to create the user form. To do this, go to the VB Editor and right-click in the empty space in the project explorer window and select Insert|UserForm. This will create a new empty user form and launch the control toolbox: Next, we will change the name of the user form and change the user form title (default = \"UserForm1\"). We do this by clicking on the Properties button in the VB Editor menu. This will dock the Properties window just below the project explorer window. Change the name to \"frmAddSheet\". The prefix \"frm\" identifies the object in code as a user form and the \"AddSheet\" part makes the name descriptive of the user form's objective. Next, change the Caption property to \"New Sheet Options\" (or something similarly descriptive). Note that the caption appears in the form title bar. Now we are ready to add controls to the sheet. Fortunately, this process is identical to the manner in which controls are added to sheets . Add a set of controls to create a layout as follows. Note that you can use the handles on the sides and corners of the user form to resize the form. The text strings (\"Sheet title\", \"Template:\") are created with label-type controls. Note that the value property of the checkbox has been set to true because we want this option to be on by default. At any time while editing the sheet, you can test to see how the sheet behaves by pressing the Run button in the VB Editor menu. To close the form, click on the red X in the upper right corner. Launching the Form The next thing we need to do is create some way to launch our form. In this case, we will add a button somewhere on the main sheet of our workbook as follows: Note the use of the ellipsis on the button title (...). This should be added to a button caption whenever the button is used to bring up a user form. This is standard user interface protocol. To make the button launch the form, double-click on the button in design mode and type the code for the click event as follows: Private Sub cmdAddSheet_Click() frmAddSheet.Show End Sub We are calling the .Show method which launches the sheet. Exit design mode and test your button. Writing the User Form Code Finally, we will write the code associated with the user form. While it is possible to write code associated with the click event for each control, we don't need to do anything while the user is interacting with the controls on the main part of the form. The only controls that need code are the OK and Cancel buttons. For the Cancel button, we will simply write code to make the form go away. For the OK button, we will write code that makes the form go away and then it will use the selections in the form to guide the creation of a new sheet from a template. For the Cancel button, go to the VB Editor and double-click on the Cancel button. This will bring up the code window for the form. Type the following: Private Sub cmdCancel_Click() frmAddSheet.Hide End Sub This executes the .Hide method to make the form go away. Now we need to return to the form editor window. To make it appear again, click on the second icon at the top of the Project Explorer. You can switch back to the code window by clicking on the first icon . You can also make the control view appear by double-clicking on the form in the Project Explorer. To write the code associated with the OK button, double-click on the OK button and write the following. Note how the control names are used when the sheet is copied. (Note: this assumes that you have three extra sheets named \"Template-CI\", \"Template-CO\", and \"Template-WL\" and that the \"Add Sheet...\" button is on a sheet named \"Main\"). Private Sub cmdOK_Click() Dim template As String 'Hide the sheet frmAddSheet.Hide 'Determine which template was selected. If optCustomerInvoice Then template = \"Template-CI\" ElseIf optChangeOrder Then template = \"Template-CO\" Else 'Work log template = \"Template-WL\" End If 'Copy the template to create a new sheet. Sheets(template).Select Sheets(template).Copy After:=Sheets(Sheets.Count) 'Make the sheet visible in case the template is hidden ActiveSheet.Visible = xlSheetVisible 'Rename the sheet ActiveSheet.Name = txtSheetTitle 'Bring main sheet back to front if necessary If chkBringToFront = False Then Sheets(\"Main\").Select End If End Sub That's it! Creating custom user forms is easy and fun. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Battleship - By creating a user form, the user will be able to begin playing Battleship vs the computer. Easy battleship.xlsm battleship_key.xlsm Rainfall Log - Create a user form to log recent rainfall and compute the total rainfall to date. Medium rainfall_log.xlsm rainfall_log_key.xlsm Recruiting Spreadsheet - Create a user form that allows the user to insert prospective employees into a recruiting table. Medium recruiting_spreadsheet.xlsm recruiting_spreadsheet_key.xlsm Advanced Recruiting - Create a user form that inserts prospective employees into the recruiting table and highlights those who meet criteria chosen from an additional user form. Hard advanced_recruiting.xlsm advanced_recruiting_key.xlsm","title":"User Forms"},{"location":"02_vba/13_userforms/userforms/#creating-custom-user-forms","text":"Occasionally it is useful to prompt the user with a user form and wait for the user to enter some information to the user form before proceeding to execute some code. In many cases, this can be accomplished with MsgBox/InputBox , but there are other cases where we need more detailed information and it is not convenient to pull that information from the cells on a sheet. In such cases, it is possible to create a custom user form containing a set of controls. To illustrate the process of using a custom user form, assume that we have a workbook where we need to routinely add new sheets to the workbook, but rather than adding blank sheets, we want the sheets to be copied from one of three pre-defined templates (stored as hidden sheets). You can download a copy of the spreadsheet used in this example by clicking here .","title":"Creating Custom User Forms"},{"location":"02_vba/13_userforms/userforms/#creating-the-form","text":"The first step is to create the user form. To do this, go to the VB Editor and right-click in the empty space in the project explorer window and select Insert|UserForm. This will create a new empty user form and launch the control toolbox: Next, we will change the name of the user form and change the user form title (default = \"UserForm1\"). We do this by clicking on the Properties button in the VB Editor menu. This will dock the Properties window just below the project explorer window. Change the name to \"frmAddSheet\". The prefix \"frm\" identifies the object in code as a user form and the \"AddSheet\" part makes the name descriptive of the user form's objective. Next, change the Caption property to \"New Sheet Options\" (or something similarly descriptive). Note that the caption appears in the form title bar. Now we are ready to add controls to the sheet. Fortunately, this process is identical to the manner in which controls are added to sheets . Add a set of controls to create a layout as follows. Note that you can use the handles on the sides and corners of the user form to resize the form. The text strings (\"Sheet title\", \"Template:\") are created with label-type controls. Note that the value property of the checkbox has been set to true because we want this option to be on by default. At any time while editing the sheet, you can test to see how the sheet behaves by pressing the Run button in the VB Editor menu. To close the form, click on the red X in the upper right corner.","title":"Creating the Form"},{"location":"02_vba/13_userforms/userforms/#launching-the-form","text":"The next thing we need to do is create some way to launch our form. In this case, we will add a button somewhere on the main sheet of our workbook as follows: Note the use of the ellipsis on the button title (...). This should be added to a button caption whenever the button is used to bring up a user form. This is standard user interface protocol. To make the button launch the form, double-click on the button in design mode and type the code for the click event as follows: Private Sub cmdAddSheet_Click() frmAddSheet.Show End Sub We are calling the .Show method which launches the sheet. Exit design mode and test your button.","title":"Launching the Form"},{"location":"02_vba/13_userforms/userforms/#writing-the-user-form-code","text":"Finally, we will write the code associated with the user form. While it is possible to write code associated with the click event for each control, we don't need to do anything while the user is interacting with the controls on the main part of the form. The only controls that need code are the OK and Cancel buttons. For the Cancel button, we will simply write code to make the form go away. For the OK button, we will write code that makes the form go away and then it will use the selections in the form to guide the creation of a new sheet from a template. For the Cancel button, go to the VB Editor and double-click on the Cancel button. This will bring up the code window for the form. Type the following: Private Sub cmdCancel_Click() frmAddSheet.Hide End Sub This executes the .Hide method to make the form go away. Now we need to return to the form editor window. To make it appear again, click on the second icon at the top of the Project Explorer. You can switch back to the code window by clicking on the first icon . You can also make the control view appear by double-clicking on the form in the Project Explorer. To write the code associated with the OK button, double-click on the OK button and write the following. Note how the control names are used when the sheet is copied. (Note: this assumes that you have three extra sheets named \"Template-CI\", \"Template-CO\", and \"Template-WL\" and that the \"Add Sheet...\" button is on a sheet named \"Main\"). Private Sub cmdOK_Click() Dim template As String 'Hide the sheet frmAddSheet.Hide 'Determine which template was selected. If optCustomerInvoice Then template = \"Template-CI\" ElseIf optChangeOrder Then template = \"Template-CO\" Else 'Work log template = \"Template-WL\" End If 'Copy the template to create a new sheet. Sheets(template).Select Sheets(template).Copy After:=Sheets(Sheets.Count) 'Make the sheet visible in case the template is hidden ActiveSheet.Visible = xlSheetVisible 'Rename the sheet ActiveSheet.Name = txtSheetTitle 'Bring main sheet back to front if necessary If chkBringToFront = False Then Sheets(\"Main\").Select End If End Sub That's it! Creating custom user forms is easy and fun.","title":"Writing the User Form Code"},{"location":"02_vba/13_userforms/userforms/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Battleship - By creating a user form, the user will be able to begin playing Battleship vs the computer. Easy battleship.xlsm battleship_key.xlsm Rainfall Log - Create a user form to log recent rainfall and compute the total rainfall to date. Medium rainfall_log.xlsm rainfall_log_key.xlsm Recruiting Spreadsheet - Create a user form that allows the user to insert prospective employees into a recruiting table. Medium recruiting_spreadsheet.xlsm recruiting_spreadsheet_key.xlsm Advanced Recruiting - Create a user form that inserts prospective employees into the recruiting table and highlights those who meet criteria chosen from an additional user form. Hard advanced_recruiting.xlsm advanced_recruiting_key.xlsm","title":"Exercises"},{"location":"02_vba/14_functions/functions/","text":"Custom Functions One of the easiest ways to take advantage of VBA in Excel is to write custom functions. Excel has a large number of built-in functions that you can use in spreadsheet formulas. Examples include: Function Description =Average(\"A4:A20\") Returns the average value in a range of cells =Sum(\"A4:A20\") Returns the sum of a range of cells =Cos(0.34) Returns the cosine of a number In general, a function takes one or more objects (values, ranges, etc.) as input and returns a single object (typically a value). The things that are sent to a function as input are called arguments and the thing that is returned by a function is often called the return value . In some cases, we may encounter situations where we need a function to do something but the function is not provided by Excel. We can easily fix this problem by creating a custom function in VBA. Syntax The basic syntax for a custom function is as follows: [Public] Function function_name(args) As Type ... function_name = ... ... End Function The Public statement is optional. This means that the function can be called by VB code outside the module where the function is declared and from Excel formulas in cells. If you omit the Public statement, the function is public by default (as opposed to Private ). The function_name is the name you provide to the function. This can be any name you want, as long as you follow the same rules we use for defining VB variable names. The args are the arguments to the function. You can have any number of arguments. The arguments are listed in the same way you declare variables, except that you omit the Dim part. The args list serves two purposes: 1) it defines how many arguments are used, and 2) it defines the type for each argument. The following are some sample argument lists: (x As Double, n As Double) (r As Range) (str1 As String, str2 As String, num As Integer) The Type part defines the type of object returned by the function. Typical examples are Double, Integer, String, and Boolean. Somewhere in the code, you must have line where you set the function name equal to a value. You should think of the function name as a variable. You must store the value returned by the function in the variable at some point before you hit the End Function statement. There is one more important point, whenever you create a function that you want to use in an Excel formula, it should always be placed in a module under the Modules folder in the VBE. Examples Now let's look at some examples. The following function takes two numbers as arguments and returns the minimum of the two numbers. This basically duplicates the Min function provided by Excel, but it serves as a useful example: Function my_min(a As Double, b As Double) As Double If a < b Then my_min = a Else my_min = b End If End Function Once this function is created, you can then use it in one of your Excel formulas as follows: =my_min(A5, B7) =my_min(Sum(C3:C10), 0) If you want to be lazy and not worry about declaring your types, you can simplify the first line of your function declaration as follows: Function my_min(a, b) If a < b Then my_min = a Else my_min = b End If End Function Compare to the same function shown above. In this case, the input arguments and the return type are set to Variant by default. Both of these methods will work, but the advantage of declaring the types is that if you pass something to the function that is of the wrong type, you will get an error message. Now let's look at something a little more complicated. In many cases, we want our function to use a cell range as one of the arguments. The following function returns the number of negative values in a range: Function num_neg(r As Range) As Integer Dim c As Variant For Each c In r If c.Value < 0 Then num_neg = num_neg + 1 End If Next c End Function The function could then be called from an Excel formula as follows: =num_neg(A5:B7) The next function takes two arguments: a range and an integer n. It computes the sum of values in the range minus the lowest n values. This function takes advantage of the standard Excel functions Sum and Small . The Small function returns the n th lowest value in a range. Function dropsum(r As Range, n As Integer) As Double Dim i As Integer dropsum = Application.WorksheetFunction.Sum(r) For i = 1 To n dropsum = dropsum - Application.WorksheetFunction.Small(r, i) Next i End Function This function could then be used in an Excel formula as follows: =dropsum(A5:B7, C10) =dropsum(A5:B7, 5) Functions in VB Finally, it should be noted that you can call custom functions from other places in your VB code as well as from Excel formulas. For example, you could use the my_min function defined above as follows: Dim x As Double Dim y As Double Dim z As Double x = ... y = ... ... z = my_min(x, y) ... Arguments - ByVal vs. ByRef If you call a VB function from someone else in your VB code, you need to be careful how you handle the arguments. In most cases, the arguments are used as input values to our computations and we don't attempt to change the values of the arguments. But if you do change the values of the arguments, you need to be understand what happens. For example, consider the following code. Function foo(x As Double) As Double x = x - 1 foo = 2*x End Function Sub mysub() Dim p As Double Dim r As Double p = 5 r = foo(p) MsgBox p End Sub Note that p was passed as an argument to the foo function where it was referenced as the argument x . In the function, x is decremented by 1. The value of p is then displayed using MsgBox in the sub after the function call is complete. The following is displayed: In other words, when we change the value of x in the function, we are simultaneously changing the value of p ! Or put another way, x becomes an alias for p and any change we make to x is made to p . They are two names for the same thing. This can lead to unexpected consequences. We can isolate the x from p by adding \" ByVal \" in front of the argument as follows: Function foo(ByVal x As Double) As Double x = x - 1 foo = 2*x End Function In this case, after running mysub , the following is displayed: The ByVal qualifier forces the argument to be passed \"by value\", meaning that x then becomes a copy of p and any changes we make to x are not reflected in p . The alternate qualified is ByRef , which indicates that the argument is directly linked to the variable passed in when the function is called. If you omit either qualifier, VBA defaults to ByRef , which is why our original example behaved the way it did. Rules for Functions There are a few simple rules that should be followed when writing custom functions. 1) When the function is called, arguments can be constants, values from cells, values from mathematical expressions, etc. It is not always from a cell, and it is most certainly not always from the same cell. For example, here are several fully legal ways to call the my_min function described above: =my_min(A5, B4) =my_min(-4, 20.4) =my_min(0, -B4/(A2 + 5)) In other words, your VBA code should never assume that the values are from cells. The values could come from any kind of expression. 2) Do not read directly from a cell inside a function. All input should be from the list of arguments. For example, consider the following function code: Function my_min2(a As Double, b As Double) As Double a = Range(\"B4\") b = Range(\"B5\") If a < b Then my_min2 = a Else my_min2 = b End If End Function Note that the two arguments a and b are immediately reset using the values from cells B4 and B5. This is a very common programming error but it is WRONG ! Functions are supposed to be general purpose in nature. You should be able to use your function in a formula in cells located anywhere on your worksheet. The problem with the code above is that no matter what you pass in as arguments, it will always use the values from B4 and B5 . You should never change the values of the input arguments in your code. If you want to apply the function to B4 and B5, put this in a cell formula after you write the function code: =my_min2(B4, B5) 3) Do not write directly to a cell from a function. In some cases, this will generate a calculate event, putting your spreadsheet into an infinite loop. The function should only do one thing: return a value. For example, consider the following code: Function my_min3(a As Double, b As Double) As Double If a < b Then my_min3 = a Else my_min3 = b End If Range(\"C8\") = my_min3 End Function Once again, this is a common error, but it is WRONG ! If you want to use the function to put a value in cell C8, use the function in a formula in cell C8 and the let the return value from the function generate the answer. The only result of a function should be the return value. If you want to write some code that changes values of one or more cells directly from the code, use a custom sub, not a function. Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Load Function - Create a custom function to calculate the excess load from a table of test data. Easy load_function.xlsm load_function_key.xlsm Total Stress - Use a custom function to determine the total stress vs depth of a soil profile. Medium total_stress.xlsm total_stress_key.xlsm Total Headloss - Create custom functions to calculate parts of the total headloss equation and then solve for total headloss. Hard total_headloss.xlsm total_headloss_key.xlsm","title":"Functions"},{"location":"02_vba/14_functions/functions/#custom-functions","text":"One of the easiest ways to take advantage of VBA in Excel is to write custom functions. Excel has a large number of built-in functions that you can use in spreadsheet formulas. Examples include: Function Description =Average(\"A4:A20\") Returns the average value in a range of cells =Sum(\"A4:A20\") Returns the sum of a range of cells =Cos(0.34) Returns the cosine of a number In general, a function takes one or more objects (values, ranges, etc.) as input and returns a single object (typically a value). The things that are sent to a function as input are called arguments and the thing that is returned by a function is often called the return value . In some cases, we may encounter situations where we need a function to do something but the function is not provided by Excel. We can easily fix this problem by creating a custom function in VBA.","title":"Custom Functions"},{"location":"02_vba/14_functions/functions/#syntax","text":"The basic syntax for a custom function is as follows: [Public] Function function_name(args) As Type ... function_name = ... ... End Function The Public statement is optional. This means that the function can be called by VB code outside the module where the function is declared and from Excel formulas in cells. If you omit the Public statement, the function is public by default (as opposed to Private ). The function_name is the name you provide to the function. This can be any name you want, as long as you follow the same rules we use for defining VB variable names. The args are the arguments to the function. You can have any number of arguments. The arguments are listed in the same way you declare variables, except that you omit the Dim part. The args list serves two purposes: 1) it defines how many arguments are used, and 2) it defines the type for each argument. The following are some sample argument lists: (x As Double, n As Double) (r As Range) (str1 As String, str2 As String, num As Integer) The Type part defines the type of object returned by the function. Typical examples are Double, Integer, String, and Boolean. Somewhere in the code, you must have line where you set the function name equal to a value. You should think of the function name as a variable. You must store the value returned by the function in the variable at some point before you hit the End Function statement. There is one more important point, whenever you create a function that you want to use in an Excel formula, it should always be placed in a module under the Modules folder in the VBE.","title":"Syntax"},{"location":"02_vba/14_functions/functions/#examples","text":"Now let's look at some examples. The following function takes two numbers as arguments and returns the minimum of the two numbers. This basically duplicates the Min function provided by Excel, but it serves as a useful example: Function my_min(a As Double, b As Double) As Double If a < b Then my_min = a Else my_min = b End If End Function Once this function is created, you can then use it in one of your Excel formulas as follows: =my_min(A5, B7) =my_min(Sum(C3:C10), 0) If you want to be lazy and not worry about declaring your types, you can simplify the first line of your function declaration as follows: Function my_min(a, b) If a < b Then my_min = a Else my_min = b End If End Function Compare to the same function shown above. In this case, the input arguments and the return type are set to Variant by default. Both of these methods will work, but the advantage of declaring the types is that if you pass something to the function that is of the wrong type, you will get an error message. Now let's look at something a little more complicated. In many cases, we want our function to use a cell range as one of the arguments. The following function returns the number of negative values in a range: Function num_neg(r As Range) As Integer Dim c As Variant For Each c In r If c.Value < 0 Then num_neg = num_neg + 1 End If Next c End Function The function could then be called from an Excel formula as follows: =num_neg(A5:B7) The next function takes two arguments: a range and an integer n. It computes the sum of values in the range minus the lowest n values. This function takes advantage of the standard Excel functions Sum and Small . The Small function returns the n th lowest value in a range. Function dropsum(r As Range, n As Integer) As Double Dim i As Integer dropsum = Application.WorksheetFunction.Sum(r) For i = 1 To n dropsum = dropsum - Application.WorksheetFunction.Small(r, i) Next i End Function This function could then be used in an Excel formula as follows: =dropsum(A5:B7, C10) =dropsum(A5:B7, 5)","title":"Examples"},{"location":"02_vba/14_functions/functions/#functions-in-vb","text":"Finally, it should be noted that you can call custom functions from other places in your VB code as well as from Excel formulas. For example, you could use the my_min function defined above as follows: Dim x As Double Dim y As Double Dim z As Double x = ... y = ... ... z = my_min(x, y) ...","title":"Functions in VB"},{"location":"02_vba/14_functions/functions/#arguments-byval-vs-byref","text":"If you call a VB function from someone else in your VB code, you need to be careful how you handle the arguments. In most cases, the arguments are used as input values to our computations and we don't attempt to change the values of the arguments. But if you do change the values of the arguments, you need to be understand what happens. For example, consider the following code. Function foo(x As Double) As Double x = x - 1 foo = 2*x End Function Sub mysub() Dim p As Double Dim r As Double p = 5 r = foo(p) MsgBox p End Sub Note that p was passed as an argument to the foo function where it was referenced as the argument x . In the function, x is decremented by 1. The value of p is then displayed using MsgBox in the sub after the function call is complete. The following is displayed: In other words, when we change the value of x in the function, we are simultaneously changing the value of p ! Or put another way, x becomes an alias for p and any change we make to x is made to p . They are two names for the same thing. This can lead to unexpected consequences. We can isolate the x from p by adding \" ByVal \" in front of the argument as follows: Function foo(ByVal x As Double) As Double x = x - 1 foo = 2*x End Function In this case, after running mysub , the following is displayed: The ByVal qualifier forces the argument to be passed \"by value\", meaning that x then becomes a copy of p and any changes we make to x are not reflected in p . The alternate qualified is ByRef , which indicates that the argument is directly linked to the variable passed in when the function is called. If you omit either qualifier, VBA defaults to ByRef , which is why our original example behaved the way it did.","title":"Arguments - ByVal vs. ByRef"},{"location":"02_vba/14_functions/functions/#rules-for-functions","text":"There are a few simple rules that should be followed when writing custom functions. 1) When the function is called, arguments can be constants, values from cells, values from mathematical expressions, etc. It is not always from a cell, and it is most certainly not always from the same cell. For example, here are several fully legal ways to call the my_min function described above: =my_min(A5, B4) =my_min(-4, 20.4) =my_min(0, -B4/(A2 + 5)) In other words, your VBA code should never assume that the values are from cells. The values could come from any kind of expression. 2) Do not read directly from a cell inside a function. All input should be from the list of arguments. For example, consider the following function code: Function my_min2(a As Double, b As Double) As Double a = Range(\"B4\") b = Range(\"B5\") If a < b Then my_min2 = a Else my_min2 = b End If End Function Note that the two arguments a and b are immediately reset using the values from cells B4 and B5. This is a very common programming error but it is WRONG ! Functions are supposed to be general purpose in nature. You should be able to use your function in a formula in cells located anywhere on your worksheet. The problem with the code above is that no matter what you pass in as arguments, it will always use the values from B4 and B5 . You should never change the values of the input arguments in your code. If you want to apply the function to B4 and B5, put this in a cell formula after you write the function code: =my_min2(B4, B5) 3) Do not write directly to a cell from a function. In some cases, this will generate a calculate event, putting your spreadsheet into an infinite loop. The function should only do one thing: return a value. For example, consider the following code: Function my_min3(a As Double, b As Double) As Double If a < b Then my_min3 = a Else my_min3 = b End If Range(\"C8\") = my_min3 End Function Once again, this is a common error, but it is WRONG ! If you want to use the function to put a value in cell C8, use the function in a formula in cell C8 and the let the return value from the function generate the answer. The only result of a function should be the return value. If you want to write some code that changes values of one or more cells directly from the code, use a custom sub, not a function.","title":"Rules for Functions"},{"location":"02_vba/14_functions/functions/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Load Function - Create a custom function to calculate the excess load from a table of test data. Easy load_function.xlsm load_function_key.xlsm Total Stress - Use a custom function to determine the total stress vs depth of a soil profile. Medium total_stress.xlsm total_stress_key.xlsm Total Headloss - Create custom functions to calculate parts of the total headloss equation and then solve for total headloss. Hard total_headloss.xlsm total_headloss_key.xlsm","title":"Exercises"},{"location":"02_vba/15_excelfunctions/excelfunctions/","text":"Calling Excel Functions from VB Code One of the nice things about writing VB code inside Excel is that you can combine all of the power and flexibility of Visual Basic with the many tools and options in Excel. One of the best examples of this is that you can take advantage of all of the standard Excel worksheet functions inside your VB code. Calling an Excel worksheet function is simple. The Excel functions are available as methods within the WorksheetFunction object. You simply invoke the method and pass the arguments that the function requires (typically a range). For example, if we were writing a simple formula to put in a cell to find the minimum value in a range of cells, we would write the following: =Min(B4:F30) The following code uses the same Min function, but invokes the function using VB code. The min value is stored in a variable called minval : Dim minval As Double minval = Application.WorksheetFunction.Min(Range(\"B4:F30\")) Notice the difference in how the range is specified. In the VB code, the range is specified as a range object. The Application. portion is actually optional and can be omitted in most cases. Thus, the following code achieves the same thing: Dim minval As Double minval = WorksheetFunction.Min(Range(\"B4:F30\")) Here are some more examples: Range(\"e5\") = WorksheetFunction.sum(Range(\"b5:b29\")) 'This is useful since VB does not have an inverse sin function Dim x As Double x = WorksheetFunction.Asin(0.223) Dim i As Integer i = 5 Range(\"H4\") = WorksheetFunction.Fact(i) Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Harmonic Mean - Use an Excel function within a custom function to calculate the harmonic mean from the tabulated data. Easy harmonic_mean.xlsm harmonic_mean_key.xlsm Law of Cosines - Calculate the Law of Cosines using an Excel function for Cosine within your sub. Medium law_of_cosines.xlsm law_of_cosines_key.xlsm Bill Payment - Use the APR Excel function within a custom function to calculate the number of months required to pay off a credit card bill. Hard bill_payments.xlsm bill_payments_key.xlsm","title":"Excel Functions"},{"location":"02_vba/15_excelfunctions/excelfunctions/#calling-excel-functions-from-vb-code","text":"One of the nice things about writing VB code inside Excel is that you can combine all of the power and flexibility of Visual Basic with the many tools and options in Excel. One of the best examples of this is that you can take advantage of all of the standard Excel worksheet functions inside your VB code. Calling an Excel worksheet function is simple. The Excel functions are available as methods within the WorksheetFunction object. You simply invoke the method and pass the arguments that the function requires (typically a range). For example, if we were writing a simple formula to put in a cell to find the minimum value in a range of cells, we would write the following: =Min(B4:F30) The following code uses the same Min function, but invokes the function using VB code. The min value is stored in a variable called minval : Dim minval As Double minval = Application.WorksheetFunction.Min(Range(\"B4:F30\")) Notice the difference in how the range is specified. In the VB code, the range is specified as a range object. The Application. portion is actually optional and can be omitted in most cases. Thus, the following code achieves the same thing: Dim minval As Double minval = WorksheetFunction.Min(Range(\"B4:F30\")) Here are some more examples: Range(\"e5\") = WorksheetFunction.sum(Range(\"b5:b29\")) 'This is useful since VB does not have an inverse sin function Dim x As Double x = WorksheetFunction.Asin(0.223) Dim i As Integer i = 5 Range(\"H4\") = WorksheetFunction.Fact(i)","title":"Calling Excel Functions from VB Code"},{"location":"02_vba/15_excelfunctions/excelfunctions/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Harmonic Mean - Use an Excel function within a custom function to calculate the harmonic mean from the tabulated data. Easy harmonic_mean.xlsm harmonic_mean_key.xlsm Law of Cosines - Calculate the Law of Cosines using an Excel function for Cosine within your sub. Medium law_of_cosines.xlsm law_of_cosines_key.xlsm Bill Payment - Use the APR Excel function within a custom function to calculate the number of months required to pay off a credit card bill. Hard bill_payments.xlsm bill_payments_key.xlsm","title":"Exercises"},{"location":"02_vba/16_subs/subs/","text":"Writing Custom Subs When writing VBA code associated with Excel, much of the code we use is generated by recording a macro, is associated with the click event for a control, or is related to a custom function. It is also possible to write custom subs. A sub is simply a block of code that runs as a unit. Code Organization To illustrate how subs can be used to organize your code, let's suppose that we have a spreadsheet with a button that launches the following code: Private Sub cmdGenerateTable_Click() 'Format the table Range(\"B6:D9\").Select Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous Selection.Borders(xlEdgeTop).LineStyle = xlContinuous Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous Selection.Borders(xlEdgeRight).LineStyle = xlContinuous Selection.Borders(xlInsideVertical).LineStyle = xlContinuous Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous Selection.HorizontalAlignment = xlCenter 'Populate the table Range(\"B6\").FormulaR1C1 = \"len\" Range(\"C6\").FormulaR1C1 = \"wid\" Range(\"D6\").FormulaR1C1 = \"area\" Range(\"B7\").FormulaR1C1 = \"5\" Range(\"C7\").FormulaR1C1 = \"12\" Range(\"B8\").FormulaR1C1 = \"34\" Range(\"C8\").FormulaR1C1 = \"15\" Range(\"B9\").FormulaR1C1 = \"6.5\" Range(\"C9\").FormulaR1C1 = \"22\" Range(\"D7:D9\").FormulaR1C1 = \"=RC[-2]*RC[-1]\" End Sub The first part of the code formats a table, and the second part of the code fills in the table with numbers and formulas. After running the range in question (\"B6:D9\") looks like this: Another way to organize the code is to break the two parts of the code into two different subs as follows: Private Sub cmdGenerateTable_Click() format_table populate_table End Sub Sub format_table() Range(\"B6:D9\").Select Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous Selection.Borders(xlEdgeTop).LineStyle = xlContinuous Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous Selection.Borders(xlEdgeRight).LineStyle = xlContinuous Selection.Borders(xlInsideVertical).LineStyle = xlContinuous Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous Selection.HorizontalAlignment = xlCenter End Sub Sub populate_table() Range(\"B6\").FormulaR1C1 = \"len\" Range(\"C6\").FormulaR1C1 = \"wid\" Range(\"D6\").FormulaR1C1 = \"area\" Range(\"B7\").FormulaR1C1 = \"5\" Range(\"C7\").FormulaR1C1 = \"12\" Range(\"B8\").FormulaR1C1 = \"34\" Range(\"C8\").FormulaR1C1 = \"15\" Range(\"B9\").FormulaR1C1 = \"6.5\" Range(\"C9\").FormulaR1C1 = \"22\" Range(\"D7:D9\").FormulaR1C1 = \"=RC[-2]*RC[-1]\" End Sub Note that the code in the original sub is now only two lines. To call a sub, you simply type the name of the sub on a line of code. While this is a rather simple project, this process of organizing code into logical chunks and then calling those chunks as subs in the main part of your code will not only make your code simpler to understand, it makes your code easier to write because you can use a divide-and-conquer approach to building up your code logic. Furthermore, in many cases you may want to repeat a section of code many times. Rather than cutting and pasting an identical set of code, it makes much more sense to put the code into a sub and then just call that sub. Using Input Arguments While the code up above is nicely organized, the custom subs would be even more useful if they were generalized to work on any range rather than always applying to B6:D9. We can make our code more general by adding input arguments. Input arguments are passed to a sub the same way they are passed to custom functions, via the parentheses following the sub name. In the following code, the subs have been changed to operate on a range specified by an input argument. You can then call the subs multiple times with a different range in each case. Private Sub cmdGenerateTable_Click() format_table Range(\"B6:D9\") populate_table Range(\"B6:D9\") format_table Range(\"B11:D14\") populate_table Range(\"B11:D14\") format_table Range(\"B16:D19\") populate_table Range(\"B16:D19\") End Sub Sub format_table(myrange As Range) myrange.Select Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous Selection.Borders(xlEdgeTop).LineStyle = xlContinuous Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous Selection.Borders(xlEdgeRight).LineStyle = xlContinuous Selection.Borders(xlInsideVertical).LineStyle = xlContinuous Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous Selection.HorizontalAlignment = xlCenter End Sub Sub populate_table(myrange As Range) myrange.Cells(1, 1).FormulaR1C1 = \"len\" myrange.Cells(1, 2).FormulaR1C1 = \"wid\" myrange.Cells(1, 3).FormulaR1C1 = \"area\" myrange.Cells(2, 1).FormulaR1C1 = \"5\" myrange.Cells(2, 2).FormulaR1C1 = \"12\" myrange.Cells(3, 1).FormulaR1C1 = \"34\" myrange.Cells(3, 2).FormulaR1C1 = \"15\" myrange.Cells(4, 1).FormulaR1C1 = \"6.5\" myrange.Cells(4, 2).FormulaR1C1 = \"22\" Range(myrange.Cells(2, 3), myrange.Cells(4, 3)).FormulaR1C1 = \"=RC[-2]*RC[-1]\" End Sub Note how the subs are called in the click event sub. To call a sub with arguments, you simply list the arguments after the sub name, and the arguments are separated by commas (there is only one argument in this case). For subs, you should not enclose the argument(s) in parentheses when you call the sub like you do with functions. After running the code above, the sheet looks like this: Again, the power of using custom subs is that you can repeatedly use code without rewriting it, and you can make it general purpose so that it applies to a number of situations depending on the values of the input arguments. Scope The code shown above is all associated with a sheet and can only be used with the associated sheet. If you want to make your code even more general, you should put it in a module and make sure it is public, not private (if you don't explicitly put \"Public\" or \"Private\" in front of the sub name, it is public by default). This will allow you to call the code from anywhere in your project, including any of the sheets, forms, or modules. Modifying Recorded Macros A great way to make custom subs is to record a macro and then modify the macro to be more general purpose by adding an input argument to the sub and modifying the code based on the input argument. For example, the following macro copies a standard table from a sheet called \"Extra\" to another sheet. Sub copy_table() ' ' copy_table Macro ' Sheets(\"Extra\").Select Range(\"A1:L8\").Select Application.CutCopyMode = False Selection.Copy Sheets(\"Sheet1\").Select Range(\"F6\").Select ActiveSheet.Paste End Sub To make the code more useful, we can modify the code as follows so that we can designate where the table is to be copied. Compare to original code. Sub copy_table(mysheet As String, myrange As String) ' ' copy_table Macro - MODIFIED ' Sheets(\"Extra\").Select Range(\"A1:L8\").Select Application.CutCopyMode = False Selection.Copy Sheets(mysheet).Select Range(myrange).Select ActiveSheet.Paste End Sub We can now write code to copy the table to multiple locations. copy_table \"Sheet1\", \"F6\" copy_table \"Sheet1\", \"F15\" copy_table \"Sheet2\", \"B2\" copy_table \"Sheet2\", \"B11\" Calling Subs As shown above, you can call a sub simply by typing the name of the sub followed by the arguments separated by commas. For example, the code to call the copy_table sub is as follows: copy_table \"Sheet1\", \"F6\" copy_table \"Sheet1\", \"F15\" copy_table \"Sheet2\", \"B2\" copy_table \"Sheet2\", \"B11\" An alternate way to call the subs is to use the Call method. If you use this approach, you must put the arguments in parentheses. For example: Call copy_table(\"Sheet1\", \"F6\") Call copy_table(\"Sheet1\", \"F15\") Call copy_table(\"Sheet2\", \"B2\") Call copy_table(\"Sheet2\", \"B11\") Both approaches work the same way, so it is a matter of style. Sample Code The worksheet associated with this chapter can be downloaded here. sample code.xlsm Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Table Generator - Record three macros that generate 3 different kinds of tables. Easy table_generator.xlsm table_generator_key.xlsm Column Format - Modify a macro that formats a specific column of the given table. Medium column_format.xlsm column_format_key.xlsm Template Generator - Record and modify a macro that generates various types of homework templates for math, engineering and general homework. Hard template_generator.xlsm template_generator_key.xlsm","title":"Subs"},{"location":"02_vba/16_subs/subs/#writing-custom-subs","text":"When writing VBA code associated with Excel, much of the code we use is generated by recording a macro, is associated with the click event for a control, or is related to a custom function. It is also possible to write custom subs. A sub is simply a block of code that runs as a unit.","title":"Writing Custom Subs"},{"location":"02_vba/16_subs/subs/#code-organization","text":"To illustrate how subs can be used to organize your code, let's suppose that we have a spreadsheet with a button that launches the following code: Private Sub cmdGenerateTable_Click() 'Format the table Range(\"B6:D9\").Select Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous Selection.Borders(xlEdgeTop).LineStyle = xlContinuous Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous Selection.Borders(xlEdgeRight).LineStyle = xlContinuous Selection.Borders(xlInsideVertical).LineStyle = xlContinuous Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous Selection.HorizontalAlignment = xlCenter 'Populate the table Range(\"B6\").FormulaR1C1 = \"len\" Range(\"C6\").FormulaR1C1 = \"wid\" Range(\"D6\").FormulaR1C1 = \"area\" Range(\"B7\").FormulaR1C1 = \"5\" Range(\"C7\").FormulaR1C1 = \"12\" Range(\"B8\").FormulaR1C1 = \"34\" Range(\"C8\").FormulaR1C1 = \"15\" Range(\"B9\").FormulaR1C1 = \"6.5\" Range(\"C9\").FormulaR1C1 = \"22\" Range(\"D7:D9\").FormulaR1C1 = \"=RC[-2]*RC[-1]\" End Sub The first part of the code formats a table, and the second part of the code fills in the table with numbers and formulas. After running the range in question (\"B6:D9\") looks like this: Another way to organize the code is to break the two parts of the code into two different subs as follows: Private Sub cmdGenerateTable_Click() format_table populate_table End Sub Sub format_table() Range(\"B6:D9\").Select Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous Selection.Borders(xlEdgeTop).LineStyle = xlContinuous Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous Selection.Borders(xlEdgeRight).LineStyle = xlContinuous Selection.Borders(xlInsideVertical).LineStyle = xlContinuous Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous Selection.HorizontalAlignment = xlCenter End Sub Sub populate_table() Range(\"B6\").FormulaR1C1 = \"len\" Range(\"C6\").FormulaR1C1 = \"wid\" Range(\"D6\").FormulaR1C1 = \"area\" Range(\"B7\").FormulaR1C1 = \"5\" Range(\"C7\").FormulaR1C1 = \"12\" Range(\"B8\").FormulaR1C1 = \"34\" Range(\"C8\").FormulaR1C1 = \"15\" Range(\"B9\").FormulaR1C1 = \"6.5\" Range(\"C9\").FormulaR1C1 = \"22\" Range(\"D7:D9\").FormulaR1C1 = \"=RC[-2]*RC[-1]\" End Sub Note that the code in the original sub is now only two lines. To call a sub, you simply type the name of the sub on a line of code. While this is a rather simple project, this process of organizing code into logical chunks and then calling those chunks as subs in the main part of your code will not only make your code simpler to understand, it makes your code easier to write because you can use a divide-and-conquer approach to building up your code logic. Furthermore, in many cases you may want to repeat a section of code many times. Rather than cutting and pasting an identical set of code, it makes much more sense to put the code into a sub and then just call that sub.","title":"Code Organization"},{"location":"02_vba/16_subs/subs/#using-input-arguments","text":"While the code up above is nicely organized, the custom subs would be even more useful if they were generalized to work on any range rather than always applying to B6:D9. We can make our code more general by adding input arguments. Input arguments are passed to a sub the same way they are passed to custom functions, via the parentheses following the sub name. In the following code, the subs have been changed to operate on a range specified by an input argument. You can then call the subs multiple times with a different range in each case. Private Sub cmdGenerateTable_Click() format_table Range(\"B6:D9\") populate_table Range(\"B6:D9\") format_table Range(\"B11:D14\") populate_table Range(\"B11:D14\") format_table Range(\"B16:D19\") populate_table Range(\"B16:D19\") End Sub Sub format_table(myrange As Range) myrange.Select Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous Selection.Borders(xlEdgeTop).LineStyle = xlContinuous Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous Selection.Borders(xlEdgeRight).LineStyle = xlContinuous Selection.Borders(xlInsideVertical).LineStyle = xlContinuous Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous Selection.HorizontalAlignment = xlCenter End Sub Sub populate_table(myrange As Range) myrange.Cells(1, 1).FormulaR1C1 = \"len\" myrange.Cells(1, 2).FormulaR1C1 = \"wid\" myrange.Cells(1, 3).FormulaR1C1 = \"area\" myrange.Cells(2, 1).FormulaR1C1 = \"5\" myrange.Cells(2, 2).FormulaR1C1 = \"12\" myrange.Cells(3, 1).FormulaR1C1 = \"34\" myrange.Cells(3, 2).FormulaR1C1 = \"15\" myrange.Cells(4, 1).FormulaR1C1 = \"6.5\" myrange.Cells(4, 2).FormulaR1C1 = \"22\" Range(myrange.Cells(2, 3), myrange.Cells(4, 3)).FormulaR1C1 = \"=RC[-2]*RC[-1]\" End Sub Note how the subs are called in the click event sub. To call a sub with arguments, you simply list the arguments after the sub name, and the arguments are separated by commas (there is only one argument in this case). For subs, you should not enclose the argument(s) in parentheses when you call the sub like you do with functions. After running the code above, the sheet looks like this: Again, the power of using custom subs is that you can repeatedly use code without rewriting it, and you can make it general purpose so that it applies to a number of situations depending on the values of the input arguments.","title":"Using Input Arguments"},{"location":"02_vba/16_subs/subs/#scope","text":"The code shown above is all associated with a sheet and can only be used with the associated sheet. If you want to make your code even more general, you should put it in a module and make sure it is public, not private (if you don't explicitly put \"Public\" or \"Private\" in front of the sub name, it is public by default). This will allow you to call the code from anywhere in your project, including any of the sheets, forms, or modules.","title":"Scope"},{"location":"02_vba/16_subs/subs/#modifying-recorded-macros","text":"A great way to make custom subs is to record a macro and then modify the macro to be more general purpose by adding an input argument to the sub and modifying the code based on the input argument. For example, the following macro copies a standard table from a sheet called \"Extra\" to another sheet. Sub copy_table() ' ' copy_table Macro ' Sheets(\"Extra\").Select Range(\"A1:L8\").Select Application.CutCopyMode = False Selection.Copy Sheets(\"Sheet1\").Select Range(\"F6\").Select ActiveSheet.Paste End Sub To make the code more useful, we can modify the code as follows so that we can designate where the table is to be copied. Compare to original code. Sub copy_table(mysheet As String, myrange As String) ' ' copy_table Macro - MODIFIED ' Sheets(\"Extra\").Select Range(\"A1:L8\").Select Application.CutCopyMode = False Selection.Copy Sheets(mysheet).Select Range(myrange).Select ActiveSheet.Paste End Sub We can now write code to copy the table to multiple locations. copy_table \"Sheet1\", \"F6\" copy_table \"Sheet1\", \"F15\" copy_table \"Sheet2\", \"B2\" copy_table \"Sheet2\", \"B11\"","title":"Modifying Recorded Macros"},{"location":"02_vba/16_subs/subs/#calling-subs","text":"As shown above, you can call a sub simply by typing the name of the sub followed by the arguments separated by commas. For example, the code to call the copy_table sub is as follows: copy_table \"Sheet1\", \"F6\" copy_table \"Sheet1\", \"F15\" copy_table \"Sheet2\", \"B2\" copy_table \"Sheet2\", \"B11\" An alternate way to call the subs is to use the Call method. If you use this approach, you must put the arguments in parentheses. For example: Call copy_table(\"Sheet1\", \"F6\") Call copy_table(\"Sheet1\", \"F15\") Call copy_table(\"Sheet2\", \"B2\") Call copy_table(\"Sheet2\", \"B11\") Both approaches work the same way, so it is a matter of style.","title":"Calling Subs"},{"location":"02_vba/16_subs/subs/#sample-code","text":"The worksheet associated with this chapter can be downloaded here. sample code.xlsm","title":"Sample Code"},{"location":"02_vba/16_subs/subs/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Table Generator - Record three macros that generate 3 different kinds of tables. Easy table_generator.xlsm table_generator_key.xlsm Column Format - Modify a macro that formats a specific column of the given table. Medium column_format.xlsm column_format_key.xlsm Template Generator - Record and modify a macro that generates various types of homework templates for math, engineering and general homework. Hard template_generator.xlsm template_generator_key.xlsm","title":"Exercises"},{"location":"02_vba/17_events/events/","text":"Trapping for Worksheet Events When writing VB code associated with a spreadsheet, it is common to add a button to the spreadsheet that the user pushes to execute the VB code when the desired changes have been made to the controls and the values have been entered in the cells. For example, the following workbook is designed to calculate the volume of waste that can be stored in a landfill. The user edits the yellow cells and selects a loss factor. When the Solve button is clicked, the values from the cells and the loss factor selection are read and the volume is calculated in VB code and written to the Volume cell (B21). In this case, we don't need any code for the click events for the option controls. We simply need to add the following code for the \"Solve\" button: Private Sub cmdSolve_Click() Dim slope As Double Dim width As Double Dim length As Double Dim depth As Double Dim x As Double Dim vol As Double Dim lossfactor As Double slope = Range(\"B13\") width = Range(\"B15\") length = Range(\"B17\") depth = Range(\"B19\") 'Calculate the x term x = depth / Tan(slope * 3.14159 / 180#) 'Get the appropriate loss factor If optLow Then lossfactor = 0.05 ElseIf optMedium Then lossfactor = 0.1 Else lossfactor = 0.15 End If 'Compute the volume vol = (1 - lossfactor) * depth * (width * length + width * x _ + x * length + 2 / 3 * x ^ 2) 'Display the results in cell B21 Range(\"B21\") = vol End Sub This code works fine, but why require the user to click on the button? Why not set up the spreadsheet so that anytime the user clicks on a control or changes the value of a cell, the VB code is automatically executed and the volume is updated? This can be easily accomplished using the \"Change\" event for the worksheet. Workbooks and Worksheets Before discussing the Change event, we need to first define a couple of terms. When the VB compiler for Excel is open, you will see a list of objects in a tree on the left side of the window. At the bottom of the tree you will see the following objects: A \"Workbook\" object represents the entire spreadsheet, including all of the sheets. If you double click on this object, it will bring up the source code related to the workbook as a whole. The other objects (\"Sheet1\", \"Sheet2\", & \"Sheet3\"). Double clicking on these objects brings up the code related to these objects. Once you open the window related to a particular sheet, some important information related to the sheet is displayed at the top of the sheet as follows: The combo box on the left (the one that is open) lists all of the objects associated with the sheet. Note that each of the controls on the spreadsheet are listed along with the worksheet itself. If you highlight one of the objects, you can then select an event from the combo box on the right: Selecting one of these events creates the subroutine for the selected event. For example, if I click on the \"Activate\" item, the following code appears: Private Sub Worksheet_Activate() End Sub Any code inside this sub would be executed each time the associated sheet is made active. The Calculate and Change Events Note that the list of available events for the worksheet include the \"Calculate\" event and the \"Change\" event. By selecting these items, we can then fill in the code for these events. The resulting code will be executed as follows: Calculate Event The Calculate event looks like this: Private Sub Worksheet_Calculate() End Sub and is called each time the formulas in the worksheet are recalculated. Note that you must have at least one formula in your spreadsheet in order for this event to be called. Change Event The change event looks like this: Private Sub Worksheet_Change(ByVal Target As Range) End Sub and is called each time any of the cells in the spreadsheet are changed. Note that the subroutine takes one argument which is the range that has been changed. If we want the spreadsheet to be updated any time the user enters new data, this is the event we want to use. First of all, we remove the button so that the spreadsheet looks as follows: Next, we will modify the code in the Change event to update the spreadsheet. However, this event is not called when a control is changed, it is only called when a cell is changed. Therefore, we will first create a subroutine that performs the calculations: Private Sub Compute_Volume() Dim slope As Double Dim width As Double Dim length As Double Dim depth As Double Dim x As Double Dim vol As Double Dim lossfactor As Double slope = Range(\"B13\") width = Range(\"B15\") length = Range(\"B17\") depth = Range(\"B19\") 'Calculate the x term x = depth / Tan(slope * PI / 180#) 'Get the appropriate loss factor If optLow Then lossfactor = 0.05 ElseIf optMedium Then lossfactor = 0.1 Else lossfactor = 0.15 End If 'Compute the volume vol = (1 - lossfactor) * depth * (width * length + width * x _ + x * length + 2 / 3 * x ^ 2) 'Display the results in cell B21 Range(\"B21\") = vol End Sub Then we will modify the Change event so that it calls this subroutine: Private Sub Worksheet_Change(ByVal Target As Range) Application.EnableEvents = False Compute_Volume Application.EnableEvents = True End Sub Note that we have to temporarily turn off trapping for events prior to updating the results. This is because the Compute_Volume sub changes the value of one of the cells. This generates a new Change event which brings us right back to this sub. This results in an infinite loop. To be safe, you should always turn off event trapping while you make any changes in code. Finally, to ensure that the click events for the controls cause the results to be updated, we add a call to the click event subroutines for each of the controls as follows: Private Sub optHigh_Click() Compute_Volume End Sub Private Sub optLow_Click() Compute_Volume End Sub Private Sub optMedium_Click() Compute_Volume End Sub At this point, clicking on any of the controls, or updating the value of any of the input cells triggers the VB code to update the results. You can download a copy of the completed workbook here: sample_nobutton.xlsm Checking on the Target Note that Worksheet Change event sends an argument called Target that represents the range of cells changed. This could be a single cell or a range of cells. In some cases, it is useful to check on the range of cells that have been modified. To do this, you can check on the Target object passed as a parameter to the Change event sub. Target contains the cell or range of cells changed. Ideally, you could use a simple statement such as: If Target = Range(\"B4\") Then or If Target <> Range(\"B13\") Then To check the value of Target. However, this will not work because both Target and Range() are objects. As an object, when you say If Target = Range(\"B4\") Then what you are really saying is If Target.Value = Range(\"B4\").Value Then Or: \"if the value of target is equal to the value of cell B4, then\" This statement would return true if Target corresponded to ANY cell that happened to have the same value as cell B4. A simple way to solve this problem is to check on the Address property as follows: If Target.Address = Range(\"B4\").Address Then Or an even simpler approach: If Target.Address = \"$B$4\" Then In many cases, however, what you really want to know is whether or not Target is a portion of an entire range of cells. An efficient test for this type of case is to use the Intersect method associated with the Application object. This method returns the intersection between two ranges. The idea is to intersect the target range and the range corresponding to the input cells and see if the result is non-empty. This can be accomplished as follows: Private Sub Worksheet_Change(ByVal Target As Range) If Not Application.Intersect(Target, Range(\"B21\")) Is Nothing Then My_Sub End If End Sub This approach will work with input ranges spanning multiple cells. For example: Private Sub Worksheet_Change(ByVal Target As Range) If Not Application.Intersect(Target, Range(\"B4:F34\")) Is Nothing Then My_Sub End If End Sub OnKey Method The Application.OnKey method makes it possible to execute code when certain keys are pressed. This is especially useful for associating frequently used macros with the function keys. For example, suppose we created the following two subs: Sub half_it() If Selection.Count = 1 Then If IsNumeric(Selection.Value) Then Selection.Value = Selection.Value / 2 End If End If End Sub Sub double_it() If Selection.Count = 1 Then If IsNumeric(Selection.Value) Then Selection.Value = Selection.Value * 2 End If End If End Sub Both subs are designed to modify the numerical contents of a selected cell. Each sub first checks to see if the selection contains a single cell and if the cell contains a numerical value. If so, the half_it sub divides the value by half and the double_it sub multiplies the value by two. We would like to associate these subs with the F1 and F2 keys. Before doing so, we must ensure that both subs are declared inside a module (not in the code for a sheet or workbook). Next, we need to make a link between the subs and the keys using the Application.OnKey method. The best time to do this is when the workbook is first opened. Therefore, we will use the process described above. We will first open the code window associated with the workbook object. Then we select the Workbook item from the list on the left at the top of the window and then select the Open item from the list on the top right. This creates an empty sub for the Workbook_Open event as follows: Private Sub Workbook_Open() End Sub Next we call the Application.OnKey method to link the two keys to the two subs. The OnKey method takes two arguments, both of which are strings. The first argument is the key code identifying the key. In our case, the codes are \"{F1}\" and \"{F2}\". A complete list of the key codes can be found here . The second argument is the name of the sub. Once again, for this to work, the sub MUST be located in a module. After modifying the Workbook_Open sub, it should look like this: Private Sub Workbook_Open() Application.OnKey \"{F1}\", \"half_it\" Application.OnKey \"{F2}\", \"double_it\" End Sub We then save and close the workbook and then reopen it. At this point the F1 and F2 keys should work. You can test this code by downloading the following sample workbook: sample_onkey.xlsm OnTime Method It is also possible to call a sub at a specific point in time using the Application.OnTime method. This can be associated with the Workbook_Open event or you can call it at any other place in your code. The method has two required arguments and the syntax is as follows: Application.OnTime(EarliestTime, Procedure) The first argument is the time at which the sub should be called and the second argument is the name of the sub. For example, suppose we are so obsessed with coding that we often forget to take a break. We could use the OnTime method to set up a reminder for us. First we would create the following code inside a module: Sub break_reminder() MsgBox \"Take a break!\", vbAttention + vbOKOnly, \"Reminder\" End Sub Next, we will call the OnTime method when the workbook is first opened as follows: Private Sub Workbook_Open() Application.OnTime Now + TimeValue(\"00:00:15\"), \"break_reminder\" End Sub Note that the first argument is for a specific time. In most cases, we don't know what the time is until we run the code, so it makes sense to make it relative to some specific event. In this case, the first argument is an expression that computes a time 15 seconds into the future (we are using 15 seconds just to make the sample workbook more interesting). The MsgBox form should appear exactly 15 seconds after opening the workbook. If you want the message to be repeated every 15 seconds, you would simply need to call the OnTime method again right after showing the MsgBox as follows: Sub break_reminder() MsgBox \"Take a break!\", vbExclamation + vbOKOnly, \"Reminder\" Application.OnTime Now + TimeValue(\"00:00:15\"), \"break_reminder\" End Sub You can download a sample copy of this workbook here: sample_ontime.xlsm Exercises You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Transpose - Create an event so that anytime the user changes a value in the matrix, the transposed matrix is automatically updated. Easy transpose.xlsm transpose_key.xlsm Receipt Generator - Create an event that automatically updates the totals and discounts for a receipt generator by checking the cells changed. Medium receipt_generator.xlsm receipt_generator_key.xlsm Missile Defense - Use an event to run a macro that determines if a missile will destroy an asteroid before colliding with the earth. Hard missile_defense.xlsm missile_defense_key.xlsm","title":"Events"},{"location":"02_vba/17_events/events/#trapping-for-worksheet-events","text":"When writing VB code associated with a spreadsheet, it is common to add a button to the spreadsheet that the user pushes to execute the VB code when the desired changes have been made to the controls and the values have been entered in the cells. For example, the following workbook is designed to calculate the volume of waste that can be stored in a landfill. The user edits the yellow cells and selects a loss factor. When the Solve button is clicked, the values from the cells and the loss factor selection are read and the volume is calculated in VB code and written to the Volume cell (B21). In this case, we don't need any code for the click events for the option controls. We simply need to add the following code for the \"Solve\" button: Private Sub cmdSolve_Click() Dim slope As Double Dim width As Double Dim length As Double Dim depth As Double Dim x As Double Dim vol As Double Dim lossfactor As Double slope = Range(\"B13\") width = Range(\"B15\") length = Range(\"B17\") depth = Range(\"B19\") 'Calculate the x term x = depth / Tan(slope * 3.14159 / 180#) 'Get the appropriate loss factor If optLow Then lossfactor = 0.05 ElseIf optMedium Then lossfactor = 0.1 Else lossfactor = 0.15 End If 'Compute the volume vol = (1 - lossfactor) * depth * (width * length + width * x _ + x * length + 2 / 3 * x ^ 2) 'Display the results in cell B21 Range(\"B21\") = vol End Sub This code works fine, but why require the user to click on the button? Why not set up the spreadsheet so that anytime the user clicks on a control or changes the value of a cell, the VB code is automatically executed and the volume is updated? This can be easily accomplished using the \"Change\" event for the worksheet.","title":"Trapping for Worksheet Events"},{"location":"02_vba/17_events/events/#workbooks-and-worksheets","text":"Before discussing the Change event, we need to first define a couple of terms. When the VB compiler for Excel is open, you will see a list of objects in a tree on the left side of the window. At the bottom of the tree you will see the following objects: A \"Workbook\" object represents the entire spreadsheet, including all of the sheets. If you double click on this object, it will bring up the source code related to the workbook as a whole. The other objects (\"Sheet1\", \"Sheet2\", & \"Sheet3\"). Double clicking on these objects brings up the code related to these objects. Once you open the window related to a particular sheet, some important information related to the sheet is displayed at the top of the sheet as follows: The combo box on the left (the one that is open) lists all of the objects associated with the sheet. Note that each of the controls on the spreadsheet are listed along with the worksheet itself. If you highlight one of the objects, you can then select an event from the combo box on the right: Selecting one of these events creates the subroutine for the selected event. For example, if I click on the \"Activate\" item, the following code appears: Private Sub Worksheet_Activate() End Sub Any code inside this sub would be executed each time the associated sheet is made active.","title":"Workbooks and Worksheets"},{"location":"02_vba/17_events/events/#the-calculate-and-change-events","text":"Note that the list of available events for the worksheet include the \"Calculate\" event and the \"Change\" event. By selecting these items, we can then fill in the code for these events. The resulting code will be executed as follows:","title":"The Calculate and Change Events"},{"location":"02_vba/17_events/events/#calculate-event","text":"The Calculate event looks like this: Private Sub Worksheet_Calculate() End Sub and is called each time the formulas in the worksheet are recalculated. Note that you must have at least one formula in your spreadsheet in order for this event to be called.","title":"Calculate Event"},{"location":"02_vba/17_events/events/#change-event","text":"The change event looks like this: Private Sub Worksheet_Change(ByVal Target As Range) End Sub and is called each time any of the cells in the spreadsheet are changed. Note that the subroutine takes one argument which is the range that has been changed. If we want the spreadsheet to be updated any time the user enters new data, this is the event we want to use. First of all, we remove the button so that the spreadsheet looks as follows: Next, we will modify the code in the Change event to update the spreadsheet. However, this event is not called when a control is changed, it is only called when a cell is changed. Therefore, we will first create a subroutine that performs the calculations: Private Sub Compute_Volume() Dim slope As Double Dim width As Double Dim length As Double Dim depth As Double Dim x As Double Dim vol As Double Dim lossfactor As Double slope = Range(\"B13\") width = Range(\"B15\") length = Range(\"B17\") depth = Range(\"B19\") 'Calculate the x term x = depth / Tan(slope * PI / 180#) 'Get the appropriate loss factor If optLow Then lossfactor = 0.05 ElseIf optMedium Then lossfactor = 0.1 Else lossfactor = 0.15 End If 'Compute the volume vol = (1 - lossfactor) * depth * (width * length + width * x _ + x * length + 2 / 3 * x ^ 2) 'Display the results in cell B21 Range(\"B21\") = vol End Sub Then we will modify the Change event so that it calls this subroutine: Private Sub Worksheet_Change(ByVal Target As Range) Application.EnableEvents = False Compute_Volume Application.EnableEvents = True End Sub Note that we have to temporarily turn off trapping for events prior to updating the results. This is because the Compute_Volume sub changes the value of one of the cells. This generates a new Change event which brings us right back to this sub. This results in an infinite loop. To be safe, you should always turn off event trapping while you make any changes in code. Finally, to ensure that the click events for the controls cause the results to be updated, we add a call to the click event subroutines for each of the controls as follows: Private Sub optHigh_Click() Compute_Volume End Sub Private Sub optLow_Click() Compute_Volume End Sub Private Sub optMedium_Click() Compute_Volume End Sub At this point, clicking on any of the controls, or updating the value of any of the input cells triggers the VB code to update the results. You can download a copy of the completed workbook here: sample_nobutton.xlsm","title":"Change Event"},{"location":"02_vba/17_events/events/#checking-on-the-target","text":"Note that Worksheet Change event sends an argument called Target that represents the range of cells changed. This could be a single cell or a range of cells. In some cases, it is useful to check on the range of cells that have been modified. To do this, you can check on the Target object passed as a parameter to the Change event sub. Target contains the cell or range of cells changed. Ideally, you could use a simple statement such as: If Target = Range(\"B4\") Then or If Target <> Range(\"B13\") Then To check the value of Target. However, this will not work because both Target and Range() are objects. As an object, when you say If Target = Range(\"B4\") Then what you are really saying is If Target.Value = Range(\"B4\").Value Then Or: \"if the value of target is equal to the value of cell B4, then\" This statement would return true if Target corresponded to ANY cell that happened to have the same value as cell B4. A simple way to solve this problem is to check on the Address property as follows: If Target.Address = Range(\"B4\").Address Then Or an even simpler approach: If Target.Address = \"$B$4\" Then In many cases, however, what you really want to know is whether or not Target is a portion of an entire range of cells. An efficient test for this type of case is to use the Intersect method associated with the Application object. This method returns the intersection between two ranges. The idea is to intersect the target range and the range corresponding to the input cells and see if the result is non-empty. This can be accomplished as follows: Private Sub Worksheet_Change(ByVal Target As Range) If Not Application.Intersect(Target, Range(\"B21\")) Is Nothing Then My_Sub End If End Sub This approach will work with input ranges spanning multiple cells. For example: Private Sub Worksheet_Change(ByVal Target As Range) If Not Application.Intersect(Target, Range(\"B4:F34\")) Is Nothing Then My_Sub End If End Sub","title":"Checking on the Target"},{"location":"02_vba/17_events/events/#onkey-method","text":"The Application.OnKey method makes it possible to execute code when certain keys are pressed. This is especially useful for associating frequently used macros with the function keys. For example, suppose we created the following two subs: Sub half_it() If Selection.Count = 1 Then If IsNumeric(Selection.Value) Then Selection.Value = Selection.Value / 2 End If End If End Sub Sub double_it() If Selection.Count = 1 Then If IsNumeric(Selection.Value) Then Selection.Value = Selection.Value * 2 End If End If End Sub Both subs are designed to modify the numerical contents of a selected cell. Each sub first checks to see if the selection contains a single cell and if the cell contains a numerical value. If so, the half_it sub divides the value by half and the double_it sub multiplies the value by two. We would like to associate these subs with the F1 and F2 keys. Before doing so, we must ensure that both subs are declared inside a module (not in the code for a sheet or workbook). Next, we need to make a link between the subs and the keys using the Application.OnKey method. The best time to do this is when the workbook is first opened. Therefore, we will use the process described above. We will first open the code window associated with the workbook object. Then we select the Workbook item from the list on the left at the top of the window and then select the Open item from the list on the top right. This creates an empty sub for the Workbook_Open event as follows: Private Sub Workbook_Open() End Sub Next we call the Application.OnKey method to link the two keys to the two subs. The OnKey method takes two arguments, both of which are strings. The first argument is the key code identifying the key. In our case, the codes are \"{F1}\" and \"{F2}\". A complete list of the key codes can be found here . The second argument is the name of the sub. Once again, for this to work, the sub MUST be located in a module. After modifying the Workbook_Open sub, it should look like this: Private Sub Workbook_Open() Application.OnKey \"{F1}\", \"half_it\" Application.OnKey \"{F2}\", \"double_it\" End Sub We then save and close the workbook and then reopen it. At this point the F1 and F2 keys should work. You can test this code by downloading the following sample workbook: sample_onkey.xlsm","title":"OnKey Method"},{"location":"02_vba/17_events/events/#ontime-method","text":"It is also possible to call a sub at a specific point in time using the Application.OnTime method. This can be associated with the Workbook_Open event or you can call it at any other place in your code. The method has two required arguments and the syntax is as follows: Application.OnTime(EarliestTime, Procedure) The first argument is the time at which the sub should be called and the second argument is the name of the sub. For example, suppose we are so obsessed with coding that we often forget to take a break. We could use the OnTime method to set up a reminder for us. First we would create the following code inside a module: Sub break_reminder() MsgBox \"Take a break!\", vbAttention + vbOKOnly, \"Reminder\" End Sub Next, we will call the OnTime method when the workbook is first opened as follows: Private Sub Workbook_Open() Application.OnTime Now + TimeValue(\"00:00:15\"), \"break_reminder\" End Sub Note that the first argument is for a specific time. In most cases, we don't know what the time is until we run the code, so it makes sense to make it relative to some specific event. In this case, the first argument is an expression that computes a time 15 seconds into the future (we are using 15 seconds just to make the sample workbook more interesting). The MsgBox form should appear exactly 15 seconds after opening the workbook. If you want the message to be repeated every 15 seconds, you would simply need to call the OnTime method again right after showing the MsgBox as follows: Sub break_reminder() MsgBox \"Take a break!\", vbExclamation + vbOKOnly, \"Reminder\" Application.OnTime Now + TimeValue(\"00:00:15\"), \"break_reminder\" End Sub You can download a sample copy of this workbook here: sample_ontime.xlsm","title":"OnTime Method"},{"location":"02_vba/17_events/events/#exercises","text":"You may wish to complete following exercises to gain practice with and reinforce the topics covered in this chapter: Description Difficulty Start Solution Transpose - Create an event so that anytime the user changes a value in the matrix, the transposed matrix is automatically updated. Easy transpose.xlsm transpose_key.xlsm Receipt Generator - Create an event that automatically updates the totals and discounts for a receipt generator by checking the cells changed. Medium receipt_generator.xlsm receipt_generator_key.xlsm Missile Defense - Use an event to run a macro that determines if a missile will destroy an asteroid before colliding with the earth. Hard missile_defense.xlsm missile_defense_key.xlsm","title":"Exercises"},{"location":"02_vba/18_standards/standards/","text":"VBA Coding Standards In this chapter we discuss practices that will make your code easier to read and understand and less prone to error. These are not strictly required - your code may run just fine when you do not follow these guidelines. However, it is strongly suggested that you get in the habit of using good coding practices as it will make your coding much simpler and enjoyable in the long run. This is list is not comprehensive, but is a good start. Option Explicit As described in the Variables chapter, you don't necessarily have to declare your variables before you use them. For example, if I want to start using a variable called myvar , I can simply write a line of code like this: myvar = Range(\"A4\") * 2 and my code will work just fine. When that line of code is executed, the VBA compiler looks at the myvar item and if it doesn't recognize it as a known variable or object, it assumes that you are declaring a new variable. That works fine until you write a line of code that accesses an existing variable but you misspell the variable name, thus accidentally creating a new variable with a default value of zero (or empty string, etc.). This leads to run-time errors that can be difficult to find and fix. This can all be avoided by getting into the habit of typing: Option Explicit at the top of your code every time you start coding a new module or sheet. Indenting Indenting is not required in VBA, but it makes your code much easier to read and understand. For example, suppose you have a loop within a loop and the inner loop contains an IF statement, like this: For myrow = 1 To 20 For mycol = 5 To 15 x = Cells(myrow, mycol) If (x < 0) Then MsgBox \"Negative number found\" numneg = numneg + 1 ElseIf (x = 0) Then MsgBox \"Zero value found\" numzero = numzero + 1 End If Next mycol Next myrow Notice how the indenting illustrates the flow of logic? Everything between the For myrow = and the Next myrow statements is indented to illustrate that the indented part is executed at each iteration of the loop. Likewise, the indentation for the inner loop and each section of the IF statement clearly identify the flow of logic. Now let's look at the same code without indentation: For myrow = 1 To 20 For mycol = 5 To 15 x = Cells(myrow, mycol) If (x < 0) Then MsgBox \"Negative number found\" numneg = numneg + 1 ElseIf (x = 0) Then MsgBox \"Zero value found\" numzero = numzero + 1 End If Next mycol Next myrow This code will generate precisely the same results as the first code when executed. However, it is incredibly difficult to follow the logic. Thus, it is much easier to make mistakes when you do not indent. It is important to get into the habit of indenting your code. Just follow the example used in this Primer. We always indent lines of code that are in a logical block. Comments When writing complex code, it is helpful to use comments to illustrate the logic in your code. You don't need to comment everything, but adding some comments as appropriate to explain the logic can make your code much easier to follow. This helps others who review your code and it may help you when you come back to your code at a later point in time. As much as you think you will remember everything, it is easy to forget what you were doing. For example, here is some well-commented code from a term project submitted for this course: Private Sub cmd_generatecanoe_Click() 'get user input values for canoe parameters and convert entered values to feet and inches Dim tl As Double Dim tw As Double Dim th As Double tl = lst_tlfeet + lst_tlinches / 12 tw = lst_twfeet + lst_twinches / 12 th = lst_thfeet + lst_thinches / 12 'print values on reference data sheet Sheets(\"Reference Data\").Range(\"F2\") = tl Sheets(\"Reference Data\").Range(\"F3\") = tw Sheets(\"Reference Data\").Range(\"F4\") = th 'Create array to generate X and Y points 'There are 31 points, which yields 11 nodes after drawing the curve Dim canoeArray1(1 To 31, 1 To 2) As Single 'set up values for coordinate transformation a = 20 c = -20 d = 150 b = 100 'set X-values evenly spaced across the canoe For i = 1 To 31 canoeArray1(i, 1) = (i - 1) * tl / 30 Next i 'Set Y values based on a sqrt function of the X value 'This first loop accounts for the Y-values increasing up to the center point For i = 1 To 16 'set y value canoeArray1(i, 2) = Sqr(tw ^ 2 * (canoeArray1(i, 1) / (tl / 2))) 'Print X and Y values in feet/inches to spreadsheet for reference Sheets(\"All Canoe Points\").Range(\"B\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"C\" & i + 1) = canoeArray1(i, 2) 'Coordinate transformation canoeArray1(i, 1) = canoeArray1(i, 1) * a + b canoeArray1(i, 2) = canoeArray1(i, 2) * c + d 'Print X and Y values in excel coordinates to spreadsheet Sheets(\"All Canoe Points\").Range(\"G\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"H\" & i + 1) = canoeArray1(i, 2) Next i 'This second loop accounts for the Y values decreasing from the center point on For i = 17 To 31 'set y value canoeArray1(i, 2) = Sqr(tw ^ 2 * (tl - canoeArray1(i, 1)) / (tl / 2)) 'Print X and Y values in feet/inches to spreadsheet for reference Sheets(\"All Canoe Points\").Range(\"B\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"C\" & i + 1) = canoeArray1(i, 2) 'coordinate transformation canoeArray1(i, 1) = canoeArray1(i, 1) * a + b canoeArray1(i, 2) = canoeArray1(i, 2) * c + d 'Print X and Y values in excel coordinates to spreadsheet for reference Sheets(\"All Canoe Points\").Range(\"G\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"H\" & i + 1) = canoeArray1(i, 2) Next i 'draw bird's eye view of half of canoe Set Sh = ActiveSheet.Shapes.AddCurve(canoeArray1) 'name the bird's eye view canoe1 Sh.Name = \"canoe1\" Notice how the comments make the code easy to follow. This is highly commented code, and maybe a little on the overkill side, but it is helpful. Knowing how many comments to use is something you will get better at with experience but zero comments will definitely make your code difficult to understand! Control Names As described in the Controls chapter, using descriptive names for your controls is very important because it allows you to keep track of both the control's type and its function. You should always use descriptive control names and not use the default names. Variable Names By the same logic, you should be careful when selecting your variable names. You should generally select variable names that accurately describe the intended use and contents of your variable. For example, suppose I am declaring an integer variable that will contain the number of students in a class. I could declare it as: Dim ns As Integer where ns stands for \"number of students\". A better approach would be something like this: Dim numstudents As Integer Using descriptive variable names takes a little more effort but can make your code easier to follow and less prone to error.","title":"Standards"},{"location":"02_vba/18_standards/standards/#vba-coding-standards","text":"In this chapter we discuss practices that will make your code easier to read and understand and less prone to error. These are not strictly required - your code may run just fine when you do not follow these guidelines. However, it is strongly suggested that you get in the habit of using good coding practices as it will make your coding much simpler and enjoyable in the long run. This is list is not comprehensive, but is a good start.","title":"VBA Coding Standards"},{"location":"02_vba/18_standards/standards/#option-explicit","text":"As described in the Variables chapter, you don't necessarily have to declare your variables before you use them. For example, if I want to start using a variable called myvar , I can simply write a line of code like this: myvar = Range(\"A4\") * 2 and my code will work just fine. When that line of code is executed, the VBA compiler looks at the myvar item and if it doesn't recognize it as a known variable or object, it assumes that you are declaring a new variable. That works fine until you write a line of code that accesses an existing variable but you misspell the variable name, thus accidentally creating a new variable with a default value of zero (or empty string, etc.). This leads to run-time errors that can be difficult to find and fix. This can all be avoided by getting into the habit of typing: Option Explicit at the top of your code every time you start coding a new module or sheet.","title":"Option Explicit"},{"location":"02_vba/18_standards/standards/#indenting","text":"Indenting is not required in VBA, but it makes your code much easier to read and understand. For example, suppose you have a loop within a loop and the inner loop contains an IF statement, like this: For myrow = 1 To 20 For mycol = 5 To 15 x = Cells(myrow, mycol) If (x < 0) Then MsgBox \"Negative number found\" numneg = numneg + 1 ElseIf (x = 0) Then MsgBox \"Zero value found\" numzero = numzero + 1 End If Next mycol Next myrow Notice how the indenting illustrates the flow of logic? Everything between the For myrow = and the Next myrow statements is indented to illustrate that the indented part is executed at each iteration of the loop. Likewise, the indentation for the inner loop and each section of the IF statement clearly identify the flow of logic. Now let's look at the same code without indentation: For myrow = 1 To 20 For mycol = 5 To 15 x = Cells(myrow, mycol) If (x < 0) Then MsgBox \"Negative number found\" numneg = numneg + 1 ElseIf (x = 0) Then MsgBox \"Zero value found\" numzero = numzero + 1 End If Next mycol Next myrow This code will generate precisely the same results as the first code when executed. However, it is incredibly difficult to follow the logic. Thus, it is much easier to make mistakes when you do not indent. It is important to get into the habit of indenting your code. Just follow the example used in this Primer. We always indent lines of code that are in a logical block.","title":"Indenting"},{"location":"02_vba/18_standards/standards/#comments","text":"When writing complex code, it is helpful to use comments to illustrate the logic in your code. You don't need to comment everything, but adding some comments as appropriate to explain the logic can make your code much easier to follow. This helps others who review your code and it may help you when you come back to your code at a later point in time. As much as you think you will remember everything, it is easy to forget what you were doing. For example, here is some well-commented code from a term project submitted for this course: Private Sub cmd_generatecanoe_Click() 'get user input values for canoe parameters and convert entered values to feet and inches Dim tl As Double Dim tw As Double Dim th As Double tl = lst_tlfeet + lst_tlinches / 12 tw = lst_twfeet + lst_twinches / 12 th = lst_thfeet + lst_thinches / 12 'print values on reference data sheet Sheets(\"Reference Data\").Range(\"F2\") = tl Sheets(\"Reference Data\").Range(\"F3\") = tw Sheets(\"Reference Data\").Range(\"F4\") = th 'Create array to generate X and Y points 'There are 31 points, which yields 11 nodes after drawing the curve Dim canoeArray1(1 To 31, 1 To 2) As Single 'set up values for coordinate transformation a = 20 c = -20 d = 150 b = 100 'set X-values evenly spaced across the canoe For i = 1 To 31 canoeArray1(i, 1) = (i - 1) * tl / 30 Next i 'Set Y values based on a sqrt function of the X value 'This first loop accounts for the Y-values increasing up to the center point For i = 1 To 16 'set y value canoeArray1(i, 2) = Sqr(tw ^ 2 * (canoeArray1(i, 1) / (tl / 2))) 'Print X and Y values in feet/inches to spreadsheet for reference Sheets(\"All Canoe Points\").Range(\"B\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"C\" & i + 1) = canoeArray1(i, 2) 'Coordinate transformation canoeArray1(i, 1) = canoeArray1(i, 1) * a + b canoeArray1(i, 2) = canoeArray1(i, 2) * c + d 'Print X and Y values in excel coordinates to spreadsheet Sheets(\"All Canoe Points\").Range(\"G\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"H\" & i + 1) = canoeArray1(i, 2) Next i 'This second loop accounts for the Y values decreasing from the center point on For i = 17 To 31 'set y value canoeArray1(i, 2) = Sqr(tw ^ 2 * (tl - canoeArray1(i, 1)) / (tl / 2)) 'Print X and Y values in feet/inches to spreadsheet for reference Sheets(\"All Canoe Points\").Range(\"B\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"C\" & i + 1) = canoeArray1(i, 2) 'coordinate transformation canoeArray1(i, 1) = canoeArray1(i, 1) * a + b canoeArray1(i, 2) = canoeArray1(i, 2) * c + d 'Print X and Y values in excel coordinates to spreadsheet for reference Sheets(\"All Canoe Points\").Range(\"G\" & i + 1) = canoeArray1(i, 1) Sheets(\"All Canoe Points\").Range(\"H\" & i + 1) = canoeArray1(i, 2) Next i 'draw bird's eye view of half of canoe Set Sh = ActiveSheet.Shapes.AddCurve(canoeArray1) 'name the bird's eye view canoe1 Sh.Name = \"canoe1\" Notice how the comments make the code easy to follow. This is highly commented code, and maybe a little on the overkill side, but it is helpful. Knowing how many comments to use is something you will get better at with experience but zero comments will definitely make your code difficult to understand!","title":"Comments"},{"location":"02_vba/18_standards/standards/#control-names","text":"As described in the Controls chapter, using descriptive names for your controls is very important because it allows you to keep track of both the control's type and its function. You should always use descriptive control names and not use the default names.","title":"Control Names"},{"location":"02_vba/18_standards/standards/#variable-names","text":"By the same logic, you should be careful when selecting your variable names. You should generally select variable names that accurately describe the intended use and contents of your variable. For example, suppose I am declaring an integer variable that will contain the number of students in a class. I could declare it as: Dim ns As Integer where ns stands for \"number of students\". A better approach would be something like this: Dim numstudents As Integer Using descriptive variable names takes a little more effort but can make your code easier to follow and less prone to error.","title":"Variable Names"},{"location":"03_advanced/01_graphics/graphics/","text":"Custom Graphics A common task faced by programmers is how to display custom graphics using source code. It is often useful to display an object that is properly dimensioned in terms of the input parameters supplied on the user. For example, one could display the geometry of a cantilever beam or a column based on the user input. At the other end of the spectrum, it is possible to write sophisticated computer programs with 3D graphics and animation. Standard VB (applied to a VB form) has a simple, yet powerful set of graphics options. You create a Picture object and then use a series of commands to draw lines and simple shapes in the Picture object. However, none of these tools can used for VBA in Excel. With Excel, an entirely different approach must be used. This approach involves a special type of object called a \"Shape\". Shapes can be created manually by the user of the spreadsheet using the standard MS Office drawing tools: Any of the graphical objects in this menu (lines, connectors, basic shapes, etc.) are classified as shapes. Once created, they can be manipulated via VB code. Since the basic shapes include lines, rectangles, circles, and polygons, you can create just about any custom drawing that you can think of. The Shape Object When dealing with shapes in VB code, we use the Shape object. All of the objects in the drawing layer of a worksheet, including AutoShapes, freeforms, OLE objects, or pictures, are Shape type objects. To declare a variable as a Shape object, do the following: Dim sh As Shape The Creating Shapes section below discusses how to create Shape objects. The Shapes Collection All of the Shape type objects associated with a specific sheet are organized into a set of objects called the Shapes collection. The Shapes collection is a special type of object that has it's own unique set of properties and methods. For example, you can traverse through all of the Shape objects in the Shapes collection using the following code. 'Check to see if there is already a polygon named \"mypolygon\" 'If so, we will delete it. Dim sh As Shape For Each sh In Shapes If sh.Name = \"mypolygon\" Then sh.Delete End If Next sh When you create a new Shape object, it is added to the Shapes collection. Creating Shapes The simplest way to create new shapes is to use one of the \"Addxxx\" methods associated with the Shapes collection. These methods include the AddLine, AddPolyline, and AddShape methods. Each of these methods creates a new shape object that is added to the Shapes collection. The AddLine Method The AddLine method creates a simple line defined by xy coordinates of the beginning and end of the line. The syntax for the method is: expression.AddLine(BeginX, BeginY, EndX, EndY) where expression is a Shapes type object. For example, the following code: Shapes.AddLine 10, 10, 250, 250 creates a line that starts at the coordinates (10, 10) and ends at (250, 250) and adds it to the Shapes collection for the active worksheet. If you want to be more explicit about which sheet the shape is assigned to, you can use the following code: Worksheets(1).Shapes.AddLine 10, 10, 250, 250 or Worksheets(\"Sheet1\").Shapes.AddLine 10, 10, 250, 250 The AddPolyline Method The AddPolyline method creates a sequence of line segments defined by a list of coordinates. If the first coordinate is repeated at the end of the list, the method creates a closed polygon. The syntax for the method is: expression.AddPolyline(SafeArrayOfPoints) where expression is a Shapes type object and SafeArrayOfPoints is a 2D array of Singles representing the coordinates of the polygon. For example, the following code creates a polygon representing a triangle (from the VBA Excel Help File): Dim triArray(1 To 4, 1 To 2) As Single triArray(1, 1) = 25 'x coordinate of vertex 1 triArray(1, 2) = 100 'y coordinate of vertex 1 triArray(2, 1) = 100 triArray(2, 2) = 150 triArray(3, 1) = 150 triArray(3, 2) = 50 triArray(4, 1) = 25 ' Last point has same coordinates as first triArray(4, 2) = 100 Shapes.AddPolyline triArray Once again, the object is added to the Shapes collection for the current sheet. The AddShape Method The AddShape method can be used to create a new Shape object that is an AutoShape . The syntax for the method is: expression.AddShape(Type, Left, Top, Width, Height) where expression is a Shapes collection, Type is the type of AutoShape, and Left, Top, Width , and Height are singles defining the location and size of the object. For example, the following code creates a rectangle: Shapes.AddShape msoShapeRectangle, 25, 50, 150, 200 The msoShapeRectangle is a VB constant defining the AutoShape type. There are many AutoShape constants available including: msoShapeRectangle msoShapeOval msoShapeDiamond msoShapeTriangle msoShapeStar msoShapeFlowchartDecision msoShapeFlowchartProcess msoShapeFlowchartConnector And many more... Excel Coordinate System When working with shapes in Excel, it's important to understand the coordinate system. Excel uses a coordinate system where: The origin (0,0) is at the top-left corner of the worksheet X increases from left to right Y increases from top to bottom Units are typically in points (1/72 inch) Example: Creating a Cantilever Beam Here's an example of how to create a simple cantilever beam using VBA: Sub CreateCantileverBeam() Dim beamLength As Double Dim beamHeight As Double Dim startX As Double Dim startY As Double ' Set parameters beamLength = 200 beamHeight = 50 startX = 100 startY = 100 ' Create the main beam (rectangle) Dim beam As Shape Set beam = Shapes.AddShape(msoShapeRectangle, startX, startY, beamLength, beamHeight) beam.Name = \"MainBeam\" ' Create support (triangle) Dim supportArray(1 To 4, 1 To 2) As Single supportArray(1, 1) = startX - 20 supportArray(1, 2) = startY + beamHeight supportArray(2, 1) = startX supportArray(2, 2) = startY + beamHeight + 30 supportArray(3, 1) = startX + 20 supportArray(3, 2) = startY + beamHeight supportArray(4, 1) = startX - 20 supportArray(4, 2) = startY + beamHeight Dim support As Shape Set support = Shapes.AddPolyline(supportArray) support.Name = \"Support\" ' Create load arrow Dim loadArrow As Shape Set loadArrow = Shapes.AddShape(msoShapeDownArrow, startX + beamLength/2, startY - 40, 20, 30) loadArrow.Name = \"Load\" End Sub Manipulating Existing Shapes Once you have created shapes, you can manipulate their properties: ' Change the fill color of a shape Shapes(\"MainBeam\").Fill.ForeColor.RGB = RGB(255, 0, 0) ' Red ' Change the line color Shapes(\"MainBeam\").Line.ForeColor.RGB = RGB(0, 0, 255) ' Blue ' Change the line weight Shapes(\"MainBeam\").Line.Weight = 3 ' Move a shape Shapes(\"MainBeam\").Left = Shapes(\"MainBeam\").Left + 50 Shapes(\"MainBeam\").Top = Shapes(\"MainBeam\").Top + 25 ' Resize a shape Shapes(\"MainBeam\").Width = Shapes(\"MainBeam\").Width * 1.5 Shapes(\"MainBeam\").Height = Shapes(\"MainBeam\").Height * 1.2 ' Rotate a shape Shapes(\"MainBeam\").Rotation = 45 ' 45 degrees Advanced Graphics Techniques Creating Complex Geometries For more complex shapes, you can combine multiple basic shapes or use mathematical functions to generate coordinates: Sub CreateSineWave() Dim i As Integer Dim x As Double, y As Double Dim amplitude As Double, frequency As Double Dim points() As Single Dim numPoints As Integer amplitude = 30 frequency = 0.02 numPoints = 100 ReDim points(1 To numPoints, 1 To 2) For i = 1 To numPoints x = (i - 1) * 5 y = 150 + amplitude * Sin(frequency * x) points(i, 1) = x points(i, 2) = y Next i Dim wave As Shape Set wave = Shapes.AddPolyline(points) wave.Name = \"SineWave\" End Sub Interactive Graphics You can create interactive graphics that respond to user input: Sub CreateInteractiveBeam() Dim length As Double Dim height As Double ' Get dimensions from user length = InputBox(\"Enter beam length:\", \"Beam Length\", 200) height = InputBox(\"Enter beam height:\", \"Beam Height\", 50) ' Create beam with user dimensions Dim beam As Shape Set beam = Shapes.AddShape(msoShapeRectangle, 100, 100, length, height) beam.Name = \"InteractiveBeam\" ' Add text label Dim label As Shape Set label = Shapes.AddTextbox(msoTextOrientationHorizontal, 100, 80, 100, 20) label.TextFrame.Characters.Text = \"L=\" & length & \", H=\" & height End Sub Best Practices Always name your shapes - This makes them easier to reference later Use variables for coordinates - Makes your code more readable and maintainable Check for existing shapes - Delete old shapes before creating new ones to avoid clutter Use meaningful variable names - Makes your code self-documenting Group related shapes - Consider using shape groups for complex drawings Example Applications Custom graphics in Excel VBA can be used for: Engineering drawings and diagrams Flowcharts and process maps Mathematical visualizations Interactive dashboards Educational materials Technical documentation The power of VBA graphics lies in the ability to create dynamic, parameter-driven drawings that automatically update based on user input or calculations, making Excel a powerful tool for technical graphics and visualization.","title":"Graphics"},{"location":"03_advanced/01_graphics/graphics/#custom-graphics","text":"A common task faced by programmers is how to display custom graphics using source code. It is often useful to display an object that is properly dimensioned in terms of the input parameters supplied on the user. For example, one could display the geometry of a cantilever beam or a column based on the user input. At the other end of the spectrum, it is possible to write sophisticated computer programs with 3D graphics and animation. Standard VB (applied to a VB form) has a simple, yet powerful set of graphics options. You create a Picture object and then use a series of commands to draw lines and simple shapes in the Picture object. However, none of these tools can used for VBA in Excel. With Excel, an entirely different approach must be used. This approach involves a special type of object called a \"Shape\". Shapes can be created manually by the user of the spreadsheet using the standard MS Office drawing tools: Any of the graphical objects in this menu (lines, connectors, basic shapes, etc.) are classified as shapes. Once created, they can be manipulated via VB code. Since the basic shapes include lines, rectangles, circles, and polygons, you can create just about any custom drawing that you can think of.","title":"Custom Graphics"},{"location":"03_advanced/01_graphics/graphics/#the-shape-object","text":"When dealing with shapes in VB code, we use the Shape object. All of the objects in the drawing layer of a worksheet, including AutoShapes, freeforms, OLE objects, or pictures, are Shape type objects. To declare a variable as a Shape object, do the following: Dim sh As Shape The Creating Shapes section below discusses how to create Shape objects.","title":"The Shape Object"},{"location":"03_advanced/01_graphics/graphics/#the-shapes-collection","text":"All of the Shape type objects associated with a specific sheet are organized into a set of objects called the Shapes collection. The Shapes collection is a special type of object that has it's own unique set of properties and methods. For example, you can traverse through all of the Shape objects in the Shapes collection using the following code. 'Check to see if there is already a polygon named \"mypolygon\" 'If so, we will delete it. Dim sh As Shape For Each sh In Shapes If sh.Name = \"mypolygon\" Then sh.Delete End If Next sh When you create a new Shape object, it is added to the Shapes collection.","title":"The Shapes Collection"},{"location":"03_advanced/01_graphics/graphics/#creating-shapes","text":"The simplest way to create new shapes is to use one of the \"Addxxx\" methods associated with the Shapes collection. These methods include the AddLine, AddPolyline, and AddShape methods. Each of these methods creates a new shape object that is added to the Shapes collection.","title":"Creating Shapes"},{"location":"03_advanced/01_graphics/graphics/#the-addline-method","text":"The AddLine method creates a simple line defined by xy coordinates of the beginning and end of the line. The syntax for the method is: expression.AddLine(BeginX, BeginY, EndX, EndY) where expression is a Shapes type object. For example, the following code: Shapes.AddLine 10, 10, 250, 250 creates a line that starts at the coordinates (10, 10) and ends at (250, 250) and adds it to the Shapes collection for the active worksheet. If you want to be more explicit about which sheet the shape is assigned to, you can use the following code: Worksheets(1).Shapes.AddLine 10, 10, 250, 250 or Worksheets(\"Sheet1\").Shapes.AddLine 10, 10, 250, 250","title":"The AddLine Method"},{"location":"03_advanced/01_graphics/graphics/#the-addpolyline-method","text":"The AddPolyline method creates a sequence of line segments defined by a list of coordinates. If the first coordinate is repeated at the end of the list, the method creates a closed polygon. The syntax for the method is: expression.AddPolyline(SafeArrayOfPoints) where expression is a Shapes type object and SafeArrayOfPoints is a 2D array of Singles representing the coordinates of the polygon. For example, the following code creates a polygon representing a triangle (from the VBA Excel Help File): Dim triArray(1 To 4, 1 To 2) As Single triArray(1, 1) = 25 'x coordinate of vertex 1 triArray(1, 2) = 100 'y coordinate of vertex 1 triArray(2, 1) = 100 triArray(2, 2) = 150 triArray(3, 1) = 150 triArray(3, 2) = 50 triArray(4, 1) = 25 ' Last point has same coordinates as first triArray(4, 2) = 100 Shapes.AddPolyline triArray Once again, the object is added to the Shapes collection for the current sheet.","title":"The AddPolyline Method"},{"location":"03_advanced/01_graphics/graphics/#the-addshape-method","text":"The AddShape method can be used to create a new Shape object that is an AutoShape . The syntax for the method is: expression.AddShape(Type, Left, Top, Width, Height) where expression is a Shapes collection, Type is the type of AutoShape, and Left, Top, Width , and Height are singles defining the location and size of the object. For example, the following code creates a rectangle: Shapes.AddShape msoShapeRectangle, 25, 50, 150, 200 The msoShapeRectangle is a VB constant defining the AutoShape type. There are many AutoShape constants available including: msoShapeRectangle msoShapeOval msoShapeDiamond msoShapeTriangle msoShapeStar msoShapeFlowchartDecision msoShapeFlowchartProcess msoShapeFlowchartConnector And many more...","title":"The AddShape Method"},{"location":"03_advanced/01_graphics/graphics/#excel-coordinate-system","text":"When working with shapes in Excel, it's important to understand the coordinate system. Excel uses a coordinate system where: The origin (0,0) is at the top-left corner of the worksheet X increases from left to right Y increases from top to bottom Units are typically in points (1/72 inch)","title":"Excel Coordinate System"},{"location":"03_advanced/01_graphics/graphics/#example-creating-a-cantilever-beam","text":"Here's an example of how to create a simple cantilever beam using VBA: Sub CreateCantileverBeam() Dim beamLength As Double Dim beamHeight As Double Dim startX As Double Dim startY As Double ' Set parameters beamLength = 200 beamHeight = 50 startX = 100 startY = 100 ' Create the main beam (rectangle) Dim beam As Shape Set beam = Shapes.AddShape(msoShapeRectangle, startX, startY, beamLength, beamHeight) beam.Name = \"MainBeam\" ' Create support (triangle) Dim supportArray(1 To 4, 1 To 2) As Single supportArray(1, 1) = startX - 20 supportArray(1, 2) = startY + beamHeight supportArray(2, 1) = startX supportArray(2, 2) = startY + beamHeight + 30 supportArray(3, 1) = startX + 20 supportArray(3, 2) = startY + beamHeight supportArray(4, 1) = startX - 20 supportArray(4, 2) = startY + beamHeight Dim support As Shape Set support = Shapes.AddPolyline(supportArray) support.Name = \"Support\" ' Create load arrow Dim loadArrow As Shape Set loadArrow = Shapes.AddShape(msoShapeDownArrow, startX + beamLength/2, startY - 40, 20, 30) loadArrow.Name = \"Load\" End Sub","title":"Example: Creating a Cantilever Beam"},{"location":"03_advanced/01_graphics/graphics/#manipulating-existing-shapes","text":"Once you have created shapes, you can manipulate their properties: ' Change the fill color of a shape Shapes(\"MainBeam\").Fill.ForeColor.RGB = RGB(255, 0, 0) ' Red ' Change the line color Shapes(\"MainBeam\").Line.ForeColor.RGB = RGB(0, 0, 255) ' Blue ' Change the line weight Shapes(\"MainBeam\").Line.Weight = 3 ' Move a shape Shapes(\"MainBeam\").Left = Shapes(\"MainBeam\").Left + 50 Shapes(\"MainBeam\").Top = Shapes(\"MainBeam\").Top + 25 ' Resize a shape Shapes(\"MainBeam\").Width = Shapes(\"MainBeam\").Width * 1.5 Shapes(\"MainBeam\").Height = Shapes(\"MainBeam\").Height * 1.2 ' Rotate a shape Shapes(\"MainBeam\").Rotation = 45 ' 45 degrees","title":"Manipulating Existing Shapes"},{"location":"03_advanced/01_graphics/graphics/#advanced-graphics-techniques","text":"","title":"Advanced Graphics Techniques"},{"location":"03_advanced/01_graphics/graphics/#creating-complex-geometries","text":"For more complex shapes, you can combine multiple basic shapes or use mathematical functions to generate coordinates: Sub CreateSineWave() Dim i As Integer Dim x As Double, y As Double Dim amplitude As Double, frequency As Double Dim points() As Single Dim numPoints As Integer amplitude = 30 frequency = 0.02 numPoints = 100 ReDim points(1 To numPoints, 1 To 2) For i = 1 To numPoints x = (i - 1) * 5 y = 150 + amplitude * Sin(frequency * x) points(i, 1) = x points(i, 2) = y Next i Dim wave As Shape Set wave = Shapes.AddPolyline(points) wave.Name = \"SineWave\" End Sub","title":"Creating Complex Geometries"},{"location":"03_advanced/01_graphics/graphics/#interactive-graphics","text":"You can create interactive graphics that respond to user input: Sub CreateInteractiveBeam() Dim length As Double Dim height As Double ' Get dimensions from user length = InputBox(\"Enter beam length:\", \"Beam Length\", 200) height = InputBox(\"Enter beam height:\", \"Beam Height\", 50) ' Create beam with user dimensions Dim beam As Shape Set beam = Shapes.AddShape(msoShapeRectangle, 100, 100, length, height) beam.Name = \"InteractiveBeam\" ' Add text label Dim label As Shape Set label = Shapes.AddTextbox(msoTextOrientationHorizontal, 100, 80, 100, 20) label.TextFrame.Characters.Text = \"L=\" & length & \", H=\" & height End Sub","title":"Interactive Graphics"},{"location":"03_advanced/01_graphics/graphics/#best-practices","text":"Always name your shapes - This makes them easier to reference later Use variables for coordinates - Makes your code more readable and maintainable Check for existing shapes - Delete old shapes before creating new ones to avoid clutter Use meaningful variable names - Makes your code self-documenting Group related shapes - Consider using shape groups for complex drawings","title":"Best Practices"},{"location":"03_advanced/01_graphics/graphics/#example-applications","text":"Custom graphics in Excel VBA can be used for: Engineering drawings and diagrams Flowcharts and process maps Mathematical visualizations Interactive dashboards Educational materials Technical documentation The power of VBA graphics lies in the ability to create dynamic, parameter-driven drawings that automatically update based on user input or calculations, making Excel a powerful tool for technical graphics and visualization.","title":"Example Applications"},{"location":"03_advanced/02_email/email/","text":"Sending E-Mail Using VBA in Excel It is often useful to send e-mail using VB code. You can also send text messages using this technique. This page includes sample code and instructions. Adding the Email Utilities Module First of all, you need to add some code to your project. Do the following: Download the email_utilities.bas file containing VB code for sending e-mail. Go to your VB Editor window and right-click in the Project Explorer window on the left and select Import File . Navigate to the email_utilities.bas file and open it. It will then be added as a new module. Open the module and look at the functions and subs. You can now call these from anywhere in your code. So to use the send_mail sub, you just need to call it and pass the arguments. Like this: send_mail \"myaddress@gmail.com\", \"TEST\", \"Hello world.\" This will create a new message and launch your default e-mail client (Outlook, Thunderbird, etc). If you are working in the CAEDM network, there may not be an e-mail client set up on your account so the first time you run this you will probably need to go through a setup process. If you want to be able to send mail without having to hit the Send button on each message, you will need to use the Outlook version of the send_mail function. Sending Text Messages Next you need to decide if you want to send e-mail or text messages. To send a text message you use the same code, but you use the phone number and carrier to formulate an e-mail address for the text message. First you have to determine the correct e-mail suffix from the following list: Company E-mail tag Sprint messaging.sprintpcs.com AT&T mmode.com Cingular mobile.mycingular.com Nextel messaging.nextel.com T-Mobile tmomail.net Verizon vtext.com You can look up more complete lists on the internet. Then you take the phone number (\"111-222-3333\") and remove the dashes so that it is nothing but numbers (\"1112223333\") using the Replace string function. This creates the prefix. Then you combine the prefix and the suffix to generate the e-mail addresses as follows: Mobile # Carrier E-mail 801-111-1111 Sprint 8011111111@messaging.nextel.com 801-222-2222 Nextel 8012222222@messaging.nextel.com 801-333-3333 Cingular 8013333333@mobile.mycingular.com 801-444-4444 Nextel 8014444444@messaging.nextel.com 801-555-5555 Nextel 8015555555@messaging.nextel.com 801-666-6666 AT&T 8016666666@mmode.com 801-777-7777 Verizon 8017777777@vtext.com 801-888-8888 AT&T 8018888888@mmode.com 801-310-9291 T-Mobile 8013109291@tmomail.net 801-209-5114 AT&T 8012095114@mmode.com Sometimes it is easiest to formulate the addresses just using Excel formulas. You can use a VLOOKUP to get the proper suffix from the carrier. Then you use your VB code to loop through the table and send your e-mail messages. Example VBA Code Here's an example of how to send emails to multiple recipients using a loop: Sub SendBulkEmails() Dim i As Integer Dim emailAddress As String Dim subject As String Dim message As String ' Set the subject and message subject = \"Monthly Report\" message = \"Please find attached the monthly report for this month.\" ' Loop through a range of email addresses (assuming they're in column A starting at row 2) For i = 2 To Range(\"A\" & Rows.Count).End(xlUp).Row emailAddress = Range(\"A\" & i).Value ' Only send if there's an email address If emailAddress <> \"\" Then ' Send the email send_mail emailAddress, subject, message End If Next i MsgBox \"Bulk email process completed!\" End Sub Text Message Example Here's how to send text messages using the carrier email addresses: Sub SendTextMessage() Dim phoneNumber As String Dim carrier As String Dim emailAddress As String Dim message As String ' Get phone number and carrier from user phoneNumber = InputBox(\"Enter phone number (e.g., 801-555-1234):\", \"Phone Number\") carrier = InputBox(\"Enter carrier (Sprint, AT&T, Verizon, etc.):\", \"Carrier\") message = InputBox(\"Enter your message:\", \"Message\") ' Remove dashes from phone number phoneNumber = Replace(phoneNumber, \"-\", \"\") ' Create email address based on carrier Select Case LCase(carrier) Case \"sprint\" emailAddress = phoneNumber & \"@messaging.sprintpcs.com\" Case \"at&t\", \"att\" emailAddress = phoneNumber & \"@mmode.com\" Case \"verizon\" emailAddress = phoneNumber & \"@vtext.com\" Case \"t-mobile\", \"tmobile\" emailAddress = phoneNumber & \"@tmomail.net\" Case Else MsgBox \"Carrier not recognized. Please check the spelling.\" Exit Sub End Select ' Send the text message send_mail emailAddress, \"\", message MsgBox \"Text message sent to \" & emailAddress End Sub Advanced Email Features The email utilities module provides several functions for different email scenarios: Sending with Attachments ' Send email with attachment send_mail_with_attachment \"recipient@example.com\", \"Subject\", \"Message\", \"C:\\path\\to\\file.xlsx\" Sending to Multiple Recipients ' Send to multiple recipients (comma-separated) send_mail \"user1@example.com,user2@example.com,user3@example.com\", \"Subject\", \"Message\" HTML Email ' Send HTML formatted email send_html_mail \"recipient@example.com\", \"Subject\", \"<h1>Hello</h1><p>This is <b>HTML</b> formatted.</p>\" Error Handling It's important to add error handling when sending emails: Sub SendEmailWithErrorHandling() On Error GoTo ErrorHandler Dim emailAddress As String emailAddress = \"test@example.com\" ' Attempt to send email send_mail emailAddress, \"Test\", \"This is a test email\" MsgBox \"Email sent successfully!\" Exit Sub ErrorHandler: MsgBox \"Error sending email: \" & Err.Description Resume Next End Sub Best Practices Always test with your own email first - Make sure the system works before sending to others Use meaningful subject lines - Helps recipients identify your emails Keep messages concise - Text messages have character limits Handle errors gracefully - Add error handling to prevent crashes Respect rate limits - Don't send too many emails too quickly Verify email addresses - Check that addresses are valid before sending Other Resources For more information on sending email using VBA, see the following: Ron de Bruin's Send Mail Page (great resource here - extensive set of sample code) MSDN Outlook Sample Code (Outlook sample code) MSDN Part 2 (Part 2 from previous link) MakeUseOf CDO Method (The CDO method - I haven't tried this, but it looks pretty slick) Troubleshooting Common issues and solutions: Email client not configured - Make sure you have a default email client set up Security warnings - Some email clients may block automated emails Network restrictions - Corporate networks may block certain email functionality Character encoding - Special characters may not display correctly in some email clients The email utilities module provides a simple and effective way to integrate email functionality into your Excel VBA applications, making it easy to automate communication tasks and send notifications automatically.","title":"Email"},{"location":"03_advanced/02_email/email/#sending-e-mail-using-vba-in-excel","text":"It is often useful to send e-mail using VB code. You can also send text messages using this technique. This page includes sample code and instructions.","title":"Sending E-Mail Using VBA in Excel"},{"location":"03_advanced/02_email/email/#adding-the-email-utilities-module","text":"First of all, you need to add some code to your project. Do the following: Download the email_utilities.bas file containing VB code for sending e-mail. Go to your VB Editor window and right-click in the Project Explorer window on the left and select Import File . Navigate to the email_utilities.bas file and open it. It will then be added as a new module. Open the module and look at the functions and subs. You can now call these from anywhere in your code. So to use the send_mail sub, you just need to call it and pass the arguments. Like this: send_mail \"myaddress@gmail.com\", \"TEST\", \"Hello world.\" This will create a new message and launch your default e-mail client (Outlook, Thunderbird, etc). If you are working in the CAEDM network, there may not be an e-mail client set up on your account so the first time you run this you will probably need to go through a setup process. If you want to be able to send mail without having to hit the Send button on each message, you will need to use the Outlook version of the send_mail function.","title":"Adding the Email Utilities Module"},{"location":"03_advanced/02_email/email/#sending-text-messages","text":"Next you need to decide if you want to send e-mail or text messages. To send a text message you use the same code, but you use the phone number and carrier to formulate an e-mail address for the text message. First you have to determine the correct e-mail suffix from the following list: Company E-mail tag Sprint messaging.sprintpcs.com AT&T mmode.com Cingular mobile.mycingular.com Nextel messaging.nextel.com T-Mobile tmomail.net Verizon vtext.com You can look up more complete lists on the internet. Then you take the phone number (\"111-222-3333\") and remove the dashes so that it is nothing but numbers (\"1112223333\") using the Replace string function. This creates the prefix. Then you combine the prefix and the suffix to generate the e-mail addresses as follows: Mobile # Carrier E-mail 801-111-1111 Sprint 8011111111@messaging.nextel.com 801-222-2222 Nextel 8012222222@messaging.nextel.com 801-333-3333 Cingular 8013333333@mobile.mycingular.com 801-444-4444 Nextel 8014444444@messaging.nextel.com 801-555-5555 Nextel 8015555555@messaging.nextel.com 801-666-6666 AT&T 8016666666@mmode.com 801-777-7777 Verizon 8017777777@vtext.com 801-888-8888 AT&T 8018888888@mmode.com 801-310-9291 T-Mobile 8013109291@tmomail.net 801-209-5114 AT&T 8012095114@mmode.com Sometimes it is easiest to formulate the addresses just using Excel formulas. You can use a VLOOKUP to get the proper suffix from the carrier. Then you use your VB code to loop through the table and send your e-mail messages.","title":"Sending Text Messages"},{"location":"03_advanced/02_email/email/#example-vba-code","text":"Here's an example of how to send emails to multiple recipients using a loop: Sub SendBulkEmails() Dim i As Integer Dim emailAddress As String Dim subject As String Dim message As String ' Set the subject and message subject = \"Monthly Report\" message = \"Please find attached the monthly report for this month.\" ' Loop through a range of email addresses (assuming they're in column A starting at row 2) For i = 2 To Range(\"A\" & Rows.Count).End(xlUp).Row emailAddress = Range(\"A\" & i).Value ' Only send if there's an email address If emailAddress <> \"\" Then ' Send the email send_mail emailAddress, subject, message End If Next i MsgBox \"Bulk email process completed!\" End Sub","title":"Example VBA Code"},{"location":"03_advanced/02_email/email/#text-message-example","text":"Here's how to send text messages using the carrier email addresses: Sub SendTextMessage() Dim phoneNumber As String Dim carrier As String Dim emailAddress As String Dim message As String ' Get phone number and carrier from user phoneNumber = InputBox(\"Enter phone number (e.g., 801-555-1234):\", \"Phone Number\") carrier = InputBox(\"Enter carrier (Sprint, AT&T, Verizon, etc.):\", \"Carrier\") message = InputBox(\"Enter your message:\", \"Message\") ' Remove dashes from phone number phoneNumber = Replace(phoneNumber, \"-\", \"\") ' Create email address based on carrier Select Case LCase(carrier) Case \"sprint\" emailAddress = phoneNumber & \"@messaging.sprintpcs.com\" Case \"at&t\", \"att\" emailAddress = phoneNumber & \"@mmode.com\" Case \"verizon\" emailAddress = phoneNumber & \"@vtext.com\" Case \"t-mobile\", \"tmobile\" emailAddress = phoneNumber & \"@tmomail.net\" Case Else MsgBox \"Carrier not recognized. Please check the spelling.\" Exit Sub End Select ' Send the text message send_mail emailAddress, \"\", message MsgBox \"Text message sent to \" & emailAddress End Sub","title":"Text Message Example"},{"location":"03_advanced/02_email/email/#advanced-email-features","text":"The email utilities module provides several functions for different email scenarios:","title":"Advanced Email Features"},{"location":"03_advanced/02_email/email/#sending-with-attachments","text":"' Send email with attachment send_mail_with_attachment \"recipient@example.com\", \"Subject\", \"Message\", \"C:\\path\\to\\file.xlsx\"","title":"Sending with Attachments"},{"location":"03_advanced/02_email/email/#sending-to-multiple-recipients","text":"' Send to multiple recipients (comma-separated) send_mail \"user1@example.com,user2@example.com,user3@example.com\", \"Subject\", \"Message\"","title":"Sending to Multiple Recipients"},{"location":"03_advanced/02_email/email/#html-email","text":"' Send HTML formatted email send_html_mail \"recipient@example.com\", \"Subject\", \"<h1>Hello</h1><p>This is <b>HTML</b> formatted.</p>\"","title":"HTML Email"},{"location":"03_advanced/02_email/email/#error-handling","text":"It's important to add error handling when sending emails: Sub SendEmailWithErrorHandling() On Error GoTo ErrorHandler Dim emailAddress As String emailAddress = \"test@example.com\" ' Attempt to send email send_mail emailAddress, \"Test\", \"This is a test email\" MsgBox \"Email sent successfully!\" Exit Sub ErrorHandler: MsgBox \"Error sending email: \" & Err.Description Resume Next End Sub","title":"Error Handling"},{"location":"03_advanced/02_email/email/#best-practices","text":"Always test with your own email first - Make sure the system works before sending to others Use meaningful subject lines - Helps recipients identify your emails Keep messages concise - Text messages have character limits Handle errors gracefully - Add error handling to prevent crashes Respect rate limits - Don't send too many emails too quickly Verify email addresses - Check that addresses are valid before sending","title":"Best Practices"},{"location":"03_advanced/02_email/email/#other-resources","text":"For more information on sending email using VBA, see the following: Ron de Bruin's Send Mail Page (great resource here - extensive set of sample code) MSDN Outlook Sample Code (Outlook sample code) MSDN Part 2 (Part 2 from previous link) MakeUseOf CDO Method (The CDO method - I haven't tried this, but it looks pretty slick)","title":"Other Resources"},{"location":"03_advanced/02_email/email/#troubleshooting","text":"Common issues and solutions: Email client not configured - Make sure you have a default email client set up Security warnings - Some email clients may block automated emails Network restrictions - Corporate networks may block certain email functionality Character encoding - Special characters may not display correctly in some email clients The email utilities module provides a simple and effective way to integrate email functionality into your Excel VBA applications, making it easy to automate communication tasks and send notifications automatically.","title":"Troubleshooting"},{"location":"03_advanced/03_files/files/","text":"Looping Over Files One of the greatest benefits of using VBA with Excel is that you can automate tasks that can ordinarily be time-consuming. One form of automation that can be especially useful is to automatically open a set of files in a folder and open each of the files, make a change to the file content, and save the file. This can be accomplished quite easily with VBA in Excel, especially if the files correspond to Excel spreadsheets. In this page, we will work through an example of modifying a set of spreadsheet files via VBA. Using this example as a guide, you can modify the code to fit your circumstances. The files associated with this exercise are in a zip archive and can be downloaded here: loopingfiles.xlsm samplefiles.zip If you wish to follow along, please download and unzip the files in the zip archive to a folder named \"samplefiles\". Then open the spreadsheet file (\"loopingfiles.xlsm\") in Excel. Renaming the Files When you unzip the samplefiles.zip archive, you should see the following set of files: In this case, each of these files is empty, but in other cases they may contain data. Our objective is to open each of these files and copy a table to the main sheet and then save the changes. Whenever you loop over files, you must have some systematic way of determining the names of the files in the folder. There used to be a FileSearch object that would list all of the files in a directory, but it was deprecated (discontinued) by Microsoft because it was being used to write viruses. So the simplest thing to do now is to name the files so that we can formulate the file name in code as we iterate through a For loop from 1 to the number of files. Fortunately, it is rather easy to rename the files as shown. If you have an existing set of files to rename, you can do it as follows: Select all of the files Right-click on the files and select the Rename command. Enter a common name (\"worksheet\" in the example shown above) and hit the return key. At this point all files are renamed as follows: This format is easier to recreate using code (see below). Input Options When you open the spreadsheet file you will see the main page: The inputs to the code are in three cells: B11 , B13 , and B15 . B11 contains the path to the folder containing the files you wish to modify. B13 contains the prefix used when naming the files. Compare to file list shown above. B15 contains the number of files. Please note that cells B11, B13, and B15 have been named folderlocation , prefix , and nfiles , respectively. You may need to change these values before proceeding. Before looking at the code, click on the Sheet2 tab and note the contents: For our example problem, we will be copying this table from the loopingfiles.xlsm workbook to the first sheet in each of the files in the samplefiles folder and saving the changes. Code Next we will look at the source code associated with the Fix Files button. Private Sub cmdFixFiles_Click() Dim myrow As Integer Dim i As Integer Dim nfiles As Integer Dim filepath As String 'Set the default working directory ChDir Range(\"folderlocation\") 'Loop through each of the files in the folder nfiles = Range(\"nfiles\") For i = 1 To nfiles 'Copy the header and table on Sheet2 to the clipboard Sheets(\"Sheet2\").Range(\"A1:E18\").Copy 'Formulate a text string identifying the full path to file i filepath = Range(\"startpath\") & \"\\\" & Range(\"prefix\") & \" (\" & i & \").xlsx\" 'Open the file Workbooks.Open Filename:=filepath 'Select the upper left cell and past the clipboard contents ActiveSheet.Range(\"A1\").Select ActiveSheet.Paste 'Fit the column widths ActiveSheet.Columns(\"B:B\").EntireColumn.AutoFit ActiveSheet.Columns(\"C:C\").EntireColumn.AutoFit ActiveSheet.Columns(\"D:D\").EntireColumn.AutoFit ActiveSheet.Columns(\"E:E\").EntireColumn.AutoFit 'Select one of the cells so that the entire table is no longer selected (optional) ActiveSheet.Range(\"B4\").Select 'Save and close the file ActiveWorkbook.Save ActiveWorkbook.Close 'Go to the next file Next i 'Exit cut/copy mode (optional) Application.CutCopyMode = False End Sub Each of the steps in the code is documented with a comment. Note how the folder location, prefix, and file number are used to generate a complete path to the file as shown on this line: 'Formulate a text string identifying the full path to file i filepath = Range(\"startpath\") & \"\\\" & Range(\"prefix\") & \" (\" & i & \").xlsx\" Also, note that once you open another workbook, you have to be very careful how you reference cells and ranges. For example, if you reference cell A4 , to which workbook does that apply? To ensure that there is no confusion, you should add the ActiveSheet or ActiveWorkbook prefix to all references to the external workbook after you open it. If you need to refer to the current workbook (the one containing the code) while the other workbook is open, use the prefix ThisWorkbook before all sheet or range references. If you are not sure how to structure the interaction between your two workbooks, you can always record a macro and perform the steps you wish to perform and then examine the macro code and adapt it to the sample shown above. You may wish to try running the code above. You will see the screen flash once for each sample file as the code runs. After running the code, open each of the sample files to verify that the table was properly copied. Advanced File Operations Using FileSystemObject For more advanced file operations, you can use the FileSystemObject: Sub ProcessFilesWithFSO() Dim FSO As Object Dim folder As Object Dim file As Object Dim filePath As String ' Create FileSystemObject Set FSO = CreateObject(\"Scripting.FileSystemObject\") ' Get folder object Set folder = FSO.GetFolder(Range(\"folderlocation\").Value) ' Loop through each file in the folder For Each file In folder.Files ' Check if it's an Excel file If Right(file.Name, 4) = \".xlsx\" Or Right(file.Name, 4) = \".xlsm\" Then filePath = file.Path ' Process the file ProcessSingleFile filePath End If Next file Set FSO = Nothing End Sub Sub ProcessSingleFile(filePath As String) Dim wb As Workbook ' Open the workbook Set wb = Workbooks.Open(filePath) ' Make your changes here ' ... ' Save and close wb.Save wb.Close End Sub Filtering Files by Extension Sub ProcessSpecificFileTypes() Dim FSO As Object Dim folder As Object Dim file As Object Dim extensions() As String Dim i As Integer ' Define file extensions to process extensions = Split(\"xlsx,xlsm,xls\", \",\") Set FSO = CreateObject(\"Scripting.FileSystemObject\") Set folder = FSO.GetFolder(Range(\"folderlocation\").Value) For Each file In folder.Files ' Check if file has one of our target extensions For i = 0 To UBound(extensions) If LCase(Right(file.Name, Len(extensions(i)))) = LCase(extensions(i)) Then ProcessSingleFile file.Path Exit For End If Next i Next file Set FSO = Nothing End Sub Error Handling It's important to add error handling when processing multiple files: Sub ProcessFilesWithErrorHandling() Dim FSO As Object Dim folder As Object Dim file As Object Dim errorCount As Integer Dim successCount As Integer errorCount = 0 successCount = 0 On Error Resume Next Set FSO = CreateObject(\"Scripting.FileSystemObject\") Set folder = FSO.GetFolder(Range(\"folderlocation\").Value) For Each file In folder.Files If Right(file.Name, 4) = \".xlsx\" Then If ProcessSingleFile(file.Path) Then successCount = successCount + 1 Else errorCount = errorCount + 1 End If End If Next file ' Report results MsgBox \"Processing complete!\" & vbCrLf & _ \"Successful: \" & successCount & vbCrLf & _ \"Errors: \" & errorCount Set FSO = Nothing End Sub Function ProcessSingleFile(filePath As String) As Boolean On Error GoTo ErrorHandler Dim wb As Workbook Set wb = Workbooks.Open(filePath) ' Your processing code here ' ... wb.Save wb.Close ProcessSingleFile = True Exit Function ErrorHandler: If Not wb Is Nothing Then wb.Close SaveChanges:=False End If ProcessSingleFile = False End Function Best Practices Always use error handling - Files can be locked, corrupted, or inaccessible Close workbooks properly - Use proper workbook references and close them explicitly Use meaningful variable names - Makes your code easier to understand and maintain Test with a small number of files first - Verify your logic before processing hundreds of files Back up important files - File processing can sometimes cause data loss Use progress indicators - For long operations, show progress to the user Common Use Cases Batch formatting - Apply consistent formatting to multiple workbooks Data consolidation - Combine data from multiple files into one master file Report generation - Create reports from multiple data files File cleanup - Remove unnecessary sheets, format data, etc. Data validation - Check multiple files for data quality issues This technique of looping over files is one of the most powerful automation capabilities in Excel VBA, allowing you to process hundreds or thousands of files with a single click.","title":"Files"},{"location":"03_advanced/03_files/files/#looping-over-files","text":"One of the greatest benefits of using VBA with Excel is that you can automate tasks that can ordinarily be time-consuming. One form of automation that can be especially useful is to automatically open a set of files in a folder and open each of the files, make a change to the file content, and save the file. This can be accomplished quite easily with VBA in Excel, especially if the files correspond to Excel spreadsheets. In this page, we will work through an example of modifying a set of spreadsheet files via VBA. Using this example as a guide, you can modify the code to fit your circumstances. The files associated with this exercise are in a zip archive and can be downloaded here: loopingfiles.xlsm samplefiles.zip If you wish to follow along, please download and unzip the files in the zip archive to a folder named \"samplefiles\". Then open the spreadsheet file (\"loopingfiles.xlsm\") in Excel.","title":"Looping Over Files"},{"location":"03_advanced/03_files/files/#renaming-the-files","text":"When you unzip the samplefiles.zip archive, you should see the following set of files: In this case, each of these files is empty, but in other cases they may contain data. Our objective is to open each of these files and copy a table to the main sheet and then save the changes. Whenever you loop over files, you must have some systematic way of determining the names of the files in the folder. There used to be a FileSearch object that would list all of the files in a directory, but it was deprecated (discontinued) by Microsoft because it was being used to write viruses. So the simplest thing to do now is to name the files so that we can formulate the file name in code as we iterate through a For loop from 1 to the number of files. Fortunately, it is rather easy to rename the files as shown. If you have an existing set of files to rename, you can do it as follows: Select all of the files Right-click on the files and select the Rename command. Enter a common name (\"worksheet\" in the example shown above) and hit the return key. At this point all files are renamed as follows: This format is easier to recreate using code (see below).","title":"Renaming the Files"},{"location":"03_advanced/03_files/files/#input-options","text":"When you open the spreadsheet file you will see the main page: The inputs to the code are in three cells: B11 , B13 , and B15 . B11 contains the path to the folder containing the files you wish to modify. B13 contains the prefix used when naming the files. Compare to file list shown above. B15 contains the number of files. Please note that cells B11, B13, and B15 have been named folderlocation , prefix , and nfiles , respectively. You may need to change these values before proceeding. Before looking at the code, click on the Sheet2 tab and note the contents: For our example problem, we will be copying this table from the loopingfiles.xlsm workbook to the first sheet in each of the files in the samplefiles folder and saving the changes.","title":"Input Options"},{"location":"03_advanced/03_files/files/#code","text":"Next we will look at the source code associated with the Fix Files button. Private Sub cmdFixFiles_Click() Dim myrow As Integer Dim i As Integer Dim nfiles As Integer Dim filepath As String 'Set the default working directory ChDir Range(\"folderlocation\") 'Loop through each of the files in the folder nfiles = Range(\"nfiles\") For i = 1 To nfiles 'Copy the header and table on Sheet2 to the clipboard Sheets(\"Sheet2\").Range(\"A1:E18\").Copy 'Formulate a text string identifying the full path to file i filepath = Range(\"startpath\") & \"\\\" & Range(\"prefix\") & \" (\" & i & \").xlsx\" 'Open the file Workbooks.Open Filename:=filepath 'Select the upper left cell and past the clipboard contents ActiveSheet.Range(\"A1\").Select ActiveSheet.Paste 'Fit the column widths ActiveSheet.Columns(\"B:B\").EntireColumn.AutoFit ActiveSheet.Columns(\"C:C\").EntireColumn.AutoFit ActiveSheet.Columns(\"D:D\").EntireColumn.AutoFit ActiveSheet.Columns(\"E:E\").EntireColumn.AutoFit 'Select one of the cells so that the entire table is no longer selected (optional) ActiveSheet.Range(\"B4\").Select 'Save and close the file ActiveWorkbook.Save ActiveWorkbook.Close 'Go to the next file Next i 'Exit cut/copy mode (optional) Application.CutCopyMode = False End Sub Each of the steps in the code is documented with a comment. Note how the folder location, prefix, and file number are used to generate a complete path to the file as shown on this line: 'Formulate a text string identifying the full path to file i filepath = Range(\"startpath\") & \"\\\" & Range(\"prefix\") & \" (\" & i & \").xlsx\" Also, note that once you open another workbook, you have to be very careful how you reference cells and ranges. For example, if you reference cell A4 , to which workbook does that apply? To ensure that there is no confusion, you should add the ActiveSheet or ActiveWorkbook prefix to all references to the external workbook after you open it. If you need to refer to the current workbook (the one containing the code) while the other workbook is open, use the prefix ThisWorkbook before all sheet or range references. If you are not sure how to structure the interaction between your two workbooks, you can always record a macro and perform the steps you wish to perform and then examine the macro code and adapt it to the sample shown above. You may wish to try running the code above. You will see the screen flash once for each sample file as the code runs. After running the code, open each of the sample files to verify that the table was properly copied.","title":"Code"},{"location":"03_advanced/03_files/files/#advanced-file-operations","text":"","title":"Advanced File Operations"},{"location":"03_advanced/03_files/files/#using-filesystemobject","text":"For more advanced file operations, you can use the FileSystemObject: Sub ProcessFilesWithFSO() Dim FSO As Object Dim folder As Object Dim file As Object Dim filePath As String ' Create FileSystemObject Set FSO = CreateObject(\"Scripting.FileSystemObject\") ' Get folder object Set folder = FSO.GetFolder(Range(\"folderlocation\").Value) ' Loop through each file in the folder For Each file In folder.Files ' Check if it's an Excel file If Right(file.Name, 4) = \".xlsx\" Or Right(file.Name, 4) = \".xlsm\" Then filePath = file.Path ' Process the file ProcessSingleFile filePath End If Next file Set FSO = Nothing End Sub Sub ProcessSingleFile(filePath As String) Dim wb As Workbook ' Open the workbook Set wb = Workbooks.Open(filePath) ' Make your changes here ' ... ' Save and close wb.Save wb.Close End Sub","title":"Using FileSystemObject"},{"location":"03_advanced/03_files/files/#filtering-files-by-extension","text":"Sub ProcessSpecificFileTypes() Dim FSO As Object Dim folder As Object Dim file As Object Dim extensions() As String Dim i As Integer ' Define file extensions to process extensions = Split(\"xlsx,xlsm,xls\", \",\") Set FSO = CreateObject(\"Scripting.FileSystemObject\") Set folder = FSO.GetFolder(Range(\"folderlocation\").Value) For Each file In folder.Files ' Check if file has one of our target extensions For i = 0 To UBound(extensions) If LCase(Right(file.Name, Len(extensions(i)))) = LCase(extensions(i)) Then ProcessSingleFile file.Path Exit For End If Next i Next file Set FSO = Nothing End Sub","title":"Filtering Files by Extension"},{"location":"03_advanced/03_files/files/#error-handling","text":"It's important to add error handling when processing multiple files: Sub ProcessFilesWithErrorHandling() Dim FSO As Object Dim folder As Object Dim file As Object Dim errorCount As Integer Dim successCount As Integer errorCount = 0 successCount = 0 On Error Resume Next Set FSO = CreateObject(\"Scripting.FileSystemObject\") Set folder = FSO.GetFolder(Range(\"folderlocation\").Value) For Each file In folder.Files If Right(file.Name, 4) = \".xlsx\" Then If ProcessSingleFile(file.Path) Then successCount = successCount + 1 Else errorCount = errorCount + 1 End If End If Next file ' Report results MsgBox \"Processing complete!\" & vbCrLf & _ \"Successful: \" & successCount & vbCrLf & _ \"Errors: \" & errorCount Set FSO = Nothing End Sub Function ProcessSingleFile(filePath As String) As Boolean On Error GoTo ErrorHandler Dim wb As Workbook Set wb = Workbooks.Open(filePath) ' Your processing code here ' ... wb.Save wb.Close ProcessSingleFile = True Exit Function ErrorHandler: If Not wb Is Nothing Then wb.Close SaveChanges:=False End If ProcessSingleFile = False End Function","title":"Error Handling"},{"location":"03_advanced/03_files/files/#best-practices","text":"Always use error handling - Files can be locked, corrupted, or inaccessible Close workbooks properly - Use proper workbook references and close them explicitly Use meaningful variable names - Makes your code easier to understand and maintain Test with a small number of files first - Verify your logic before processing hundreds of files Back up important files - File processing can sometimes cause data loss Use progress indicators - For long operations, show progress to the user","title":"Best Practices"},{"location":"03_advanced/03_files/files/#common-use-cases","text":"Batch formatting - Apply consistent formatting to multiple workbooks Data consolidation - Combine data from multiple files into one master file Report generation - Create reports from multiple data files File cleanup - Remove unnecessary sheets, format data, etc. Data validation - Check multiple files for data quality issues This technique of looping over files is one of the most powerful automation capabilities in Excel VBA, allowing you to process hundreds or thousands of files with a single click.","title":"Common Use Cases"},{"location":"03_advanced/04_apps/apps/","text":"Sample VBA Applications The following spreadsheets, documents, and VB modules represent examples of how VBA can be used in advanced applications within Excel and by other programs in addition to Excel. Right click on each link to download. I typically discuss these samples at the end of the semester. Title Link Description Weekly Appt. Message Generator MailAppts.bas This is a VBA module for Outlook that will search through appointments in the default calendar and find all appointments of a specified type within a given window (one week for example) of the current date. These appointments are then listed in a new html formatted e-mail message. MS Word Calendar Generator calendar.dot This is a macro for MS Word that I found on the internet. It is attached to a document template. Simply open up the template in Word and it should prompt you with a user form. If that doesn't work, go to the Macros command in the Tools menu and manually start the macro. This macro will search through your default calendar in Outlook and generate a beautifully formatted calendar in Word that you can print or save. MS Word Remove Line Breaks Macro RemoveBreaks.doc This is a little macro I recorded in Word that is useful for taking text from an e-mail message and removing the extra line breaks. To use it, open up this document and cut and paste the text from your e-mail message to the document. Then run the macro from the Tools menu. The macro searches through the text in the document and gets rid of the extra line breaks in the middle of paragraphs. It assumes that all paragraphs are delineated with double line returns. Auto Mail Script ReminderEmail.vbs This is a VB script that can be run simply by clicking on the file or you can launch it on a repeating basis using Windows scheduling. It generates an e-mail message to a list of recipients. To use this, you will need to add it to your Outlook VB code and then modify a few lines of code (which are all clearly marked). AutoCAD Polygon Area Plotter polyarea.bas This was sent to me by a former student. I have not tried it personally. It generates a text tag on a set of polygons indicating the area of each polygon. Get Directory get_dir.bas This is a VB module with functions for prompting the user with the standard Windows dialog for selecting a directory. Can be used in any VBA application. Get File get_file.bas This is a VB module with functions for prompting the user with the standard Windows dialog for selecting a file. Both the import and export version of the file selector dialog are supported. Can be used with any VBA application. New Letter NewLetter.bas This is an Outlook macro. If you first select a contact and then run this macro, it will generate a formatted business letter in Word to the contact. Application Categories These sample applications demonstrate several key areas where VBA can be applied: Office Integration MailAppts.bas - Outlook calendar integration NewLetter.bas - Outlook and Word integration calendar.dot - Word template with VBA macros File System Operations get_dir.bas - Directory selection dialogs get_file.bas - File selection dialogs Text Processing RemoveBreaks.doc - Text formatting automation Automation Scripts ReminderEmail.vbs - Automated email generation polyarea.bas - AutoCAD automation How to Use These Samples For Excel VBA Developers Download the .bas files - These contain VBA code that can be imported into Excel Import into your project - Use the Import File command in the VBE Modify for your needs - Adapt the code to your specific requirements Test thoroughly - Make sure the code works in your environment For Word VBA Developers Download the .dot and .doc files - These contain Word macros Open in Word - The macros should be available automatically Run from Tools menu - Use the Macros command to execute For Outlook VBA Developers Download the .bas files - These contain Outlook VBA code Import into Outlook VBE - Use the Visual Basic Editor in Outlook Modify as needed - Customize for your specific use case Code Examples Here are some key code snippets from these applications: Directory Selection (from get_dir.bas) Function GetDirectory(Optional Title As String = \"Select Directory\") As String Dim FSO As Object Dim Folder As Object Set FSO = CreateObject(\"Scripting.FileSystemObject\") Set Folder = Application.FileDialog(msoFileDialogFolderPicker) With Folder .Title = Title .ButtonName = \"Select\" If .Show = -1 Then GetDirectory = .SelectedItems(1) Else GetDirectory = \"\" End If End With Set FSO = Nothing Set Folder = Nothing End Function File Selection (from get_file.bas) Function GetFile(Optional Title As String = \"Select File\", _ Optional Filter As String = \"All Files (*.*)|*.*\") As String Dim FileDialog As Object Set FileDialog = Application.FileDialog(msoFileDialogFilePicker) With FileDialog .Title = Title .Filters.Clear .Filters.Add \"All Files\", \"*.*\" .AllowMultiSelect = False If .Show = -1 Then GetFile = .SelectedItems(1) Else GetFile = \"\" End If End With Set FileDialog = Nothing End Function Email Generation (from MailAppts.bas) Sub GenerateAppointmentEmail() Dim OutlookApp As Object Dim MailItem As Object Dim Calendar As Object Dim Appointment As Object Dim EmailBody As String ' Create Outlook application object Set OutlookApp = CreateObject(\"Outlook.Application\") ' Create new mail item Set MailItem = OutlookApp.CreateItem(0) ' Set email properties With MailItem .Subject = \"Weekly Appointments\" .To = \"recipient@example.com\" .HTMLBody = GenerateAppointmentHTML() .Display End With Set MailItem = Nothing Set OutlookApp = Nothing End Sub Best Practices Demonstrated These sample applications showcase several VBA best practices: Error Handling - Many include proper error handling Object Cleanup - Proper disposal of COM objects User Interface - Standard Windows dialogs for file/directory selection Modularity - Functions that can be reused across applications Documentation - Clear comments explaining functionality Extending These Applications You can extend these applications by: Adding more features - Enhance functionality based on your needs Improving error handling - Add more robust error checking Creating user forms - Add custom interfaces for better user experience Integrating with databases - Connect to external data sources Adding logging - Track operations for debugging and auditing Troubleshooting Common issues when using these samples: Security settings - Ensure macros are enabled References - Check that required libraries are referenced Permissions - Some operations require elevated permissions Version compatibility - Test with your specific Office version These sample applications provide a solid foundation for understanding how VBA can be used across different Office applications and can serve as starting points for your own automation projects.","title":"Sample Apps"},{"location":"03_advanced/04_apps/apps/#sample-vba-applications","text":"The following spreadsheets, documents, and VB modules represent examples of how VBA can be used in advanced applications within Excel and by other programs in addition to Excel. Right click on each link to download. I typically discuss these samples at the end of the semester. Title Link Description Weekly Appt. Message Generator MailAppts.bas This is a VBA module for Outlook that will search through appointments in the default calendar and find all appointments of a specified type within a given window (one week for example) of the current date. These appointments are then listed in a new html formatted e-mail message. MS Word Calendar Generator calendar.dot This is a macro for MS Word that I found on the internet. It is attached to a document template. Simply open up the template in Word and it should prompt you with a user form. If that doesn't work, go to the Macros command in the Tools menu and manually start the macro. This macro will search through your default calendar in Outlook and generate a beautifully formatted calendar in Word that you can print or save. MS Word Remove Line Breaks Macro RemoveBreaks.doc This is a little macro I recorded in Word that is useful for taking text from an e-mail message and removing the extra line breaks. To use it, open up this document and cut and paste the text from your e-mail message to the document. Then run the macro from the Tools menu. The macro searches through the text in the document and gets rid of the extra line breaks in the middle of paragraphs. It assumes that all paragraphs are delineated with double line returns. Auto Mail Script ReminderEmail.vbs This is a VB script that can be run simply by clicking on the file or you can launch it on a repeating basis using Windows scheduling. It generates an e-mail message to a list of recipients. To use this, you will need to add it to your Outlook VB code and then modify a few lines of code (which are all clearly marked). AutoCAD Polygon Area Plotter polyarea.bas This was sent to me by a former student. I have not tried it personally. It generates a text tag on a set of polygons indicating the area of each polygon. Get Directory get_dir.bas This is a VB module with functions for prompting the user with the standard Windows dialog for selecting a directory. Can be used in any VBA application. Get File get_file.bas This is a VB module with functions for prompting the user with the standard Windows dialog for selecting a file. Both the import and export version of the file selector dialog are supported. Can be used with any VBA application. New Letter NewLetter.bas This is an Outlook macro. If you first select a contact and then run this macro, it will generate a formatted business letter in Word to the contact.","title":"Sample VBA Applications"},{"location":"03_advanced/04_apps/apps/#application-categories","text":"These sample applications demonstrate several key areas where VBA can be applied:","title":"Application Categories"},{"location":"03_advanced/04_apps/apps/#office-integration","text":"MailAppts.bas - Outlook calendar integration NewLetter.bas - Outlook and Word integration calendar.dot - Word template with VBA macros","title":"Office Integration"},{"location":"03_advanced/04_apps/apps/#file-system-operations","text":"get_dir.bas - Directory selection dialogs get_file.bas - File selection dialogs","title":"File System Operations"},{"location":"03_advanced/04_apps/apps/#text-processing","text":"RemoveBreaks.doc - Text formatting automation","title":"Text Processing"},{"location":"03_advanced/04_apps/apps/#automation-scripts","text":"ReminderEmail.vbs - Automated email generation polyarea.bas - AutoCAD automation","title":"Automation Scripts"},{"location":"03_advanced/04_apps/apps/#how-to-use-these-samples","text":"","title":"How to Use These Samples"},{"location":"03_advanced/04_apps/apps/#for-excel-vba-developers","text":"Download the .bas files - These contain VBA code that can be imported into Excel Import into your project - Use the Import File command in the VBE Modify for your needs - Adapt the code to your specific requirements Test thoroughly - Make sure the code works in your environment","title":"For Excel VBA Developers"},{"location":"03_advanced/04_apps/apps/#for-word-vba-developers","text":"Download the .dot and .doc files - These contain Word macros Open in Word - The macros should be available automatically Run from Tools menu - Use the Macros command to execute","title":"For Word VBA Developers"},{"location":"03_advanced/04_apps/apps/#for-outlook-vba-developers","text":"Download the .bas files - These contain Outlook VBA code Import into Outlook VBE - Use the Visual Basic Editor in Outlook Modify as needed - Customize for your specific use case","title":"For Outlook VBA Developers"},{"location":"03_advanced/04_apps/apps/#code-examples","text":"Here are some key code snippets from these applications:","title":"Code Examples"},{"location":"03_advanced/04_apps/apps/#directory-selection-from-get_dirbas","text":"Function GetDirectory(Optional Title As String = \"Select Directory\") As String Dim FSO As Object Dim Folder As Object Set FSO = CreateObject(\"Scripting.FileSystemObject\") Set Folder = Application.FileDialog(msoFileDialogFolderPicker) With Folder .Title = Title .ButtonName = \"Select\" If .Show = -1 Then GetDirectory = .SelectedItems(1) Else GetDirectory = \"\" End If End With Set FSO = Nothing Set Folder = Nothing End Function","title":"Directory Selection (from get_dir.bas)"},{"location":"03_advanced/04_apps/apps/#file-selection-from-get_filebas","text":"Function GetFile(Optional Title As String = \"Select File\", _ Optional Filter As String = \"All Files (*.*)|*.*\") As String Dim FileDialog As Object Set FileDialog = Application.FileDialog(msoFileDialogFilePicker) With FileDialog .Title = Title .Filters.Clear .Filters.Add \"All Files\", \"*.*\" .AllowMultiSelect = False If .Show = -1 Then GetFile = .SelectedItems(1) Else GetFile = \"\" End If End With Set FileDialog = Nothing End Function","title":"File Selection (from get_file.bas)"},{"location":"03_advanced/04_apps/apps/#email-generation-from-mailapptsbas","text":"Sub GenerateAppointmentEmail() Dim OutlookApp As Object Dim MailItem As Object Dim Calendar As Object Dim Appointment As Object Dim EmailBody As String ' Create Outlook application object Set OutlookApp = CreateObject(\"Outlook.Application\") ' Create new mail item Set MailItem = OutlookApp.CreateItem(0) ' Set email properties With MailItem .Subject = \"Weekly Appointments\" .To = \"recipient@example.com\" .HTMLBody = GenerateAppointmentHTML() .Display End With Set MailItem = Nothing Set OutlookApp = Nothing End Sub","title":"Email Generation (from MailAppts.bas)"},{"location":"03_advanced/04_apps/apps/#best-practices-demonstrated","text":"These sample applications showcase several VBA best practices: Error Handling - Many include proper error handling Object Cleanup - Proper disposal of COM objects User Interface - Standard Windows dialogs for file/directory selection Modularity - Functions that can be reused across applications Documentation - Clear comments explaining functionality","title":"Best Practices Demonstrated"},{"location":"03_advanced/04_apps/apps/#extending-these-applications","text":"You can extend these applications by: Adding more features - Enhance functionality based on your needs Improving error handling - Add more robust error checking Creating user forms - Add custom interfaces for better user experience Integrating with databases - Connect to external data sources Adding logging - Track operations for debugging and auditing","title":"Extending These Applications"},{"location":"03_advanced/04_apps/apps/#troubleshooting","text":"Common issues when using these samples: Security settings - Ensure macros are enabled References - Check that required libraries are referenced Permissions - Some operations require elevated permissions Version compatibility - Test with your specific Office version These sample applications provide a solid foundation for understanding how VBA can be used across different Office applications and can serve as starting points for your own automation projects.","title":"Troubleshooting"},{"location":"03_advanced/05_gas/gas/","text":"Google Sheets and Google Apps Script Now that you are familiar with Excel and VBA, you may wish to start exploring Google Sheets and Google Apps Script. When you create a Google account, you have free access to cloud storage on Google Drive, where you can use a free suite of productivity tools to create documents. One of these free tools is Google Sheets, a spreadsheet application. Google Sheets is very similar to Excel. Formulas are created in the same fashion and most of the same functions are supported. Google Sheets supports a powerful scripting environment called Google Apps Script (GAS). GAS is a variant of JavaScript, the most common scripting language for web pages. GAS is an object-oriented programming language. A complete reference for the classes used in the Spreadsheet service of GAS can be found here: https://developers.google.com/apps-script/reference/spreadsheet/ Example code is included. You can also google countless sites with sample GAS code and problem solutions. Google Sheets vs Excel Here are some differences/comparisons between Google Sheets/GAS and Excel/VBA: Feature Google Sheets/GAS Excel/VBA Cost Free Commercial product Platform Support Multi-platform, works on all platforms exactly the same way. All you need is a browser While the Mac version of Excel supports VBA, it is limited Script Security Simply give it permission to run once by making a few clicks and that is it You have to mess with the Macro security settings to get your VBA code to work and you have to save the file as *.xlsm Sharing You can easily share the document with someone else and each of you can edit it, even at the same time. Fantastic for collaborative projects Limited sharing capabilities Ease of Scripting GAS has a steeper learning curve Here I would give the edge to Excel/VBA Controls Google Sheets does NOT support ActiveX controls. You can execute your GAS in one of four ways: a) Using a menu command, b) using a drawing object (you can make it look like a button), c) as a custom function in a formula, d) using the run button in the Script Editor window Full support for ActiveX controls Recording Macros Both platforms allow you to record actions and turn them into code Both platforms allow you to record actions and turn them into code Learning JavaScript Before diving into Google Sheets and GAS, I recommend you spend some time learning about JavaScript. No need to buy a textbook, there are tons of free resources on the web. I recommend the following site: http://www.w3schools.com/ Click on the JavaScript link on the left. Importing Excel Files If you have an Excel file you want to try in Google Sheets, just upload it to your Google Drive and then right-click on it and select Open With|Sheets. It will create a copy of the file in Google Sheets format and open it. Your VBA code will not be preserved, but almost everything else will be. Opening a New Sheet You can also create a new blank sheet. In Google Drive, click on the New button and then select Google Sheets. Opening the Editor Once you open your sheet, you can access the editor by selecting the Tools|Script Editor... command. This takes you to the editor with a new project, a new code file (Code.gs), and an empty function: Writing Your First Function Lets change the function code so that it multiplies the input by 2: function double_it(x) { return x*2; } Save the changes and then go to the sheet and try the formula: It's that easy! Hello World Let's write a function that prints \"hello world\". In Excel VBA, we would write a custom sub. In GAS, we write a function with no parameters and it behaves like a sub. Add the following: function hello_world() { var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheetByName(\"Sheet1\"); sheet.getRange(\"C3:D11\").setValue(\"hello world\"); } To run the code, change the function selector in the toolbar to the editor to \"hello_world\". This sets the active function. Then click on the Play button. The first time you do this you will need to give permission for the script to run. When it finishes, you should see this: Recording a Macro Next, let's record a macro. This process is almost identical to Excel. We will record a simple macro that formats the range of \"hello world\" cells. First, select the Macros|Record macro command in the Tools menu. This puts you into record mode. You should see this window at the bottom of your screen: Next, apply some formatting as follows: Select all of the cells that contain \"hello world\" Change the font to italic Change the cell alignment to center the text Apply borders to the selected cells Fill the selected cells with a color You don't have to follow those steps exactly. Feel free to apply whatever formatting you want. When you are done it will look something like this: When you are done, select the Save command in the macro window at the bottom of your browser. That will bring up the save dialog. Enter \" my_macro \" and select Save . Now we are ready to try our macro out. Before doing so, select the undo button (repeatedly if necessary) to remove the formatting. To run the macro, select the Macros|my_macro command. Boom! Your table should be reformatted. To view the code, go back to the Code Editor and click on the macros.gs item on the left. Your macro code will appear. As is the case with Excel, you can now modify this code, copy-paste it to a different module, etc. Advanced GAS Examples Working with Ranges function workWithRanges() { var sheet = SpreadsheetApp.getActiveSheet(); // Get a range var range = sheet.getRange(\"A1:B10\"); // Set values range.setValue(\"Hello\"); // Get values var values = range.getValues(); // Loop through values for (var i = 0; i < values.length; i++) { for (var j = 0; j < values[i].length; j++) { if (values[i][j] === \"\") { values[i][j] = \"Empty\"; } } } // Set the modified values back range.setValues(values); } Creating Custom Functions function calculateArea(length, width) { return length * width; } function getCurrentDate() { return new Date(); } function formatCurrency(amount) { return \"$\" + amount.toFixed(2); } Working with Multiple Sheets function processAllSheets() { var spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); var sheets = spreadsheet.getSheets(); for (var i = 0; i < sheets.length; i++) { var sheet = sheets[i]; var sheetName = sheet.getName(); // Skip certain sheets if (sheetName === \"Summary\" || sheetName === \"Template\") { continue; } // Process each sheet processSheet(sheet); } } function processSheet(sheet) { // Your sheet processing logic here var lastRow = sheet.getLastRow(); var dataRange = sheet.getRange(2, 1, lastRow - 1, 5); // Example: Sum all numeric values in the first column var values = dataRange.getValues(); var sum = 0; for (var i = 0; i < values.length; i++) { if (typeof values[i][0] === 'number') { sum += values[i][0]; } } // Put the sum in the last row sheet.getRange(lastRow + 1, 1).setValue(\"Total:\"); sheet.getRange(lastRow + 1, 2).setValue(sum); } Event Triggers function onEdit(e) { var range = e.range; var sheet = range.getSheet(); // Only run on specific sheet if (sheet.getName() === \"Data\") { // Check if the edited cell is in a specific column if (range.getColumn() === 3) { // Auto-calculate something based on the edit autoCalculate(range); } } } function autoCalculate(range) { var row = range.getRow(); var sheet = range.getSheet(); // Example: Calculate total for the row var values = sheet.getRange(row, 1, 1, 3).getValues()[0]; var total = values.reduce(function(sum, value) { return sum + (isNaN(value) ? 0 : value); }, 0); sheet.getRange(row, 4).setValue(total); } Best Practices Use meaningful function names - Make your code self-documenting Add comments - Explain complex logic Handle errors gracefully - Use try-catch blocks for error handling Optimize for performance - Minimize API calls by batching operations Test thoroughly - GAS can behave differently than local VBA code Use version control - Consider using Git for complex projects Common GAS Methods Spreadsheet Methods SpreadsheetApp.getActiveSpreadsheet() - Get current spreadsheet SpreadsheetApp.openById(id) - Open by ID SpreadsheetApp.openByUrl(url) - Open by URL Sheet Methods getSheetByName(name) - Get sheet by name getSheets() - Get all sheets getActiveSheet() - Get active sheet insertSheet(name) - Insert new sheet deleteSheet(sheet) - Delete sheet Range Methods getRange(row, column) - Get single cell getRange(row, column, numRows, numColumns) - Get range getRange(a1Notation) - Get range by A1 notation setValue(value) - Set single value setValues(values) - Set multiple values getValues() - Get values getValue() - Get single value Finished! OK, now you have enough to get started. Have fun! Click here to get a copy of the sheet used in this page. Additional Resources Google Apps Script Documentation Google Sheets API Reference GAS Community GAS Examples Gallery Google Apps Script provides a powerful way to extend Google Sheets functionality and create web applications, making it an excellent next step for Excel VBA developers looking to explore cloud-based solutions.","title":"Google App Script"},{"location":"03_advanced/05_gas/gas/#google-sheets-and-google-apps-script","text":"Now that you are familiar with Excel and VBA, you may wish to start exploring Google Sheets and Google Apps Script. When you create a Google account, you have free access to cloud storage on Google Drive, where you can use a free suite of productivity tools to create documents. One of these free tools is Google Sheets, a spreadsheet application. Google Sheets is very similar to Excel. Formulas are created in the same fashion and most of the same functions are supported. Google Sheets supports a powerful scripting environment called Google Apps Script (GAS). GAS is a variant of JavaScript, the most common scripting language for web pages. GAS is an object-oriented programming language. A complete reference for the classes used in the Spreadsheet service of GAS can be found here: https://developers.google.com/apps-script/reference/spreadsheet/ Example code is included. You can also google countless sites with sample GAS code and problem solutions.","title":"Google Sheets and Google Apps Script"},{"location":"03_advanced/05_gas/gas/#google-sheets-vs-excel","text":"Here are some differences/comparisons between Google Sheets/GAS and Excel/VBA: Feature Google Sheets/GAS Excel/VBA Cost Free Commercial product Platform Support Multi-platform, works on all platforms exactly the same way. All you need is a browser While the Mac version of Excel supports VBA, it is limited Script Security Simply give it permission to run once by making a few clicks and that is it You have to mess with the Macro security settings to get your VBA code to work and you have to save the file as *.xlsm Sharing You can easily share the document with someone else and each of you can edit it, even at the same time. Fantastic for collaborative projects Limited sharing capabilities Ease of Scripting GAS has a steeper learning curve Here I would give the edge to Excel/VBA Controls Google Sheets does NOT support ActiveX controls. You can execute your GAS in one of four ways: a) Using a menu command, b) using a drawing object (you can make it look like a button), c) as a custom function in a formula, d) using the run button in the Script Editor window Full support for ActiveX controls Recording Macros Both platforms allow you to record actions and turn them into code Both platforms allow you to record actions and turn them into code","title":"Google Sheets vs Excel"},{"location":"03_advanced/05_gas/gas/#learning-javascript","text":"Before diving into Google Sheets and GAS, I recommend you spend some time learning about JavaScript. No need to buy a textbook, there are tons of free resources on the web. I recommend the following site: http://www.w3schools.com/ Click on the JavaScript link on the left.","title":"Learning JavaScript"},{"location":"03_advanced/05_gas/gas/#importing-excel-files","text":"If you have an Excel file you want to try in Google Sheets, just upload it to your Google Drive and then right-click on it and select Open With|Sheets. It will create a copy of the file in Google Sheets format and open it. Your VBA code will not be preserved, but almost everything else will be.","title":"Importing Excel Files"},{"location":"03_advanced/05_gas/gas/#opening-a-new-sheet","text":"You can also create a new blank sheet. In Google Drive, click on the New button and then select Google Sheets.","title":"Opening a New Sheet"},{"location":"03_advanced/05_gas/gas/#opening-the-editor","text":"Once you open your sheet, you can access the editor by selecting the Tools|Script Editor... command. This takes you to the editor with a new project, a new code file (Code.gs), and an empty function:","title":"Opening the Editor"},{"location":"03_advanced/05_gas/gas/#writing-your-first-function","text":"Lets change the function code so that it multiplies the input by 2: function double_it(x) { return x*2; } Save the changes and then go to the sheet and try the formula: It's that easy!","title":"Writing Your First Function"},{"location":"03_advanced/05_gas/gas/#hello-world","text":"Let's write a function that prints \"hello world\". In Excel VBA, we would write a custom sub. In GAS, we write a function with no parameters and it behaves like a sub. Add the following: function hello_world() { var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheetByName(\"Sheet1\"); sheet.getRange(\"C3:D11\").setValue(\"hello world\"); } To run the code, change the function selector in the toolbar to the editor to \"hello_world\". This sets the active function. Then click on the Play button. The first time you do this you will need to give permission for the script to run. When it finishes, you should see this:","title":"Hello World"},{"location":"03_advanced/05_gas/gas/#recording-a-macro","text":"Next, let's record a macro. This process is almost identical to Excel. We will record a simple macro that formats the range of \"hello world\" cells. First, select the Macros|Record macro command in the Tools menu. This puts you into record mode. You should see this window at the bottom of your screen: Next, apply some formatting as follows: Select all of the cells that contain \"hello world\" Change the font to italic Change the cell alignment to center the text Apply borders to the selected cells Fill the selected cells with a color You don't have to follow those steps exactly. Feel free to apply whatever formatting you want. When you are done it will look something like this: When you are done, select the Save command in the macro window at the bottom of your browser. That will bring up the save dialog. Enter \" my_macro \" and select Save . Now we are ready to try our macro out. Before doing so, select the undo button (repeatedly if necessary) to remove the formatting. To run the macro, select the Macros|my_macro command. Boom! Your table should be reformatted. To view the code, go back to the Code Editor and click on the macros.gs item on the left. Your macro code will appear. As is the case with Excel, you can now modify this code, copy-paste it to a different module, etc.","title":"Recording a Macro"},{"location":"03_advanced/05_gas/gas/#advanced-gas-examples","text":"","title":"Advanced GAS Examples"},{"location":"03_advanced/05_gas/gas/#working-with-ranges","text":"function workWithRanges() { var sheet = SpreadsheetApp.getActiveSheet(); // Get a range var range = sheet.getRange(\"A1:B10\"); // Set values range.setValue(\"Hello\"); // Get values var values = range.getValues(); // Loop through values for (var i = 0; i < values.length; i++) { for (var j = 0; j < values[i].length; j++) { if (values[i][j] === \"\") { values[i][j] = \"Empty\"; } } } // Set the modified values back range.setValues(values); }","title":"Working with Ranges"},{"location":"03_advanced/05_gas/gas/#creating-custom-functions","text":"function calculateArea(length, width) { return length * width; } function getCurrentDate() { return new Date(); } function formatCurrency(amount) { return \"$\" + amount.toFixed(2); }","title":"Creating Custom Functions"},{"location":"03_advanced/05_gas/gas/#working-with-multiple-sheets","text":"function processAllSheets() { var spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); var sheets = spreadsheet.getSheets(); for (var i = 0; i < sheets.length; i++) { var sheet = sheets[i]; var sheetName = sheet.getName(); // Skip certain sheets if (sheetName === \"Summary\" || sheetName === \"Template\") { continue; } // Process each sheet processSheet(sheet); } } function processSheet(sheet) { // Your sheet processing logic here var lastRow = sheet.getLastRow(); var dataRange = sheet.getRange(2, 1, lastRow - 1, 5); // Example: Sum all numeric values in the first column var values = dataRange.getValues(); var sum = 0; for (var i = 0; i < values.length; i++) { if (typeof values[i][0] === 'number') { sum += values[i][0]; } } // Put the sum in the last row sheet.getRange(lastRow + 1, 1).setValue(\"Total:\"); sheet.getRange(lastRow + 1, 2).setValue(sum); }","title":"Working with Multiple Sheets"},{"location":"03_advanced/05_gas/gas/#event-triggers","text":"function onEdit(e) { var range = e.range; var sheet = range.getSheet(); // Only run on specific sheet if (sheet.getName() === \"Data\") { // Check if the edited cell is in a specific column if (range.getColumn() === 3) { // Auto-calculate something based on the edit autoCalculate(range); } } } function autoCalculate(range) { var row = range.getRow(); var sheet = range.getSheet(); // Example: Calculate total for the row var values = sheet.getRange(row, 1, 1, 3).getValues()[0]; var total = values.reduce(function(sum, value) { return sum + (isNaN(value) ? 0 : value); }, 0); sheet.getRange(row, 4).setValue(total); }","title":"Event Triggers"},{"location":"03_advanced/05_gas/gas/#best-practices","text":"Use meaningful function names - Make your code self-documenting Add comments - Explain complex logic Handle errors gracefully - Use try-catch blocks for error handling Optimize for performance - Minimize API calls by batching operations Test thoroughly - GAS can behave differently than local VBA code Use version control - Consider using Git for complex projects","title":"Best Practices"},{"location":"03_advanced/05_gas/gas/#common-gas-methods","text":"","title":"Common GAS Methods"},{"location":"03_advanced/05_gas/gas/#spreadsheet-methods","text":"SpreadsheetApp.getActiveSpreadsheet() - Get current spreadsheet SpreadsheetApp.openById(id) - Open by ID SpreadsheetApp.openByUrl(url) - Open by URL","title":"Spreadsheet Methods"},{"location":"03_advanced/05_gas/gas/#sheet-methods","text":"getSheetByName(name) - Get sheet by name getSheets() - Get all sheets getActiveSheet() - Get active sheet insertSheet(name) - Insert new sheet deleteSheet(sheet) - Delete sheet","title":"Sheet Methods"},{"location":"03_advanced/05_gas/gas/#range-methods","text":"getRange(row, column) - Get single cell getRange(row, column, numRows, numColumns) - Get range getRange(a1Notation) - Get range by A1 notation setValue(value) - Set single value setValues(values) - Set multiple values getValues() - Get values getValue() - Get single value","title":"Range Methods"},{"location":"03_advanced/05_gas/gas/#finished","text":"OK, now you have enough to get started. Have fun! Click here to get a copy of the sheet used in this page.","title":"Finished!"},{"location":"03_advanced/05_gas/gas/#additional-resources","text":"Google Apps Script Documentation Google Sheets API Reference GAS Community GAS Examples Gallery Google Apps Script provides a powerful way to extend Google Sheets functionality and create web applications, making it an excellent next step for Excel VBA developers looking to explore cloud-based solutions.","title":"Additional Resources"}]}